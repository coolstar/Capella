<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommonWin32</name>
    </assembly>
    <members>
        <member name="T:CommonWin32.API.Advapi32">
            <summary>
            API methods in Advapi32.dll.
            </summary>
        </member>
        <member name="P:CommonWin32.API.Advapi32.IsPlatformSupported">
            <summary>
            Gets whether this api is supported.
            </summary>
        </member>
        <member name="M:CommonWin32.API.Advapi32.CredRead(System.String,CommonWin32.Authentication.CredentialType,System.UInt32,System.IntPtr@)">
            <summary>
            The CredRead function reads a credential from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.
            </summary>
            <param name="targetName">Name of the target.</param>
            <param name="type">Type of the credential to read. </param>
            <param name="flags">Currently reserved and must be zero.</param>
            <param name="credential">Pointer to a single allocated block buffer to return the credential. Any pointers contained within the buffer are pointers to locations within this single allocated block. The single returned buffer must be freed by calling CredFree.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.API.Advapi32.CredWrite(CommonWin32.Authentication.CREDENTIAL@,System.UInt32)">
            <summary>
            The CredWrite function creates a new credential or modifies an existing credential in the user's credential set. The new credential is associated with the logon session of the current token. The token must not have the user's security identifier (SID) disabled.
            </summary>
            <param name="credential">The credential.</param>
            <param name="flags">Flags that control the function's operation.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.API.Advapi32.CredDelete(System.String,CommonWin32.Authentication.CredentialType,System.UInt32)">
            <summary>
            The CredDelete function deletes a credential from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.
            </summary>
            <param name="target">The target.</param>
            <param name="type">Type of the credential to delete. </param>
            <param name="flags">Reserved and must be zero.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.API.Advapi32.CredEnumerate(System.String,System.UInt32,System.UInt32@,System.IntPtr@)">
            <summary>
            The CredEnumerate function enumerates the credentials from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.
            </summary>
            <param name="filter">The filter.</param>
            <param name="flag">The flag.</param>
            <param name="count">Count of the credentials returned in the Credentials array.</param>
            <param name="credentials">Pointer to an array of pointers to credentials. The returned credential is a single allocated block. 
            Any pointers contained within the buffer are pointers to locations within this single allocated block. 
            The single returned buffer must be freed by calling CredFree.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.API.Advapi32.CredFree(System.IntPtr)">
            <summary>
            The CredFree function frees a buffer returned by any of the credentials management functions.
            </summary>
            <param name="buffer">Pointer to the buffer to be freed.</param>
        </member>
        <member name="T:CommonWin32.API.DeviceContextValues">
            <summary>
            Values to pass to the GetDCEx method.
            </summary>
        </member>
        <member name="F:CommonWin32.API.DeviceContextValues.DCX_WINDOW">
            <summary>
            DCX_WINDOW: Returns a DC that corresponds to the window rectangle rather
            than the client rectangle.
            </summary>
        </member>
        <member name="F:CommonWin32.API.DeviceContextValues.DCX_CACHE">
            <summary>
            DCX_CACHE: Returns a DC from the cache, rather than the OWNDC or CLASSDC
            window. Essentially overrides CS_OWNDC and CS_CLASSDC.
            </summary>
        </member>
        <member name="F:CommonWin32.API.DeviceContextValues.DCX_NORESETATTRS">
            <summary>
            DCX_NORESETATTRS: Does not reset the attributes of this DC to the
            default attributes when this DC is released.
            </summary>
        </member>
        <member name="F:CommonWin32.API.DeviceContextValues.DCX_CLIPCHILDREN">
            <summary>
            DCX_CLIPCHILDREN: Excludes the visible regions of all child windows
            below the window identified by hWnd.
            </summary>
        </member>
        <member name="F:CommonWin32.API.DeviceContextValues.DCX_CLIPSIBLINGS">
            <summary>
            DCX_CLIPSIBLINGS: Excludes the visible regions of all sibling windows
            above the window identified by hWnd.
            </summary>
        </member>
        <member name="F:CommonWin32.API.DeviceContextValues.DCX_PARENTCLIP">
            <summary>
            DCX_PARENTCLIP: Uses the visible region of the parent window. The
            parent's WS_CLIPCHILDREN and CS_PARENTDC style bits are ignored. The origin is
            set to the upper-left corner of the window identified by hWnd.
            </summary>
        </member>
        <member name="F:CommonWin32.API.DeviceContextValues.DCX_EXCLUDERGN">
            <summary>
            DCX_EXCLUDERGN: The clipping region identified by hrgnClip is excluded
            from the visible region of the returned DC.
            </summary>
        </member>
        <member name="F:CommonWin32.API.DeviceContextValues.DCX_INTERSECTRGN">
            <summary>
            DCX_INTERSECTRGN: The clipping region identified by hrgnClip is
            intersected with the visible region of the returned DC.
            </summary>
        </member>
        <member name="F:CommonWin32.API.DeviceContextValues.DCX_EXCLUDEUPDATE">
            <summary>
            DCX_EXCLUDEUPDATE: Unknown...Undocumented
            </summary>
        </member>
        <member name="F:CommonWin32.API.DeviceContextValues.DCX_INTERSECTUPDATE">
            <summary>
            DCX_INTERSECTUPDATE: Unknown...Undocumented
            </summary>
        </member>
        <member name="F:CommonWin32.API.DeviceContextValues.DCX_LOCKWINDOWUPDATE">
            <summary>
            DCX_LOCKWINDOWUPDATE: Allows drawing even if there is a LockWindowUpdate
            call in effect that would otherwise exclude this window. Used for drawing during
            tracking.
            </summary>
        </member>
        <member name="F:CommonWin32.API.DeviceContextValues.DCX_VALIDATE">
            <summary>
            DCX_VALIDATE When specified with DCX_INTERSECTUPDATE, causes the DC to
            be completely validated. Using this function with both DCX_INTERSECTUPDATE and
            DCX_VALIDATE is identical to using the BeginPaint function.
            </summary>
        </member>
        <member name="T:CommonWin32.API.Shcore">
            <summary>
            API methods in Shcore.dll.
            </summary>
        </member>
        <member name="P:CommonWin32.API.Shcore.IsPlatformSupported">
            <summary>
            Gets whether this api is supported.
            </summary>
        </member>
        <member name="P:CommonWin32.API.Shcore.ProcessDpiAwareness">
            <summary>
            Gets/sets the dots per inch (dpi) awareness of the current process.
            </summary>
        </member>
        <member name="M:CommonWin32.API.Shcore.SetProcessDpiAwareness(CommonWin32.HighDPI.PROCESS_DPI_AWARENESS)">
            <summary>
            Sets the current process to a specified dots per inch (dpi) awareness level. 
            </summary>
            <param name="value">The DPI awareness value to set.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.API.Shcore.GetProcessDpiAwareness(System.IntPtr)">
            <summary>
            Retrieves the dots per inch (dpi) awareness of the specified process.
            </summary>
            <param name="hprocess">Handle of the process that is being queried. If this parameter is NULL, the current process is queried.</param>
            <returns>The DPI awareness of the specified process.</returns>
        </member>
        <member name="M:CommonWin32.API.Shcore.GetDpiForWindow(System.IntPtr,CommonWin32.HighDPI.MONITOR_DPI_TYPE)">
            <summary>
            Queries the dots per inch (dpi) of a display containing a window.
            </summary>
            <param name="hWnd">Handle of the window.</param>
            <param name="dpiType">The type of DPI being queried</param>
            <returns>The value of the DPI.</returns>
        </member>
        <member name="M:CommonWin32.API.Shcore.GetDpiForMonitor(System.IntPtr,CommonWin32.HighDPI.MONITOR_DPI_TYPE)">
            <summary>
            Queries the dots per inch (dpi) of a display.
            </summary>
            <param name="hmonitor">Handle of the monitor being queried.</param>
            <param name="dpiType">The type of DPI being queried</param>
            <returns>The value of the DPI.</returns>
        </member>
        <member name="M:CommonWin32.API.Shcore.GetDpiForShellUiComponent(CommonWin32.HighDPI.SHELL_UI_COMPONENT)">
            <summary>
            Retrieves the dots per inch (dpi) occupied by a <see cref="T:CommonWin32.HighDPI.SHELL_UI_COMPONENT"/> 
            based on the current scale factor and <see cref="T:CommonWin32.HighDPI.PROCESS_DPI_AWARENESS"/>.
            </summary>
            <param name="component">The type of shell component.</param>
            <returns>The DPI required for an icon of this type.</returns>
        </member>
        <member name="T:CommonWin32.API.Dwmapi">
            <summary>
            API methods in dwmapi.dll.
            </summary>
        </member>
        <member name="P:CommonWin32.API.Dwmapi.IsPlatformSupported">
            <summary>
            Gets whether this api is supported.
            </summary>
        </member>
        <member name="P:CommonWin32.API.Dwmapi.IsCompositionEnabled">
            <summary>
            Obtains a value that indicates whether Desktop Window Manager (DWM) composition is enabled. Applications can listen for composition state changes by handling the WM_DWMCOMPOSITIONCHANGED notification.
            </summary>
        </member>
        <member name="M:CommonWin32.API.Dwmapi.ExtendFrameIntoClientArea(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extends the window frame into the client area.
            </summary>
            <param name="hWnd">The handle to the window in which the frame will be extended into the client area.</param>
            <param name="left">The left margin.</param>
            <param name="top">The top margin.</param>
            <param name="right">The right margin.</param>
            <param name="bottom">The bottom margin.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.API.Dwmapi.SetWindowAttribute(System.IntPtr,CommonWin32.API.DwmWindowAttribute,System.Int32,System.UInt32)">
            <summary>
            Sets the value of non-client rendering attributes for a window.
            </summary>
            <param name="hwnd">The handle to the window that will receive the attributes.</param>
            <param name="attribute">A single DWMWINDOWATTRIBUTE flag to apply to the window. This parameter specifies the attribute and the pvAttribute parameter points to the value of that attribute.</param>
            <param name="attributeValue">The value of the attribute specified in the attribute parameter. Different DWMWINDOWATTRIBUTE flags require different value types.</param>
            <param name="attributeSize">The size, in bytes, of the value type pointed to by the pvAttribute parameter.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.API.Dwmapi.DefWndProc(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            Default window procedure for Desktop Window Manager (DWM) hit testing within the non-client area.
            </summary>
            <param name="hwnd">A handle to the window procedure that received the message.</param>
            <param name="msg">The message.</param>
            <param name="wParam">Specifies additional message information. The content of this parameter depends on the value of the msg parameter.</param>
            <param name="lParam">Specifies additional message information. The content of this parameter depends on the value of the msg parameter.</param>
            <param name="result">A pointer to an LRESULT value that, when this method returns successfully,receives the result of the hit test.</param>
            <returns></returns>
        </member>
        <member name="T:CommonWin32.API.DwmWindowAttribute">
            <summary>
            Flags used by the DwmGetWindowAttribute and DwmSetWindowAttribute functions to specify window attributes for non-client rendering.
            </summary>
        </member>
        <member name="F:CommonWin32.API.DwmWindowAttribute.DWMWA_NCRENDERING_ENABLED">
            <summary>
            Determines whether non-client rendering is enabled. Use this value only with DwmGetWindowAttribute. The retrieved value is of type BOOL. TRUE if non-client rendering is enabled; otherwise, FALSE.
            </summary>
        </member>
        <member name="F:CommonWin32.API.DwmWindowAttribute.DWMWA_NCRENDERING_POLICY">
            <summary>
            The non-client rendering policy. Use this value only with DwmSetWindowAttribute, with its pvAttribute pointing to a value from the DWMNCRENDERINGPOLICY enumeration.
            </summary>
        </member>
        <member name="F:CommonWin32.API.DwmWindowAttribute.DWMWA_TRANSITIONS_FORCEDISABLED">
            <summary>
            Enable or forcibly disable DWM transitions. Use this value only with DwmSetWindowAttribute, with its pvAttribute pointing to a value of TRUE to disable transitions or FALSE to enable transitions.
            </summary>
        </member>
        <member name="F:CommonWin32.API.DwmWindowAttribute.DWMWA_ALLOW_NCPAINT">
            <summary>
            Allow content rendered in the non-client area to be visible on the frame drawn by DWM. Use this value only with DwmSetWindowAttribute, with its pvAttribute pointing to a value of TRUE to allow content rendered in the non-client area to be visible on the frame; otherwise, FALSE.
            </summary>
        </member>
        <member name="F:CommonWin32.API.DwmWindowAttribute.DWMWA_CAPTION_BUTTON_BOUNDS">
            <summary>
            Retrieves the bounds of the caption button area in the window-relative space. Use this value only with DwmGetWindowAttribute. The retrieved value is of type RECT.
            </summary>
        </member>
        <member name="F:CommonWin32.API.DwmWindowAttribute.DWMWA_NONCLIENT_RTL_LAYOUT">
            <summary>
            Specifies whether non-client content is right-to-left (RTL) mirrored. Use this value only with DwmSetWindowAttribute, with its pvAttribute pointing to a value of TRUE if the non-client content is right-to-left (RTL) mirrored; otherwise, FALSE.
            </summary>
        </member>
        <member name="F:CommonWin32.API.DwmWindowAttribute.DWMWA_FORCE_ICONIC_REPRESENTATION">
            <summary>
            Force the window to display an iconic thumbnail or peek representation (a static bitmap), even if a live or snapshot representation of the window is available. This value normally is set during a window's creation and not changed throughout the window's lifetime. Some scenarios, however, might require the value to change over time. Use this value only with DwmSetWindowAttribute, with its pvAttribute pointing to a value of TRUE to require a iconic thumbnail or peek representation; otherwise, FALSE.
            </summary>
        </member>
        <member name="F:CommonWin32.API.DwmWindowAttribute.DWMWA_FLIP3D_POLICY">
            <summary>
            Sets how Flip3D treats the window. Use this value only with DwmSetWindowAttribute, with its pvAttribute pointing to a value from the DWMFLIP3DWINDOWPOLICY enumeration.
            </summary>
        </member>
        <member name="F:CommonWin32.API.DwmWindowAttribute.DWMWA_EXTENDED_FRAME_BOUNDS">
            <summary>
            Retrieves the extended frame bounds rectangle in screen space. Use this value only with DwmGetWindowAttribute. The retrieved value is of type RECT.
            </summary>
        </member>
        <member name="F:CommonWin32.API.DwmWindowAttribute.DWMWA_HAS_ICONIC_BITMAP">
            <summary>
            The window can provide a bitmap for use by DWM as an iconic thumbnail or peek representation (a static bitmap) for the window. This value can be specified with DWMWA_FORCE_ICONIC_REPRESENTATION. This value normally is set during a window's creation and not changed throughout the window's lifetime. Some scenarios, however, might require the value to change over time. Use this value only with DwmSetWindowAttribute, with its pvAttribute pointing to a value of TRUE to inform DWM that the window will provide an iconic thumbnail or peek representation; otherwise, FALSE.
            </summary>
        </member>
        <member name="F:CommonWin32.API.DwmWindowAttribute.DWMWA_DISALLOW_PEEK">
            <summary>
            Do not show peek preview for the window. The peek view shows a full-sized preview of the window when the mouse hovers over the window's thumbnail in the taskbar. If this attribute is set, hovering the mouse pointer over the window's thumbnail dismisses peek (in case another window in the group has a peek preview showing). Use this value only with DwmSetWindowAttribute, with its pvAttribute pointing to a value of TRUE to prevent peek functionality; FALSE to allow it.
            </summary>
        </member>
        <member name="F:CommonWin32.API.DwmWindowAttribute.DWMWA_EXCLUDED_FROM_PEEK">
            <summary>
            Prevents a window from fading to a glass sheet when peek is invoked. Use this value only with DwmSetWindowAttribute, with its pvAttribute pointing to a value of TRUE to prevent the window from fading during another window's peek; FALSE for normal behavior.
            </summary>
        </member>
        <member name="F:CommonWin32.API.DwmWindowAttribute.DWMWA_CLOAK">
            <summary>
            Do not use.
            </summary>
        </member>
        <member name="F:CommonWin32.API.DwmWindowAttribute.DWMWA_CLOAKED">
            <summary>
            Use with DwmGetWindowAttribute. 
            </summary>
        </member>
        <member name="F:CommonWin32.API.DwmWindowAttribute.DWMWA_FREEZE_REPRESENTATION">
            <summary>
            Use with DwmSetWindowAttribute. Freeze the window's thumbnail image with its current visuals. Do no further live updates on the thumbnail image to match the window's contents.
            </summary>
        </member>
        <member name="F:CommonWin32.API.DwmWindowAttribute.DWMWA_LAST">
            <summary>
            The maximum recognized DWMWA value, used for validation purposes.
            </summary>
        </member>
        <member name="T:CommonWin32.API.IconReader">
            <summary>
            Provides static methods to read system icons for both folders and files.
            </summary>
            <example>
            <code>IconReader.GetFileIcon("c:\\general.xls");</code>
            </example>
        </member>
        <member name="T:CommonWin32.API.IconReader.IconSize">
            <summary>
            Options to specify the size of icons to return.
            </summary>
        </member>
        <member name="F:CommonWin32.API.IconReader.IconSize.Large">
            <summary>
            Specify large icon - 32 pixels by 32 pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.API.IconReader.IconSize.Small">
            <summary>
            Specify small icon - 16 pixels by 16 pixels.
            </summary>
        </member>
        <member name="T:CommonWin32.API.IconReader.FolderType">
            <summary>
            Options to specify whether folders should be in the open or closed state.
            </summary>
        </member>
        <member name="F:CommonWin32.API.IconReader.FolderType.Open">
            <summary>
            Specify open folder.
            </summary>
        </member>
        <member name="F:CommonWin32.API.IconReader.FolderType.Closed">
            <summary>
            Specify closed folder.
            </summary>
        </member>
        <member name="M:CommonWin32.API.IconReader.GetFileIcon(System.String,CommonWin32.API.IconReader.IconSize,System.Boolean)">
            <summary>
            Returns an icon for a given file - indicated by the name parameter.
            This works whether the file exists or not.
            </summary>
            <param name="name">Pathname for file.</param>
            <param name="size">Large or small</param>
            <param name="linkOverlay">Whether to include the link icon</param>
            <returns>System.Drawing.Icon</returns>
        </member>
        <member name="M:CommonWin32.API.IconReader.GetFileIconWpf(System.String,CommonWin32.API.IconReader.IconSize,System.Boolean)">
            <summary>
            Returns an icon for a given file - indicated by the name parameter.
            This works whether the file exists or not.
            </summary>
            <param name="name">Pathname for file.</param>
            <param name="size">Large or small</param>
            <param name="linkOverlay">Whether to include the link icon</param>
            <returns>System.Drawing.Icon</returns>
        </member>
        <member name="M:CommonWin32.API.IconReader.GetFolderIcon(CommonWin32.API.IconReader.IconSize,CommonWin32.API.IconReader.FolderType)">
            <summary>
            Used to access system folder icons.
            </summary>
            <param name="size">Specify large or small icons.</param>
            <param name="folderType">Specify open or closed FolderType.</param>
            <returns>System.Drawing.Icon</returns>
        </member>
        <member name="M:CommonWin32.API.IconReader.GetFolderIconWpf(CommonWin32.API.IconReader.IconSize,CommonWin32.API.IconReader.FolderType)">
            <summary>
            Used to access system folder icons.
            </summary>
            <param name="size">Specify large or small icons.</param>
            <param name="folderType">Specify open or closed FolderType.</param>
            <returns>System.Drawing.Icon</returns>
        </member>
        <member name="T:CommonWin32.API.Gdi32">
            <summary>
            API methods in gdi32.dll.
            </summary>
        </member>
        <member name="M:CommonWin32.API.Gdi32.CreateRectRgn(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a rectangular region.
            </summary>
            <param name="nLeftRect">Specifies the x-coordinate of the upper-left corner of the region in logical units.</param>
            <param name="nTopRect">Specifies the y-coordinate of the upper-left corner of the region in logical units.</param>
            <param name="nRightRect">Specifies the x-coordinate of the lower-right corner of the region in logical units.</param>
            <param name="nBottomRect">Specifies the y-coordinate of the lower-right corner of the region in logical units.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.API.Gdi32.CreateRectRgnIndirect(CommonWin32.Rectangles.RECT@)">
            <summary>
            Creates a rectangular region.
            </summary>
            <param name="rc"> RECT structure that contains the coordinates of the upper-left and lower-right corners of the rectangle that defines the region in logical units.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.API.Gdi32.DeleteObject(System.IntPtr)">
            <summary>
            The DeleteObject function deletes a logical pen, brush, font, bitmap, region, or palette, freeing all system resources associated with the object. After the object is deleted, the specified handle is no longer valid.
            </summary>
            <param name="hObject">A handle to a logical pen, brush, font, bitmap, region, or palette.</param>
            <returns></returns>
        </member>
        <member name="T:CommonWin32.API.HWndValues">
            <summary>
            Values for SetWindowPos call.
            </summary>
        </member>
        <member name="F:CommonWin32.API.HWndValues.HWND_BOTTOM">
            <summary>
            Places the window at the bottom of the Z order. If the hWnd parameter identifies a topmost window, the window loses its topmost status and is placed at the bottom of all other windows.
            </summary>
        </member>
        <member name="F:CommonWin32.API.HWndValues.HWND_NOTOPMOST">
            <summary>
            Places the window above all non-topmost windows (that is, behind all topmost windows). This flag has no effect if the window is already a non-topmost window.
            </summary>
        </member>
        <member name="F:CommonWin32.API.HWndValues.HWND_TOP">
            <summary>
            Places the window at the top of the Z order.
            </summary>
        </member>
        <member name="F:CommonWin32.API.HWndValues.HWND_TOPMOST">
            <summary>
            Places the window above all non-topmost windows. The window maintains its topmost position even when it is deactivated.
            </summary>
        </member>
        <member name="T:CommonWin32.API.Kernel32">
            <summary>
            API methods in kernel32.dll.
            </summary>
        </member>
        <member name="M:CommonWin32.API.Kernel32.GetPrivateProfileString(System.String,System.String,System.String,System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            Retrieves a string from the specified section in an initialization file.
            </summary>
            <param name="lpAppName">The name of the section containing the key name. If this parameter is NULL, the GetPrivateProfileString function copies all section names in the file to the supplied buffer.</param>
            <param name="lpKeyName">The name of the key whose associated string is to be retrieved. If this parameter is NULL, all key names in the section specified by the lpAppName parameter are copied to the buffer specified by the lpReturnedString parameter.</param>
            <param name="defaultValue">A default string. If the lpKeyName key cannot be found in the initialization file, GetPrivateProfileString copies the default string to the lpReturnedString buffer. If this parameter is NULL, the default is an empty string, "".</param>
            <param name="lpReturnedString">A pointer to the buffer that receives the retrieved string.</param>
            <param name="bufferSize">The size of the buffer pointed to by the lpReturnedString parameter, in characters.</param>
            <param name="lpFileName">he name of the initialization file. If this parameter does not contain a full path to the file, the system searches for the file in the Windows directory.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.API.Kernel32.GetPrivateProfileInt(System.String,System.String,System.Int32,System.String)">
            <summary>
            Retrieves an integer associated with a key in the specified section of an initialization file.
            </summary>
            <param name="lpAppName">The name of the section in the initialization file.</param>
            <param name="lpKeyName">The name of the key whose value is to be retrieved. This value is in the form of a string; the GetPrivateProfileInt function converts the string into an integer and returns the integer.</param>
            <param name="defaultValue">The default value to return if the key name cannot be found in the initialization file.</param>
            <param name="lpFileName">The name of the initialization file. If this parameter does not contain a full path to the file, the system searches for the file in the Windows directory.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.API.Kernel32.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
            Copies a string into the specified section of an initialization file.
            </summary>
            <param name="lpAppName">The name of the section to which the string will be copied. If the section does not exist, it is created. The name of the section is case-independent; the string can be any combination of uppercase and lowercase letters.</param>
            <param name="lpKeyName">The name of the key to be associated with a string. If the key does not exist in the specified section, it is created. If this parameter is NULL, the entire section, including all entries within the section, is deleted.</param>
            <param name="lpString">If this parameter is NULL, the key pointed to by the lpKeyName parameter is deleted.</param>
            <param name="lpFileName">The name of the initialization file.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.API.Kernel32.IsWindowsVersionOrGreater(System.Int32,System.Int32,System.Int32)">
            <summary>
            Indicates if the current OS version matches, or is greater than, the provided version information. 
            </summary>
            <param name="majorVersion">The major version.</param>
            <param name="minorVersion">The minor version.</param>
            <param name="servicePackMajorVersion">The service pack major version.</param>
            <returns></returns>
        </member>
        <member name="T:CommonWin32.API.MonitorOption">
            <summary>
            Option used with monitor APIs.
            </summary>
        </member>
        <member name="F:CommonWin32.API.MonitorOption.MONITOR_DEFAULTTONULL">
            <summary>
            Returns NULL.
            </summary>
        </member>
        <member name="F:CommonWin32.API.MonitorOption.MONITOR_DEFAULTTOPRIMARY">
            <summary>
            Returns a handle to the primary display monitor.
            </summary>
        </member>
        <member name="F:CommonWin32.API.MonitorOption.MONITOR_DEFAULTTONEAREST">
            <summary>
            Returns a handle to the display monitor that is nearest to the window.
            </summary>
        </member>
        <member name="T:CommonWin32.API.PeekMessageOptions">
            <summary>
            Options for PeekMessage function.
            </summary>
        </member>
        <member name="F:CommonWin32.API.PeekMessageOptions.PM_NOREMOVE">
            <summary>
            Messages are not removed from the queue after processing by PeekMessage.
            </summary>
        </member>
        <member name="F:CommonWin32.API.PeekMessageOptions.PM_REMOVE">
            <summary>
            Messages are removed from the queue after processing by PeekMessage.
            </summary>
        </member>
        <member name="F:CommonWin32.API.PeekMessageOptions.PM_NOYIELD">
            <summary>
            Prevents the system from releasing any thread that is waiting for the caller to go idle.
            Combine this value with either PM_NOREMOVE or PM_REMOVE.
            </summary>
        </member>
        <member name="T:CommonWin32.API.RedrawWindowFlags">
            <summary>
            Flags for RedrawWindow function.
            </summary>
        </member>
        <member name="F:CommonWin32.API.RedrawWindowFlags.RDW_INVALIDATE">
            <summary>
            Invalidates lprcUpdate or hrgnUpdate (only one may be non-NULL). If both are NULL, the entire window is invalidated.
            </summary>
        </member>
        <member name="F:CommonWin32.API.RedrawWindowFlags.RDW_INTERNALPAINT">
            <summary>
            Causes a WM_PAINT message to be posted to the window regardless of whether any portion of the window is invalid.
            </summary>
        </member>
        <member name="F:CommonWin32.API.RedrawWindowFlags.RDW_ERASE">
            <summary>
            Causes the window to receive a WM_ERASEBKGND message when the window is repainted. The RDW_INVALIDATE flag must also be specified; otherwise, RDW_ERASE has no effect.
            </summary>
        </member>
        <member name="F:CommonWin32.API.RedrawWindowFlags.RDW_VALIDATE">
            <summary>
            Validates lprcUpdate or hrgnUpdate (only one may be non-NULL). If both are NULL, the entire window is validated. This flag does not affect internal WM_PAINT messages.
            </summary>
        </member>
        <member name="F:CommonWin32.API.RedrawWindowFlags.RDW_NOINTERNALPAINT">
            <summary>
            Suppresses any pending internal WM_PAINT messages. This flag does not affect WM_PAINT messages resulting from a non-NULL update area.
            </summary>
        </member>
        <member name="F:CommonWin32.API.RedrawWindowFlags.RDW_NOERASE">
            <summary>
            Suppresses any pending WM_ERASEBKGND messages.
            </summary>
        </member>
        <member name="F:CommonWin32.API.RedrawWindowFlags.RDW_NOCHILDREN">
            <summary>
            Excludes child windows, if any, from the repainting operation.
            </summary>
        </member>
        <member name="F:CommonWin32.API.RedrawWindowFlags.RDW_ALLCHILDREN">
            <summary>
            Includes child windows, if any, in the repainting operation.
            </summary>
        </member>
        <member name="F:CommonWin32.API.RedrawWindowFlags.RDW_UPDATENOW">
            <summary>
            Causes the affected windows (as specified by the RDW_ALLCHILDREN and RDW_NOCHILDREN flags) to receive WM_NCPAINT, WM_ERASEBKGND, and WM_PAINT messages, if necessary, before the function returns.
            </summary>
        </member>
        <member name="F:CommonWin32.API.RedrawWindowFlags.RDW_ERASENOW">
            <summary>
            Causes the affected windows (as specified by the RDW_ALLCHILDREN and RDW_NOCHILDREN flags) to receive WM_NCPAINT and WM_ERASEBKGND messages, if necessary, before the function returns. WM_PAINT messages are received at the ordinary time.
            </summary>
        </member>
        <member name="F:CommonWin32.API.RedrawWindowFlags.RDW_FRAME">
            <summary>
            Causes any part of the nonclient area of the window that intersects the update region to receive a WM_NCPAINT message. The RDW_INVALIDATE flag must also be specified; otherwise, RDW_FRAME has no effect. The WM_NCPAINT message is typically not sent during the execution of RedrawWindow unless either RDW_UPDATENOW or RDW_ERASENOW is specified.
            </summary>
        </member>
        <member name="F:CommonWin32.API.RedrawWindowFlags.RDW_NOFRAME">
            <summary>
            Suppresses any pending WM_NCPAINT messages. This flag must be used with RDW_VALIDATE and is typically used with RDW_NOCHILDREN. RDW_NOFRAME should be used with care, as it could cause parts of a window to be painted improperly.
            </summary>
        </member>
        <member name="T:CommonWin32.API.Shell32">
            <summary>
            API methods in shell32.dll.
            </summary>
        </member>
        <member name="M:CommonWin32.API.Shell32.SHAppBarMessage(CommonWin32.Shells.AppBarMessage,CommonWin32.Shells.APPBARDATA@)">
            <summary>
            Sends an appbar message to the system.
            </summary>
            <param name="dwMessage">Appbar message value to send.</param>
            <param name="pData">A pointer to an APPBARDATA structure. The content of the structure on entry and on exit depends on the value set in the dwMessage parameter. See the individual message pages for specifics.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.API.Shell32.ExtractAssociatedIcon(System.IntPtr,System.String,System.Int32@)">
            <summary>
            Retrieves a handle to an indexed icon found in a file or an icon found in an associated executable file.
            </summary>
            <param name="hInst">A handle to the instance of the application calling the function.</param>
            <param name="iconPath">The full path and file name of the file that contains the icon. The function extracts the icon handle from that file, or from an executable file associated with that file.</param>
            <param name="index">The index of the icon whose handle is to be obtained. If the icon handle is obtained from an executable file, the function stores the icon's identifier in this parameter.</param>
            <returns>If the function succeeds, the return value is an icon handle.</returns>
        </member>
        <member name="M:CommonWin32.API.Shell32.ExtractIconEx(System.String,System.Int32,System.IntPtr[],System.IntPtr[],System.Int32)">
            <summary>
            Creates an array of handles to large or small icons extracted from the specified executable file, DLL, or icon file.
            </summary>
            <param name="filePath">The name of an executable file, DLL, or icon file from which icons will be extracted.</param>
            <param name="iconIndex">The zero-based index of the first icon to extract.</param>
            <param name="phiconLarge">An array of icon handles that receives handles to the large icons extracted from the file. If this parameter is NULL, no large icons are extracted from the file.</param>
            <param name="phiconSmall">An array of icon handles that receives handles to the small icons extracted from the file. If this parameter is NULL, no small icons are extracted from the file.</param>
            <param name="nIcons">The number of icons to be extracted from the file.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.API.Shell32.SHGetFileInfo(System.String,CommonWin32.FileManagement.FileAttributes,CommonWin32.Shells.SHFILEINFO@,System.UInt32,CommonWin32.API.ShellFileFlags)">
            <summary>
            Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.
            </summary>
            <param name="pszPath">The path and file name. Both absolute and relative paths are valid.</param>
            <param name="fileAttributes">A combination of one or more file attribute flags.</param>
            <param name="psfi">A SHFILEINFO structure to receive the file information.</param>
            <param name="cbFileInfo">The size, in bytes, of the SHFILEINFO structure pointed to by the psfi parameter.</param>
            <param name="flags">The flags that specify the file information to retrieve.</param>
            <returns></returns>
        </member>
        <member name="T:CommonWin32.API.ShellFileFlags">
            <summary>
            Flags for <see cref="M:CommonWin32.API.Shell32.SHGetFileInfo(System.String,CommonWin32.FileManagement.FileAttributes,CommonWin32.Shells.SHFILEINFO@,System.UInt32,CommonWin32.API.ShellFileFlags)"/>.
            </summary>
        </member>
        <member name="F:CommonWin32.API.ShellFileFlags.SHGFI_ADDOVERLAYS">
            <summary>
            Version 5.0. Apply the appropriate overlays to the file's icon. The SHGFI_ICON flag must also be set.
            </summary>
        </member>
        <member name="F:CommonWin32.API.ShellFileFlags.SHGFI_ATTR_SPECIFIED">
            <summary>
            Modify SHGFI_ATTRIBUTES to indicate that the dwAttributes member of the SHFILEINFO structure at psfi contains the specific attributes that are desired. These attributes are passed to IShellFolder::GetAttributesOf. If this flag is not specified, 0xFFFFFFFF is passed to IShellFolder::GetAttributesOf, requesting all attributes. This flag cannot be specified with the SHGFI_ICON flag.
            </summary>
        </member>
        <member name="F:CommonWin32.API.ShellFileFlags.SHGFI_ATTRIBUTES">
            <summary>
            Retrieve the item attributes. The attributes are copied to the dwAttributes member of the structure specified in the psfi parameter. These are the same attributes that are obtained from IShellFolder::GetAttributesOf.
            </summary>
        </member>
        <member name="F:CommonWin32.API.ShellFileFlags.SHGFI_DISPLAYNAME">
            <summary>
            Retrieve the display name for the file, which is the name as it appears in Windows Explorer. The name is copied to the szDisplayName member of the structure specified in psfi. The returned display name uses the long file name, if there is one, rather than the 8.3 form of the file name. Note that the display name can be affected by settings such as whether extensions are shown.
            </summary>
        </member>
        <member name="F:CommonWin32.API.ShellFileFlags.SHGFI_EXETYPE">
            <summary>
            Retrieve the type of the executable file if pszPath identifies an executable file. The information is packed into the return value. This flag cannot be specified with any other flags.
            </summary>
        </member>
        <member name="F:CommonWin32.API.ShellFileFlags.SHGFI_ICON">
            <summary>
            Retrieve the handle to the icon that represents the file and the index of the icon within the system image list. The handle is copied to the hIcon member of the structure specified by psfi, and the index is copied to the iIcon member.
            </summary>
        </member>
        <member name="F:CommonWin32.API.ShellFileFlags.SHGFI_ICONLOCATION">
            <summary>
            Retrieve the name of the file that contains the icon representing the file specified by pszPath, as returned by the IExtractIcon::GetIconLocation method of the file's icon handler. Also retrieve the icon index within that file. The name of the file containing the icon is copied to the szDisplayName member of the structure specified by psfi. The icon's index is copied to that structure's iIcon member.
            </summary>
        </member>
        <member name="F:CommonWin32.API.ShellFileFlags.SHGFI_LARGEICON">
            <summary>
            Modify SHGFI_ICON, causing the function to retrieve the file's large icon. The SHGFI_ICON flag must also be set.
            </summary>
        </member>
        <member name="F:CommonWin32.API.ShellFileFlags.SHGFI_LINKOVERLAY">
            <summary>
            Modify SHGFI_ICON, causing the function to add the link overlay to the file's icon. The SHGFI_ICON flag must also be set.
            </summary>
        </member>
        <member name="F:CommonWin32.API.ShellFileFlags.SHGFI_OPENICON">
            <summary>
            Modify SHGFI_ICON, causing the function to retrieve the file's open icon. Also used to modify SHGFI_SYSICONINDEX, causing the function to return the handle to the system image list that contains the file's small open icon. A container object displays an open icon to indicate that the container is open. The SHGFI_ICON and/or SHGFI_SYSICONINDEX flag must also be set.
            </summary>
        </member>
        <member name="F:CommonWin32.API.ShellFileFlags.SHGFI_OVERLAYINDEX">
            <summary>
            Version 5.0. Return the index of the overlay icon. The value of the overlay index is returned in the upper eight bits of the iIcon member of the structure specified by psfi. This flag requires that the SHGFI_ICON be set as well.
            </summary>
        </member>
        <member name="F:CommonWin32.API.ShellFileFlags.SHGFI_PIDL">
            <summary>
            Indicate that pszPath is the address of an ITEMIDLIST structure rather than a path name.
            </summary>
        </member>
        <member name="F:CommonWin32.API.ShellFileFlags.SHGFI_SELECTED">
            <summary>
            Modify SHGFI_ICON, causing the function to blend the file's icon with the system highlight color. The SHGFI_ICON flag must also be set.
            </summary>
        </member>
        <member name="F:CommonWin32.API.ShellFileFlags.SHGFI_SHELLICONSIZE">
            <summary>
            Modify SHGFI_ICON, causing the function to retrieve a Shell-sized icon. If this flag is not specified the function sizes the icon according to the system metric values. The SHGFI_ICON flag must also be set.
            </summary>
        </member>
        <member name="F:CommonWin32.API.ShellFileFlags.SHGFI_SMALLICON">
            <summary>
            Modify SHGFI_ICON, causing the function to retrieve the file's small icon. Also used to modify SHGFI_SYSICONINDEX, causing the function to return the handle to the system image list that contains small icon images. The SHGFI_ICON and/or SHGFI_SYSICONINDEX flag must also be set.
            </summary>
        </member>
        <member name="F:CommonWin32.API.ShellFileFlags.SHGFI_SYSICONINDEX">
            <summary>
            Retrieve the index of a system image list icon. If successful, the index is copied to the iIcon member of psfi. The return value is a handle to the system image list. Only those images whose indices are successfully copied to iIcon are valid. Attempting to access other images in the system image list will result in undefined behavior.
            </summary>
        </member>
        <member name="F:CommonWin32.API.ShellFileFlags.SHGFI_TYPENAME">
            <summary>
            Retrieve the string that describes the file's type. The string is copied to the szTypeName member of the structure specified in psfi.
            </summary>
        </member>
        <member name="F:CommonWin32.API.ShellFileFlags.SHGFI_USEFILEATTRIBUTES">
            <summary>
            Indicates that the function should not attempt to access the file specified by pszPath. Rather, it should act as if the file specified by pszPath exists with the file attributes passed in dwFileAttributes. This flag cannot be combined with the SHGFI_ATTRIBUTES, SHGFI_EXETYPE, or SHGFI_PIDL flags.
            </summary>
        </member>
        <member name="T:CommonWin32.API.SystemMetric">
            <summary>
            Codes for getting system metric values.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXSCREEN">
            <summary>
            The width of the screen of the primary display monitor, in pixels. This is the same value obtained by calling GetDeviceCaps as follows: GetDeviceCaps( hdcPrimaryMonitor, HORZRES).
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYSCREEN">
            <summary>
            The height of the screen of the primary display monitor, in pixels. This is the same value obtained by calling GetDeviceCaps as follows: GetDeviceCaps( hdcPrimaryMonitor, VERTRES).
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXVSCROLL">
            <summary>
            The width of a vertical scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYHSCROLL">
            <summary>
            The height of a horizontal scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYCAPTION">
            <summary>
            The height of a caption area, in pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXBORDER">
            <summary>
            The width of a window border, in pixels. This is equivalent to the SM_CXEDGE value for windows with the 3-D look.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYBORDER">
            <summary>
            The height of a window border, in pixels. This is equivalent to the SM_CYEDGE value for windows with the 3-D look.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXDLGFRAME">
            <summary>
            This value is the same as SM_CXFIXEDFRAME.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYDLGFRAME">
            <summary>
            This value is the same as SM_CYFIXEDFRAME.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYVTHUMB">
            <summary>
            The height of the thumb box in a vertical scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXHTHUMB">
            <summary>
            The width of the thumb box in a horizontal scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXICON">
            <summary>
            The default width of an icon, in pixels. The LoadIcon function can load only icons with the dimensions that SM_CXICON and SM_CYICON specifies.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYICON">
            <summary>
            The default height of an icon, in pixels. The LoadIcon function can load only icons with the dimensions SM_CXICON and SM_CYICON.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXCURSOR">
            <summary>
            The width of a cursor, in pixels. The system cannot create cursors of other sizes.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYCURSOR">
            <summary>
            The height of a cursor, in pixels. The system cannot create cursors of other sizes.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYMENU">
            <summary>
            The height of a single-line menu bar, in pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXFULLSCREEN">
            <summary>
            The width of the client area for a full-screen window on the primary display monitor, in pixels. To get the coordinates of the portion of the screen that is not obscured by the system taskbar or by application desktop toolbars, call the SystemParametersInfo function with the SPI_GETWORKAREA value.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYFULLSCREEN">
            <summary>
            The height of the client area for a full-screen window on the primary display monitor, in pixels. To get the coordinates of the portion of the screen not obscured by the system taskbar or by application desktop toolbars, call the SystemParametersInfo function with the SPI_GETWORKAREA value.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYKANJIWINDOW">
            <summary>
            For double byte character set versions of the system, this is the height of the Kanji window at the bottom of the screen, in pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_MOUSEPRESENT">
            <summary>
            Nonzero if a mouse is installed; otherwise, 0. This value is rarely zero, because of support for virtual mice and because some systems detect the presence of the port instead of the presence of a mouse.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYVSCROLL">
            <summary>
            The height of the arrow bitmap on a vertical scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXHSCROLL">
            <summary>
            The width of the arrow bitmap on a horizontal scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_DEBUG">
            <summary>
            Nonzero if the debug version of User.exe is installed; otherwise, 0.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_SWAPBUTTON">
            <summary>
            Nonzero if the meanings of the left and right mouse buttons are swapped; otherwise, 0.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXMIN">
            <summary>
            The minimum width of a window, in pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYMIN">
            <summary>
            The minimum height of a window, in pixels
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXSIZE">
            <summary>
            The width of a button in a window caption or title bar, in pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYSIZE">
            <summary>
            The height of a button in a window caption or title bar, in pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXFRAME">
            <summary>
            This value is the same as SM_CXSIZEFRAME.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYFRAME">
            <summary>
            This value is the same as SM_CYSIZEFRAME.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXMINTRACK">
            <summary>
            The minimum tracking width of a window, in pixels. The user cannot drag the window frame to a size smaller than these dimensions. A window can override this value by processing the WM_GETMINMAXINFO message.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYMINTRACK">
            <summary>
            The minimum tracking height of a window, in pixels. The user cannot drag the window frame to a size smaller than these dimensions. A window can override this value by processing the WM_GETMINMAXINFO message.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXDOUBLECLK">
            <summary>
            The width of the rectangle around the location of a first click in a double-click sequence, in pixels. The second click must occur within the rectangle that is defined by SM_CXDOUBLECLK and SM_CYDOUBLECLK for the system to consider the two clicks a double-click. The two clicks must also occur within a specified time.
            To set the width of the double-click rectangle, call SystemParametersInfo with SPI_SETDOUBLECLKWIDTH.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYDOUBLECLK">
            <summary>
            The height of the rectangle around the location of a first click in a double-click sequence, in pixels. The second click must occur within the rectangle defined by SM_CXDOUBLECLK and SM_CYDOUBLECLK for the system to consider the two clicks a double-click. The two clicks must also occur within a specified time.
            To set the height of the double-click rectangle, call SystemParametersInfo with SPI_SETDOUBLECLKHEIGHT.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXICONSPACING">
            <summary>
            The width of a grid cell for items in large icon view, in pixels. Each item fits into a rectangle of size SM_CXICONSPACING by SM_CYICONSPACING when arranged. This value is always greater than or equal to SM_CXICON.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYICONSPACING">
            <summary>
            The height of a grid cell for items in large icon view, in pixels. Each item fits into a rectangle of size SM_CXICONSPACING by SM_CYICONSPACING when arranged. This value is always greater than or equal to SM_CYICON.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_MENUDROPALIGNMENT">
            <summary>
            Nonzero if drop-down menus are right-aligned with the corresponding menu-bar item; 0 if the menus are left-aligned.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_PENWINDOWS">
            <summary>
            Nonzero if the Microsoft Windows for Pen computing extensions are installed; zero otherwise.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_DBCSENABLED">
            <summary>
            Nonzero if User32.dll supports DBCS; otherwise, 0.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CMOUSEBUTTONS">
            <summary>
            The number of buttons on a mouse, or zero if no mouse is installed.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXFIXEDFRAME">
            <summary>
            The thickness of the frame around the perimeter of a window that has a caption but is not sizable, in pixels. SM_CXFIXEDFRAME is the height of the horizontal border, and SM_CYFIXEDFRAME is the width of the vertical border.
            This value is the same as SM_CXDLGFRAME.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYFIXEDFRAME">
            <summary>
            The thickness of the frame around the perimeter of a window that has a caption but is not sizable, in pixels. SM_CXFIXEDFRAME is the height of the horizontal border, and SM_CYFIXEDFRAME is the width of the vertical border.
            This value is the same as SM_CYDLGFRAME.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXSIZEFRAME">
            <summary>
            The thickness of the sizing border around the perimeter of a window that can be resized, in pixels. SM_CXSIZEFRAME is the width of the horizontal border, and SM_CYSIZEFRAME is the height of the vertical border.
            This value is the same as SM_CXFRAME.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYSIZEFRAME">
            <summary>
            The thickness of the sizing border around the perimeter of a window that can be resized, in pixels. SM_CXSIZEFRAME is the width of the horizontal border, and SM_CYSIZEFRAME is the height of the vertical border.
            This value is the same as SM_CYFRAME.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_SECURE">
            <summary>
            This system metric should be ignored; it always returns 0.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXEDGE">
            <summary>
            The width of a 3-D border, in pixels. This metric is the 3-D counterpart of SM_CXBORDER.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYEDGE">
            <summary>
            The height of a 3-D border, in pixels. This is the 3-D counterpart of SM_CYBORDER.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXMINSPACING">
            <summary>
            The width of a grid cell for a minimized window, in pixels. Each minimized window fits into a rectangle this size when arranged. This value is always greater than or equal to SM_CXMINIMIZED.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYMINSPACING">
            <summary>
            The height of a grid cell for a minimized window, in pixels. Each minimized window fits into a rectangle this size when arranged. This value is always greater than or equal to SM_CYMINIMIZED.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXSMICON">
            <summary>
            The recommended width of a small icon, in pixels. Small icons typically appear in window captions and in small icon view.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYSMICON">
            <summary>
            The recommended height of a small icon, in pixels. Small icons typically appear in window captions and in small icon view.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYSMCAPTION">
            <summary>
            The height of a small caption, in pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXSMSIZE">
            <summary>
            The width of small caption buttons, in pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYSMSIZE">
            <summary>
            The height of small caption buttons, in pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXMENUSIZE">
            <summary>
            The width of menu bar buttons, such as the child window close button that is used in the multiple document interface, in pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYMENUSIZE">
            <summary>
            The height of menu bar buttons, such as the child window close button that is used in the multiple document interface, in pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_ARRANGE">
            <summary>
            The flags that specify how the system arranged minimized windows.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXMINIMIZED">
            <summary>
            The width of a minimized window, in pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYMINIMIZED">
            <summary>
            The height of a minimized window, in pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXMAXTRACK">
            <summary>
            The default maximum width of a window that has a caption and sizing borders, in pixels. This metric refers to the entire desktop. The user cannot drag the window frame to a size larger than these dimensions. A window can override this value by processing the WM_GETMINMAXINFO message.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYMAXTRACK">
            <summary>
            The default maximum height of a window that has a caption and sizing borders, in pixels. This metric refers to the entire desktop. The user cannot drag the window frame to a size larger than these dimensions. A window can override this value by processing the WM_GETMINMAXINFO message.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXMAXIMIZED">
            <summary>
            The default width, in pixels, of a maximized top-level window on the primary display monitor.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYMAXIMIZED">
            <summary>
            The default height, in pixels, of a maximized top-level window on the primary display monitor.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_NETWORK">
            <summary>
            The least significant bit is set if a network is present; otherwise, it is cleared. The other bits are reserved for future use.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CLEANBOOT">
            <summary>
            The value that specifies how the system is started
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXDRAG">
            <summary>
            The number of pixels on either side of a mouse-down point that the mouse pointer can move before a drag operation begins. This allows the user to click and release the mouse button easily without unintentionally starting a drag operation. If this value is negative, it is subtracted from the left of the mouse-down point and added to the right of it.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYDRAG">
            <summary>
            The number of pixels above and below a mouse-down point that the mouse pointer can move before a drag operation begins. This allows the user to click and release the mouse button easily without unintentionally starting a drag operation. If this value is negative, it is subtracted from above the mouse-down point and added below it.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_SHOWSOUNDS">
            <summary>
            Nonzero if the user requires an application to present information visually in situations where it would otherwise present the information only in audible form; otherwise, 0.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXMENUCHECK">
            <summary>
            The width of the default menu check-mark bitmap, in pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYMENUCHECK">
            <summary>
            The height of the default menu check-mark bitmap, in pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_SLOWMACHINE">
            <summary>
            Nonzero if the computer has a low-end (slow) processor; otherwise, 0.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_MIDEASTENABLED">
            <summary>
            Nonzero if the system is enabled for Hebrew and Arabic languages, 0 if not.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_MOUSEWHEELPRESENT">
            <summary>
            Nonzero if a mouse with a vertical scroll wheel is installed; otherwise 0.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_XVIRTUALSCREEN">
            <summary>
            The coordinates for the left side of the virtual screen. The virtual screen is the bounding rectangle of all display monitors. The SM_CXVIRTUALSCREEN metric is the width of the virtual screen.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_YVIRTUALSCREEN">
            <summary>
            The coordinates for the top of the virtual screen. The virtual screen is the bounding rectangle of all display monitors. The SM_CYVIRTUALSCREEN metric is the height of the virtual screen.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXVIRTUALSCREEN">
            <summary>
            The width of the virtual screen, in pixels. The virtual screen is the bounding rectangle of all display monitors. The SM_XVIRTUALSCREEN metric is the coordinates for the left side of the virtual screen.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYVIRTUALSCREEN">
            <summary>
            The height of the virtual screen, in pixels. The virtual screen is the bounding rectangle of all display monitors. The SM_YVIRTUALSCREEN metric is the coordinates for the top of the virtual screen.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CMONITORS">
            <summary>
            The number of display monitors on a desktop. For more information, see the Remarks section in this topic.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_SAMEDISPLAYFORMAT">
            <summary>
            Nonzero if all the display monitors have the same color format, otherwise, 0. Two displays can have the same bit depth, but different color formats. For example, the red, green, and blue pixels can be encoded with different numbers of bits, or those bits can be located in different places in a pixel color value.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_IMMENABLED">
            <summary>
            Nonzero if Input Method Manager/Input Method Editor features are enabled; otherwise, 0.
            SM_IMMENABLED indicates whether the system is ready to use a Unicode-based IME on a Unicode application. 
            To ensure that a language-dependent IME works, check SM_DBCSENABLED and the system ANSI code page. 
            Otherwise the ANSI-to-Unicode conversion may not be performed correctly, or some components like fonts or registry settings may not be present.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXFOCUSBORDER">
            <summary>
            The width of the left and right edges of the focus rectangle that the DrawFocusRect draws. This value is in pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CYFOCUSBORDER">
            <summary>
            The height of the top and bottom edges of the focus rectangle drawn by DrawFocusRect. This value is in pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_TABLETPC">
            <summary>
            Nonzero if the current operating system is the Windows XP Tablet PC edition or if the current operating system is Windows Vista or Windows 7 and the Tablet PC Input service is started; otherwise, 0. The SM_DIGITIZER setting indicates the type of digitizer input supported by a device running Windows 7 or Windows Server 2008 R2. For more information, see Remarks.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_MEDIACENTER">
            <summary>
            Nonzero if the current operating system is the Windows XP, Media Center Edition, 0 if not.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_STARTER">
            <summary>
            Nonzero if the current operating system is Windows 7 Starter Edition, Windows Vista Starter, or Windows XP Starter Edition; otherwise, 0.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_SERVERR2">
            <summary>
            The build number if the system is Windows Server 2003 R2; otherwise, 0.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_MOUSEHORIZONTALWHEELPRESENT">
            <summary>
            Nonzero if a mouse with a horizontal scroll wheel is installed; otherwise 0.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_CXPADDEDBORDER">
            <summary>
            The amount of border padding for captioned windows, in pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_DIGITIZER">
            <summary>
            Nonzero if the current operating system is Windows 7 or Windows Server 2008 R2 and the Tablet PC Input service is started; otherwise, 0. The return value is a bitmask that specifies the type of digitizer input supported by the device.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_MAXIMUMTOUCHES">
            <summary>
            Nonzero if there are digitizers in the system; otherwise, 0.
            SM_MAXIMUMTOUCHES returns the aggregate maximum of the maximum number of contacts supported by every digitizer in the system. If the system has only single-touch digitizers, the return value is 1. If the system has multi-touch digitizers, the return value is the number of simultaneous contacts the hardware can provide.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_REMOTESESSION">
            <summary>
            This system metric is used in a Terminal Services environment. If the calling process is associated with a Terminal Services client session, the return value is nonzero. If the calling process is associated with the Terminal Services console session, the return value is 0.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_SHUTTINGDOWN">
            <summary>
            Nonzero if the current session is shutting down; otherwise, 0.
            </summary>
        </member>
        <member name="F:CommonWin32.API.SystemMetric.SM_REMOTECONTROL">
            <summary>
            This system metric is used in a Terminal Services environment to determine if the current Terminal Server session is being remotely controlled. Its value is nonzero if the current session is remotely controlled; otherwise, 0.
            </summary>
        </member>
        <member name="T:CommonWin32.API.User32">
            <summary>
            API methods in user32.dll.
            </summary>
        </member>
        <member name="M:CommonWin32.API.User32.GetWindowLong(System.IntPtr,CommonWin32.WindowClasses.WindowLong)">
            <summary>
            Retrieves information about the specified window. 
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">Index of the value.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.API.User32.SetWindowLong(System.IntPtr,CommonWin32.WindowClasses.WindowLong,System.IntPtr)">
            <summary>
            Changes an attribute of the specified window. The function also sets a value at the specified offset in the extra window memory.
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be set.</param>
            <param name="dwNewLong">The replacement value.</param>
            <returns>If the function succeeds, the return value is the previous value of the specified offset.
            If the function fails, the return value is zero. </returns>
        </member>
        <member name="M:CommonWin32.API.User32.GetClassLong(System.IntPtr,CommonWin32.WindowClasses.ClassLong)">
            <summary>
            Retrieves the specified value from the WNDCLASSEX structure associated with the specified window.
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">Index of the value.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.API.User32.SetClassLong(System.IntPtr,CommonWin32.WindowClasses.ClassLong,System.IntPtr)">
            <summary>
            Replaces the specified value at the specified offset in the extra class memory or the WNDCLASSEX structure for the class to which the specified window belongs.
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be set.</param>
            <param name="dwNewLong">The replacement value.</param>
            <returns>If the function succeeds, the return value is the previous value of the specified offset. If this was not previously set, the return value is zero.</returns>
        </member>
        <member name="M:CommonWin32.API.User32.SetForegroundWindow(System.IntPtr)">
            <summary>
            Brings the thread that created the specified window into the foreground and activates the window. Keyboard input is directed to the window, and various visual cues are changed for the user. The system assigns a slightly higher priority to the thread that created the foreground window than it does to other threads.
            </summary>
            <param name="hWnd">A handle to the window that should be activated and brought to the foreground.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.API.User32.SetParent(System.IntPtr,System.IntPtr)">
            <summary>
            Changes the parent window of the specified child window.
            </summary>
            <param name="hWndChild">A handle to the child window.</param>
            <param name="hWndNewParent">A handle to the new parent window. If this parameter is NULL, the desktop window becomes the new parent window.</param>
            <returns>If the function succeeds, the return value is a handle to the previous parent window.</returns>
        </member>
        <member name="M:CommonWin32.API.User32.DestroyIcon(System.IntPtr)">
            <summary>
            Destroys an icon and frees any memory the icon occupied.
            </summary>
            <param name="hIcon">A handle to the icon to be destroyed. The icon must not be in use.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.API.User32.PostMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.
            </summary>
            <param name="hWnd">A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</param>
            <param name="msg">The message to be sent.</param>
            <param name="wParam">Additional message-specific information.</param>
            <param name="lParam">Additional message-specific information.</param>
        </member>
        <member name="M:CommonWin32.API.User32.SendMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Sends the specified message to a window or windows. 
            </summary>
            <param name="hWnd">A handle to the window whose window procedure will receive the message. </param>
            <param name="msg">The message to be sent.</param>
            <param name="wParam">Additional message-specific information.</param>
            <param name="lParam">Additional message-specific information.</param>
            <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
        </member>
        <member name="M:CommonWin32.API.User32.DefWindowProc(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Calls the default window procedure to provide default processing for any window messages that an application does not process. This function ensures that every message is processed. DefWindowProc is called with the same parameters received by the window procedure.
            </summary>
            <param name="hWnd">A handle to the window procedure that received the message.</param>
            <param name="msg">The message.</param>
            <param name="wParam">Additional message information. The content of this parameter depends on the value of the Msg parameter.</param>
            <param name="lParam">Additional message information. The content of this parameter depends on the value of the Msg parameter.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.API.User32.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,CommonWin32.Windows.SetWindowPosOptions)">
            <summary>
            Changes the size, position, and Z order of a child, pop-up, or top-level window. These windows are ordered according to their appearance on the screen. The topmost window receives the highest rank and is the first window in the Z order.
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="hWndInsertAfter">A handle to the window to precede the positioned window in the Z order. This parameter must be a window handle or one of the HWndValues.</param>
            <param name="x">The new position of the left side of the window, in client coordinates.</param>
            <param name="y">The new position of the top of the window, in client coordinates.</param>
            <param name="cx">The new width of the window, in pixels.</param>
            <param name="cy">The new height of the window, in pixels.</param>
            <param name="flags">The window sizing and positioning flags.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.API.User32.GetSystemMetrics(CommonWin32.API.SystemMetric)">
            <summary>
            Retrieves the specified system metric or system configuration setting.
            </summary>
            <param name="metric">The metric.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.API.User32.MonitorFromWindow(System.IntPtr,CommonWin32.API.MonitorOption)">
            <summary>
            Retrieves a handle to the display monitor that has the largest area of intersection with the bounding rectangle of a specified window.
            </summary>
            <param name="handle">A handle to the window of interest.</param>
            <param name="option">Determines the function's return value if the window does not intersect any display monitor.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.API.User32.MonitorFromRect(CommonWin32.Rectangles.RECT@,CommonWin32.API.MonitorOption)">
            <summary>
            Retrieves a handle to the display monitor that has the largest area of intersection with a specified rectangle.
            </summary>
            <param name="rect">RECT structure that specifies the rectangle of interest in virtual-screen coordinates.</param>
            <param name="option">Determines the function's return value if the rectangle does not intersect any display monitor.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.API.User32.GetMonitorInfo(System.IntPtr,CommonWin32.Monitors.MONITORINFO@)">
            <summary>
            Retrieves information about a display monitor.
            </summary>
            <param name="hMonitor">A handle to the display monitor of interest.</param>
            <param name="info">A MONITORINFO or MONITORINFOEX structure that receives information about the specified display monitor.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.API.User32.FindWindow(System.String,System.String)">
            <summary>
            Retrieves a handle to the top-level window whose class name and window name match the specified strings. This function does not search child windows. This function does not perform a case-sensitive search.
            To search child windows, beginning with a specified child window, use the FindWindowEx function.
            </summary>
            <param name="lpClassName">Name of the lp class.</param>
            <param name="lpWindowName">Name of the lp window.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.API.User32.SetWindowRgn(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            The SetWindowRgn function sets the window region of a window. The window region determines the area within the window where the system permits drawing. The system does not display any portion of a window that lies outside of the window region
            </summary>
            <param name="hWnd">A handle to the window whose window region is to be set.</param>
            <param name="hRgn">A handle to a region. The function sets the window region of the window to this region.</param>
            <param name="bRedraw">Specifies whether the system redraws the window after setting the window region. If bRedraw is TRUE, the system does so; otherwise, it does not. Typically, you set bRedraw to TRUE if the window is visible.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.API.User32.GetWindowPlacement(System.IntPtr,CommonWin32.Windows.WINDOWPLACEMENT@)">
            <summary>
            Retrieves the show state and the restored, minimized, and maximized positions of the specified window.
            </summary>
            <param name="hwnd">A handle to the window.</param>
            <param name="placement">The WINDOWPLACEMENT structure that receives the show state and position information. Before calling GetWindowPlacement, set the length member to sizeof(WINDOWPLACEMENT).</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.API.User32.IsWindowVisible(System.IntPtr)">
            <summary>
            Determines the visibility state of the specified window.
            </summary>
            <param name="hWnd">A handle to the window to be tested.</param>
            <returns>
            </returns>
        </member>
        <member name="M:CommonWin32.API.User32.GetWindowRect(System.IntPtr,CommonWin32.Rectangles.RECT@)">
            <summary>
            Retrieves the dimensions of the bounding rectangle of the specified window. The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen.
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="rect">RECT structure that receives the screen coordinates of the upper-left and lower-right corners of the window.</param>
            <returns></returns>
        </member>
        <member name="T:CommonWin32.FileManagement.FileAttributes">
            <summary>
            File attributes are metadata values stored by the file system on disk and are used by the system and are available to developers via various file I/O APIs.
            </summary>
        </member>
        <member name="F:CommonWin32.FileManagement.FileAttributes.FILE_ATTRIBUTE_ARCHIVE">
            <summary>
            A file or directory that is an archive file or directory. Applications typically use this attribute to mark files for backup or removal . 
            </summary>
        </member>
        <member name="F:CommonWin32.FileManagement.FileAttributes.FILE_ATTRIBUTE_COMPRESSED">
            <summary>
            A file or directory that is compressed. For a file, all of the data in the file is compressed. For a directory, compression is the default for newly created files and subdirectories.
            </summary>
        </member>
        <member name="F:CommonWin32.FileManagement.FileAttributes.FILE_ATTRIBUTE_DEVICE">
            <summary>
            This value is reserved for system use.
            </summary>
        </member>
        <member name="F:CommonWin32.FileManagement.FileAttributes.FILE_ATTRIBUTE_DIRECTORY">
            <summary>
            The handle that identifies a directory.
            </summary>
        </member>
        <member name="F:CommonWin32.FileManagement.FileAttributes.FILE_ATTRIBUTE_ENCRYPTED">
            <summary>
            A file or directory that is encrypted. For a file, all data streams in the file are encrypted. For a directory, encryption is the default for newly created files and subdirectories.
            </summary>
        </member>
        <member name="F:CommonWin32.FileManagement.FileAttributes.FILE_ATTRIBUTE_HIDDEN">
            <summary>
            The file or directory is hidden. It is not included in an ordinary directory listing.
            </summary>
        </member>
        <member name="F:CommonWin32.FileManagement.FileAttributes.FILE_ATTRIBUTE_INTEGRITY_STREAM">
            <summary>
            The directory or user data stream is configured with integrity=only supported on ReFS volumes,. It is not included in an ordinary directory listing. The integrity setting persists with the file if it's renamed. If a file is copied the destination file will have integrity set if either the source file or destination directory have integrity set.
            Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP:  This flag is not supported until Windows Server 2012.
            </summary>
        </member>
        <member name="F:CommonWin32.FileManagement.FileAttributes.FILE_ATTRIBUTE_NORMAL">
            <summary>
            A file that does not have other attributes set. This attribute is valid only when used alone.
            </summary>
        </member>
        <member name="F:CommonWin32.FileManagement.FileAttributes.FILE_ATTRIBUTE_NOT_CONTENT_INDEXED">
            <summary>
            The file or directory is not to be indexed by the content indexing service.
            </summary>
        </member>
        <member name="F:CommonWin32.FileManagement.FileAttributes.FILE_ATTRIBUTE_NO_SCRUB_DATA">
            <summary>
            The user data stream not to be read by the background data integrity scanner=AKA scrubber,. When set on a directory it only provides inheritance. This flag is only supported on Storage Spaces and ReFS volumes. It is not included in an ordinary directory listing.
            Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP:  This flag is not supported until Windows 8 and Windows Server 2012.
            </summary>
        </member>
        <member name="F:CommonWin32.FileManagement.FileAttributes.FILE_ATTRIBUTE_OFFLINE">
            <summary>
            The data of a file is not available immediately. This attribute indicates that the file data is physically moved to offline storage. This attribute is used by Remote Storage, which is the hierarchical storage management software. Applications should not arbitrarily change this attribute.
            </summary>
        </member>
        <member name="F:CommonWin32.FileManagement.FileAttributes.FILE_ATTRIBUTE_READONLY">
            <summary>
            A file that is read-only. Applications can read the file, but cannot write to it or delete it. This attribute is not honored on directories. For more information, see You cannot view or change the Read-only or the System attributes of folders in Windows Server 2003, in Windows XP, in Windows Vista or in Windows 7.
            </summary>
        </member>
        <member name="F:CommonWin32.FileManagement.FileAttributes.FILE_ATTRIBUTE_REPARSE_POINT">
            <summary>
            A file or directory that has an associated reparse point, or a file that is a symbolic link.
            </summary>
        </member>
        <member name="F:CommonWin32.FileManagement.FileAttributes.FILE_ATTRIBUTE_SPARSE_FILE">
            <summary>
            A file that is a sparse file.
            </summary>
        </member>
        <member name="F:CommonWin32.FileManagement.FileAttributes.FILE_ATTRIBUTE_SYSTEM">
            <summary>
            A file or directory that the operating system uses a part of, or uses exclusively.
            </summary>
        </member>
        <member name="F:CommonWin32.FileManagement.FileAttributes.FILE_ATTRIBUTE_TEMPORARY">
            <summary>
            A file that is being used for temporary storage. File systems avoid writing data back to mass storage if sufficient cache memory is available, because typically, an application deletes a temporary file after the handle is closed. In that scenario, the system can entirely avoid writing the data. Otherwise, the data is written after the handle is closed.
            </summary>
        </member>
        <member name="F:CommonWin32.FileManagement.FileAttributes.FILE_ATTRIBUTE_VIRTUAL">
            <summary>
            This value is reserved for system use.
            </summary>
        </member>
        <member name="T:CommonWin32.Authentication.CREDENTIAL">
            <summary>
            The CREDENTIAL structure contains an individual credential.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CREDENTIAL.Flags">
            <summary>
            A bit member that identifies characteristics of the credential. Undefined bits should be initialized as zero and not otherwise altered to permit future enhancement.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CREDENTIAL.Type">
            <summary>
            The type of the credential. This member cannot be changed after the credential is created.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CREDENTIAL.TargetName">
            <summary>
            The name of the credential. The TargetName and Type members uniquely identify the credential. This member cannot be changed after the credential is created. Instead, the credential with the old name should be deleted and the credential with the new name created.
            This member cannot be longer than CRED_MAX_GENERIC_TARGET_NAME_LENGTH characters.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CREDENTIAL.Comment">
            <summary>
            A string comment from the user that describes this credential. This member cannot be longer than CRED_MAX_STRING_LENGTH.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CREDENTIAL.LastWritten">
            <summary>
            The time, in Coordinated Universal Time (Greenwich Mean Time), of the last modification of the credential. For write operations, the value of this member is ignored.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CREDENTIAL.CredentialBlobSize">
            <summary>
            The size, in bytes, of the CredentialBlob member. This member cannot be larger than CRED_MAX_CREDENTIAL_BLOB_SIZE bytes.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CREDENTIAL.CredentialBlob">
            <summary>
            Secret data for the credential. The CredentialBlob member can be both read and written.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CREDENTIAL.Persist">
            <summary>
            Defines the persistence of this credential. This member can be read and written.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CREDENTIAL.AttributeCount">
            <summary>
            The number of application-defined attributes to be associated with the credential. This member can be read and written. Its value cannot be greater than CRED_MAX_ATTRIBUTES.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CREDENTIAL.Attributes">
            <summary>
            Application-defined attributes that are associated with the credential. This member can be read and written.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CREDENTIAL.TargetAlias">
            <summary>
            Alias for the TargetName member. This member can be read and written. It cannot be longer than CRED_MAX_STRING_LENGTH characters.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CREDENTIAL.UserName">
            <summary>
            The user name of the account used to connect to TargetName.
            This member cannot be longer than CRED_MAX_USERNAME_LENGTH characters.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CREDENTIAL.CRED_MAX_CREDENTIAL_BLOB_SIZE">
            <summary>
            Maximum size of the CredBlob field (in bytes)
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CREDENTIAL.CRED_MAX_GENERIC_TARGET_NAME_LENGTH">
            <summary>
            Maximum length of the TargetName field for CRED_TYPE_GENERIC (in characters)
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CREDENTIAL.CRED_MAX_STRING_LENGTH">
            <summary>
            Maximum length of the various credential string fields (in characters)
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CREDENTIAL.CRED_MAX_USERNAME_LENGTH">
            <summary>
            Maximum length of the UserName field.  The worst case is User@DnsDomain
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CREDENTIAL.CRED_MAX_DOMAIN_TARGET_NAME_LENGTH">
            <summary>
            Maximum length of the TargetName field for CRED_TYPE_DOMAIN_* (in characters).
            Largest one is DfsRoot\DfsShare.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CREDENTIAL.CRED_MAX_TARGETNAME_NAMESPACE_LENGTH">
            <summary>
            Maximum length of a target namespace.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CREDENTIAL.CRED_MAX_TARGETNAME_ATTRIBUTE_LENGTH">
            <summary>
            Maximum length of a target attribute.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CREDENTIAL.CRED_MAX_VALUE_SIZE">
            <summary>
            Maximum size of the Credential Attribute Value field (in bytes).
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CREDENTIAL.CRED_MAX_ATTRIBUTES">
            <summary>
            Maximum number of attributes per credential.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CredentialFlags.CRED_FLAGS_PROMPT_NOW">
            <summary>
            Bit set if the credential does not persist the CredentialBlob and the credential has not been written during this logon session. This bit is ignored on input and is set automatically when queried.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CredentialFlags.CRED_FLAGS_USERNAME_TARGET">
            <summary>
            Bit is set if this credential has a TargetName member set to the same value as the UserName member. Such a credential is one designed to store the CredentialBlob for a specific user. 
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CredentialFlags.CRED_FLAGS_WILDCARD_MATCH">
            <summary>
            Valid only for return and only with CredReadDomainCredentials().
            Indicates credential was returned due to wildcard match
            of targetname with credential.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CredentialFlags.CRED_FLAGS_VALID_FLAGS">
            <summary>
            Mask of all valid flags
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CredentialFlags.CRED_FLAGS_VALID_INPUT_FLAGS">
            <summary>
            Bit mask for only those flags which can be passed to the credman APIs.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CredentialType.CRED_TYPE_GENERIC">
            <summary>
            The credential is a generic credential. The credential will not be used by any particular authentication package. The credential will be stored securely but has no other significant characteristics.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CredentialType.CRED_TYPE_DOMAIN_PASSWORD">
            <summary>
            The credential is a password credential and is specific to Microsoft's authentication packages. The NTLM, Kerberos, and Negotiate authentication packages will automatically use this credential when connecting to the named target.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CredentialType.CRED_TYPE_DOMAIN_CERTIFICATE">
            <summary>
            The credential is a certificate credential and is specific to Microsoft's authentication packages. The Kerberos, Negotiate, and Schannel authentication packages automatically use this credential when connecting to the named target.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CredentialType.CRED_TYPE_DOMAIN_VISIBLE_PASSWORD">
            <summary>
            This value is no longer supported.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CredentialType.CRED_TYPE_GENERIC_CERTIFICATE">
            <summary>
            The credential is a certificate credential that is a generic authentication package.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CredentialType.CRED_TYPE_DOMAIN_EXTENDED">
            <summary>
            The credential is supported by extended Negotiate packages.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CredentialType.CRED_TYPE_MAXIMUM">
            <summary>
            The maximum number of supported credential types.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.CredentialType.CRED_TYPE_MAXIMUM_EX">
            <summary>
            The extended maximum number of supported credential types that now allow new applications to run on older operating systems.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.PersistType.CRED_PERSIST_SESSION">
            <summary>
            The credential persists for the life of the logon session. It will not be visible to other logon sessions of this same user. It will not exist after this user logs off and back on.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.PersistType.CRED_PERSIST_LOCAL_MACHINE">
            <summary>
            The credential persists for all subsequent logon sessions on this same computer. It is visible to other logon sessions of this same user on this same computer and not visible to logon sessions for this user on other computers.
            </summary>
        </member>
        <member name="F:CommonWin32.Authentication.PersistType.CRED_PERSIST_ENTERPRISE">
            <summary>
            The credential persists for all subsequent logon sessions on this same computer. It is visible to other logon sessions of this same user on this same computer and to logon sessions for this user on other computers.
            This option can be implemented as locally persisted credential if the administrator or user configures the user account to not have roam-able state. For instance, if the user has no roaming profile, the credential will only persist locally.
            </summary>
        </member>
        <member name="T:CommonWin32.BasicValues">
            <summary>
            Contains basic win32 values.
            </summary>
        </member>
        <member name="F:CommonWin32.BasicValues.TRUE">
            <summary>
            Represents the TRUE value as <see cref="T:System.IntPtr"/>.
            </summary>
        </member>
        <member name="F:CommonWin32.BasicValues.FALSE">
            <summary>
            Represents the FALSE value as <see cref="T:System.IntPtr"/>.
            </summary>
        </member>
        <member name="F:CommonWin32.BasicValues.MAX_PATH">
            <summary>
            The max file path length.
            </summary>
        </member>
        <member name="T:CommonWin32.Bitmaps.BITMAPINFO">
            <summary>
            Defines the dimensions and color information for a DIB.
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.BITMAPINFO.bmiHeader">
            <summary>
            Structure that contains information about the dimensions of color format.
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.BITMAPINFO.bmiColors">
            <summary>
            This contains one of the following:
            1. An array of RGBQUAD. The elements of the array that make up the color table.
            2. An array of 16-bit unsigned integers that specifies indexes into the currently realized logical palette. This use of bmiColors is allowed for functions that use DIBs.
            The number of entries in the array depends on the values of the biBitCount and biClrUsed members of the BITMAPINFOHEADER structure.
            </summary>
        </member>
        <member name="T:CommonWin32.Bitmaps.BITMAPINFOHEADER">
            <summary>
            Structure that contains information about the dimensions and color format of a DIB.
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.BITMAPINFOHEADER.biSize">
            <summary>
            The number of bytes required by the structure.
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.BITMAPINFOHEADER.biWidth">
            <summary>
            The width of the bitmap, in pixels.
            If Compression is JPEG or PNG, the Width member specifies the width of the decompressed 
            JPEG or PNG image file, respectively.
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.BITMAPINFOHEADER.biHeight">
            <summary>
            The height of the bitmap, in pixels. If Height is positive, 
            the bitmap is a bottom-up DIB and its origin is the lower-left corner. 
            If Height is negative, the bitmap is a top-down DIB and its origin is the upper-left corner.
            If Height is negative, indicating a top-down DIB, Compression must be either RGB or BITFIELDS. Top-down DIBs cannot be compressed.
            If Compression is JPEG or PNG, the Height member specifies the height of the decompressed JPEG or PNG image file, respectively.
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.BITMAPINFOHEADER.biPlanes">
            <summary>
            The number of planes for the target device. This value must be set to 1.
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.BITMAPINFOHEADER.biBitCount">
            <summary>
            The number of bits-per-pixel. The BitCount member 
            determines the number of bits that define each pixel and the maximum number of colors in the bitmap. 
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.BITMAPINFOHEADER.biCompression">
            <summary>
            The type of compression for a compressed bottom-up bitmap (top-down DIBs cannot be compressed).
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.BITMAPINFOHEADER.biSizeImage">
            <summary>
            The size, in bytes, of the image. This may be set to zero for RGB bitmaps.
            If Compression is JPEG or PNG, SizeImage indicates the size of the JPEG or PNG image buffer, respectively.
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.BITMAPINFOHEADER.biXPelsPerMeter">
            <summary>
            The horizontal resolution, in pixels-per-meter, of the target device for the bitmap. 
            An application can use this value to select a bitmap from a resource group that 
            best matches the characteristics of the current device.
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.BITMAPINFOHEADER.biYPelsPerMeter">
            <summary>
            The vertical resolution, in pixels-per-meter, of the target device for the bitmap.
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.BITMAPINFOHEADER.biClrUsed">
            <summary>
            The number of color indexes in the color table that are actually used by the bitmap. 
            If this value is zero, the bitmap uses the maximum number of colors corresponding to 
            the value of the BitCount member for the compression mode specified by Compression.
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.BITMAPINFOHEADER.biClrImportant">
            <summary>
            The number of color indexes that are required for displaying the bitmap. 
            If this value is zero, all colors are required.
            </summary>
        </member>
        <member name="M:CommonWin32.Bitmaps.BITMAPINFOHEADER.GetXDpi">
            <summary>
            Gets the horizontal dpi of the bitmap.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.Bitmaps.BITMAPINFOHEADER.GetYDpi">
            <summary>
            Gets the vertical dpi of the bitmap.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.Bitmaps.BITMAPINFOHEADER.GetByteSize">
            <summary>
            Gets the size of the structure.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.Bitmaps.BITMAPINFOHEADER.Validate">
            <summary>
            Checks to see if this structure contain valid data.
            It also fills in any missing pieces if possible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.Bitmaps.BITMAPINFOHEADER.GetScan0(System.IntPtr)">
            <summary>
            Gets the pointer to scan0 given the header pointer.
            </summary>
            <param name="headerPtr">The header PTR.</param>
            <returns></returns>
        </member>
        <member name="P:CommonWin32.Bitmaps.BITMAPINFOHEADER.IsBottomUpImage">
            <summary>
            Gets whether the bitmap is bottom-up or top-down format.
            </summary>
            <value>
            <c>true</c> if this instance is bottom up image; otherwise, <c>false</c>.
            </value>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.Bitmaps.BITMAPINFOHEADER.GetDrawingPixelFormat">
            <summary>
            Gets the System.Drawing pixel format of current structure.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.Bitmaps.BITMAPINFOHEADER.GetDrawingPalette(System.IntPtr)">
            <summary>
            Gets the color palette that's contained in the header.
            Note not all images will have palette, so check if the return value
            is null before using it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.Bitmaps.BITMAPINFOHEADER.GetStride">
            <summary>
            Gets the stride size of this bitmap.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.Bitmaps.BITMAPINFOHEADER.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:CommonWin32.Bitmaps.BITMAPINFOHEADER.CompressionType">
            <summary>
            Indicates the bitmap compression of <seealso cref="T:CommonWin32.Bitmaps.BITMAPINFOHEADER"/>.
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.BITMAPINFOHEADER.CompressionType.BI_RGB">
            <summary>
            An uncompressed format.
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.BITMAPINFOHEADER.CompressionType.BI_RLE8">
            <summary>
             A run-length encoded (RLE) format for bitmaps with 8 bpp. The compression format is a 2-byte format consisting of a count byte followed by a byte containing a color index. For more information, see Bitmap Compression. 
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.BITMAPINFOHEADER.CompressionType.BI_RLE4">
            <summary>
             An RLE, format for bitmaps with 4 bpp. The compression format is a 2-byte format consisting of a count byte followed by two word-length color indexes. For more information, see Bitmap Compression. 
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.BITMAPINFOHEADER.CompressionType.BI_BITFIELDS">
            <summary>
            Specifies that the bitmap is not compressed and that the color table consists of three DWORD color masks that specify the red, green, and blue components of each pixel. 
            This is valid when used with 16- and 32-bpp bitmaps. 
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.BITMAPINFOHEADER.CompressionType.BI_JPEG">
            <summary>
            Indicates that the image is a JPEG image.
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.BITMAPINFOHEADER.CompressionType.BI_PNG">
            <summary>
            Indicates that the image is a PNG image.
            </summary>
        </member>
        <member name="T:CommonWin32.Bitmaps.BLENDFUNCTION">
            <summary>
            This structure controls blending by specifying the blending functions for source and destination bitmaps.
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.BLENDFUNCTION.BlendOp">
            <summary>
            Specifies the source blend operation. Currently, the only source and destination blend operation that has been defined is AC_SRC_OVER. For details, see the following Remarks section.
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.BLENDFUNCTION.BlendFlags">
            <summary>
            Must be zero.
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.BLENDFUNCTION.SourceConstantAlpha">
            <summary>
            Specifies an alpha transparency value to be used on the entire source bitmap. 
            The SourceConstantAlpha value is combined with any per-pixel alpha values in the source bitmap. 
            If you set SourceConstantAlpha to 0, it is assumed that your image is transparent. When you only want to use per-pixel alpha values, set the SourceConstantAlpha value to 255 (opaque) .
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.BLENDFUNCTION.AlphaFormat">
            <summary>
            This member controls the way the source and destination bitmaps are interpreted.
            </summary>
        </member>
        <member name="T:CommonWin32.Bitmaps.BLENDFUNCTION.Format">
            <summary>
            Indicates the blend alpha format.
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.BLENDFUNCTION.Format.AC_SRC_OVER">
            <summary>
            The source bitmap is placed over the destination bitmap based on the alpha values of the source pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.BLENDFUNCTION.Format.AC_SRC_ALPHA">
            <summary>
            This flag is set when the bitmap has an Alpha channel (that is, per-pixel alpha).
            </summary>
        </member>
        <member name="T:CommonWin32.Bitmaps.RGBQUAD">
            <summary>
            Describes a color consisting of relative intensities of red, green, and blue.
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.RGBQUAD.rgbBlue">
            <summary>
            The intensity of blue in the color.
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.RGBQUAD.rgbGreen">
            <summary>
            The intensity of green in the color.
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.RGBQUAD.rgbRed">
            <summary>
            The intensity of red in the color.
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.RGBQUAD.rgbReserved">
            <summary>
            This member is reserved and must be zero.
            </summary>
        </member>
        <member name="T:CommonWin32.Bitmaps.SIZE">
            <summary>
            Specifies the width and height of a rectangle.
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.SIZE.cx">
            <summary>
            Specifies the rectangle's width. The units depend on which function uses this.
            </summary>
        </member>
        <member name="F:CommonWin32.Bitmaps.SIZE.cy">
            <summary>
            Specifies the rectangle's height. The units depend on which function uses this.
            </summary>
        </member>
        <member name="M:CommonWin32.Bitmaps.SIZE.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:CommonWin32.Bitmaps.SIZE.op_Implicit(System.Windows.Size)~CommonWin32.Bitmaps.SIZE">
            <summary>
            Converts to <see cref="T:CommonWin32.Bitmaps.SIZE" />.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.Bitmaps.SIZE.op_Implicit(CommonWin32.Bitmaps.SIZE)~System.Windows.Size">
            <summary>
            Converts to <see cref="T:System.Windows.Size" />.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.Bitmaps.SIZE.op_Implicit(System.Drawing.Size)~CommonWin32.Bitmaps.SIZE">
            <summary>
            Converts to <see cref="T:CommonWin32.Bitmaps.SIZE" />.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.Bitmaps.SIZE.op_Implicit(CommonWin32.Bitmaps.SIZE)~System.Drawing.Size">
            <summary>
            Converts to <see cref="T:System.Drawing.Size" />.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="T:CommonWin32.ComboBoxControl.COMBOBOXINFO">
            <summary>
            Contains combo box status information.
            </summary>
        </member>
        <member name="F:CommonWin32.ComboBoxControl.COMBOBOXINFO.cbSize">
            <summary>
            The size, in bytes, of the structure. The calling application must set this to sizeof(COMBOBOXINFO).
            </summary>
        </member>
        <member name="F:CommonWin32.ComboBoxControl.COMBOBOXINFO.rcItem">
            <summary>
            A RECT structure that specifies the coordinates of the edit box.
            </summary>
        </member>
        <member name="F:CommonWin32.ComboBoxControl.COMBOBOXINFO.rcButton">
            <summary>
            A RECT structure that specifies the coordinates of the button that contains the drop-down arrow.
            </summary>
        </member>
        <member name="F:CommonWin32.ComboBoxControl.COMBOBOXINFO.stateButton">
            <summary>
            The combo box button state.
            </summary>
        </member>
        <member name="F:CommonWin32.ComboBoxControl.COMBOBOXINFO.hwndCombo">
            <summary>
            A handle to the combo box.
            </summary>
        </member>
        <member name="F:CommonWin32.ComboBoxControl.COMBOBOXINFO.hwndItem">
            <summary>
            A handle to the edit box.
            </summary>
        </member>
        <member name="F:CommonWin32.ComboBoxControl.COMBOBOXINFO.hwndList">
            <summary>
            A handle to the drop-down list.
            </summary>
        </member>
        <member name="T:CommonWin32.ComboBoxControl.COMBOBOXINFO.State">
            <summary>
            Indicates the combobox button state
            </summary>
        </member>
        <member name="F:CommonWin32.ComboBoxControl.COMBOBOXINFO.State.NA">
            <summary>
            The button exists and is not pressed.
            </summary>
        </member>
        <member name="F:CommonWin32.ComboBoxControl.COMBOBOXINFO.State.STATE_SYSTEM_INVISIBLE">
            <summary>
            There is no button.
            </summary>
        </member>
        <member name="F:CommonWin32.ComboBoxControl.COMBOBOXINFO.State.STATE_SYSTEM_PRESSED">
            <summary>
            The button is pressed.
            </summary>
        </member>
        <member name="T:CommonWin32.DeviceManagement.DEV_BROADCAST_DEVICEINTERFACE">
            <summary>
            Contains information about a class of devices.
            </summary>
        </member>
        <member name="P:CommonWin32.DeviceManagement.DEV_BROADCAST_DEVICEINTERFACE.IsSupported">
            <summary>
            Gets a value indicating whether this struct is supported on current platform.
            </summary>
            <value>
            <c>true</c> if this struct is supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_DEVICEINTERFACE.dbcc_size">
            <summary>
            The size of this structure, in bytes. This is the size of the members plus the actual length of the dbcc_name string (the null character is accounted for by the declaration of dbcc_name as a one-character array.).
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_DEVICEINTERFACE.dbcc_devicetype">
            <summary>
            Set to DBT_DEVTYP_DEVICEINTERFACE.
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_DEVICEINTERFACE.dbcc_reserved">
            <summary>
            Reserved; do not use.
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_DEVICEINTERFACE.dbcc_classguid">
            <summary>
            The GUID for the interface device class.
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_DEVICEINTERFACE.dbcc_name">
            <summary>
            A null-terminated string that specifies the name of the device.
            </summary>
        </member>
        <member name="T:CommonWin32.DeviceManagement.DEV_BROADCAST_HANDLE">
            <summary>
            THIS DEFINITION IS IFFY.
            Contains information about a file system handle.
            </summary>
        </member>
        <member name="P:CommonWin32.DeviceManagement.DEV_BROADCAST_HANDLE.IsSupported">
            <summary>
            Gets a value indicating whether this struct is supported on current platform.
            </summary>
            <value>
            <c>true</c> if this struct is supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_HANDLE.dbch_size">
            <summary>
            The size of this structure, in bytes.
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_HANDLE.dbch_devicetype">
            <summary>
            Set to DBT_DEVTYP_HANDLE.
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_HANDLE.dbch_reserved">
            <summary>
            Reserved; do not use.
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_HANDLE.dbch_handle">
            <summary>
            A handle to the device to be checked.
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_HANDLE.dbch_hdevnotify">
            <summary>
            A handle to the device notification. This handle is returned by RegisterDeviceNotification.
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_HANDLE.dbch_eventguid">
            <summary>
            The GUID for the custom event. Valid only for DBT_CUSTOMEVENT.
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_HANDLE.dbch_nameoffset">
            <summary>
            The offset of an optional string buffer. Valid only for DBT_CUSTOMEVENT.
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_HANDLE.dbch_data">
            <summary>
            Optional binary data. This member is valid only for DBT_CUSTOMEVENT.
            </summary>
        </member>
        <member name="T:CommonWin32.DeviceManagement.DEV_BROADCAST_HDR">
            <summary>
            Serves as a standard header for information related to a device event reported through the WM_DEVICECHANGE message.
            </summary>
        </member>
        <member name="P:CommonWin32.DeviceManagement.DEV_BROADCAST_HDR.IsSupported">
            <summary>
            Gets a value indicating whether this struct is supported on current platform.
            </summary>
            <value>
            <c>true</c> if this struct is supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_HDR.dbch_Size">
            <summary>
            The size of this structure, in bytes.
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_HDR.dbch_DeviceType">
            <summary>
            The device type, which determines the event-specific information that follows the first three members.
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_HDR.dbch_Reserved">
            <summary>
            Reserved; do not use.
            </summary>
        </member>
        <member name="T:CommonWin32.DeviceManagement.DEV_BROADCAST_HDR.DeviceType">
            <summary>
            Indicates the device type.
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_HDR.DeviceType.DBT_DEVTYP_DEVICEINTERFACE">
            <summary>
            Class of devices. This structure is a DEV_BROADCAST_DEVICEINTERFACE structure.
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_HDR.DeviceType.DBT_DEVTYP_HANDLE">
            <summary>
            File system handle. This structure is a DEV_BROADCAST_HANDLE structure.
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_HDR.DeviceType.DBT_DEVTYP_OEM">
            <summary>
            OEM- or IHV-defined device type. This structure is a DEV_BROADCAST_OEM structure.
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_HDR.DeviceType.DBT_DEVTYP_PORT">
            <summary>
            Port device (serial or parallel). This structure is a DEV_BROADCAST_PORT structure.
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_HDR.DeviceType.DBT_DEVTYP_VOLUME">
            <summary>
            Logical volume. This structure is a <see cref="T:CommonWin32.DeviceManagement.DEV_BROADCAST_VOLUME"/> structure.
            </summary>
        </member>
        <member name="T:CommonWin32.DeviceManagement.DEV_BROADCAST_OEM">
            <summary>
            Contains information about a OEM-defined device type.
            </summary>
        </member>
        <member name="P:CommonWin32.DeviceManagement.DEV_BROADCAST_OEM.IsSupported">
            <summary>
            Gets a value indicating whether this struct is supported on current platform.
            </summary>
            <value>
            <c>true</c> if this struct is supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_OEM.dbco_size">
            <summary>
            The size of this structure, in bytes.
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_OEM.dbco_devicetype">
            <summary>
            Set to DBT_DEVTYP_OEM.
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_OEM.dbco_reserved">
            <summary>
            Reserved; do not use.
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_OEM.dbco_identifier">
            <summary>
            The OEM-specific identifier for the device.
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_OEM.dbco_suppfunc">
            <summary>
            The OEM-specific function value. Possible values depend on the device.
            </summary>
        </member>
        <member name="T:CommonWin32.DeviceManagement.DEV_BROADCAST_PORT">
            <summary>
            Contains information about a modem, serial, or parallel port.
            </summary>
        </member>
        <member name="P:CommonWin32.DeviceManagement.DEV_BROADCAST_PORT.IsSupported">
            <summary>
            Gets a value indicating whether this struct is supported on current platform.
            </summary>
            <value>
            <c>true</c> if this struct is supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_PORT.dbcp_size">
            <summary>
            The size of this structure, in bytes. This is the size of the members plus the actual length of the dbcp_name  string (the null character is accounted for by the declaration of dbcc_name as a one-character array.).
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_PORT.dbcp_devicetype">
            <summary>
            Set to DBT_DEVTYP_PORT.
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_PORT.dbcp_reserved">
            <summary>
            Reserved; do not use.
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_PORT.dbcp_name">
            <summary>
            A null-terminated string specifying the friendly name of the port or the device connected to the port. Friendly names are intended to help the user quickly and accurately identify the device—for example, "COM1" and "Standard 28800 bps Modem" are considered friendly names.
            </summary>
        </member>
        <member name="T:CommonWin32.DeviceManagement.DEV_BROADCAST_VOLUME">
            <summary>
            Contains information about a logical volume.
            </summary>
        </member>
        <member name="P:CommonWin32.DeviceManagement.DEV_BROADCAST_VOLUME.IsSupported">
            <summary>
            Gets a value indicating whether this struct is supported on current platform.
            </summary>
            <value>
            <c>true</c> if this struct is supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_VOLUME.dbcv_size">
            <summary>
            The size of this structure, in bytes.
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_VOLUME.dbcv_devicetype">
            <summary>
            Set to DBT_DEVTYP_VOLUME.
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_VOLUME.dbcv_reserved">
            <summary>
            Reserved; do not use.
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_VOLUME.dbcv_unitmask">
            <summary>
            The logical unit mask identifying one or more logical units. 
            Each bit in the mask corresponds to one logical drive. 
            Bit 0 represents drive A, bit 1 represents drive B, and so on.
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_VOLUME.dbcv_flags">
            <summary>
            Flag for the volume.
            </summary>
        </member>
        <member name="T:CommonWin32.DeviceManagement.DEV_BROADCAST_VOLUME.Flag">
            <summary>
            Indicates the volume flag
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_VOLUME.Flag.DBTF_MEDIA">
            <summary>
            Change affects media in drive. If not set, change affects physical device or drive.
            </summary>
        </member>
        <member name="F:CommonWin32.DeviceManagement.DEV_BROADCAST_VOLUME.Flag.DBTF_NET">
            <summary>
            Indicated logical volume is a network volume.
            </summary>
        </member>
        <member name="M:CommonWin32.DeviceManagement.DEV_BROADCAST_VOLUME.ParseDriveLetters">
            <summary>
            Parses the valid drive letter from the <see cref="F:CommonWin32.DeviceManagement.DEV_BROADCAST_VOLUME.dbcv_unitmask"/> field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.DeviceManagement.DEV_BROADCAST_VOLUME.ParseDriveLetters(System.UInt32)">
            <summary>
            Parses the valid drive letter from the mask.
            </summary>
            <param name="mask">The bit mask in the format where bit 0 = A, bit 1 = B, bit 2 = C, and so on..</param>
            <returns></returns>
        </member>
        <member name="T:CommonWin32.EditControl.EditControlMessage">
            <summary>
            Messages sent to for edit controls.
            </summary>
        </member>
        <member name="F:CommonWin32.EditControl.EditControlMessage.EM_SETCUEBANNER">
            <summary>
            Sets the textual cue, or tip, that is displayed by the edit control to prompt the user for information.
            </summary>
        </member>
        <member name="F:CommonWin32.EditControl.EditControlMessage.EM_GETCUEBANNER">
            <summary>
            Gets the text that is displayed as the textual cue, or tip, in an edit control.
            </summary>
        </member>
        <member name="F:CommonWin32.EditControl.EditControlMessage.EM_SETREADONLY">
            <summary>
            Sets or removes the read-only style (ES_READONLY) of an edit control. You can send this message to either an edit control or a rich edit control.
            </summary>
        </member>
        <member name="T:CommonWin32.HighDPI.MONITOR_DPI_TYPE">
            <summary>
            Identifies the dots per inch (dpi) setting for a monitor.
            </summary>
        </member>
        <member name="F:CommonWin32.HighDPI.MONITOR_DPI_TYPE.MDT_EFFECTIVE_DPI">
            <summary>
            The effective DPI. This value should be used when determining the correct scale factor for scaling UI elements. This incorporates the scale factor set by the user for this specific display.
            </summary>
        </member>
        <member name="F:CommonWin32.HighDPI.MONITOR_DPI_TYPE.MDT_ANGULAR_DPI">
            <summary>
            The angular DPI. This DPI ensures rendering at a compliant angular resolution on the screen. This does not include the scale factor set by the user for this specific display.
            </summary>
        </member>
        <member name="F:CommonWin32.HighDPI.MONITOR_DPI_TYPE.MDT_RAW_DPI">
            <summary>
            The raw DPI. This value is the linear DPI of the screen as measured on the screen itself. Use this value when you want to read the pixel density and not the recommended scaling setting. This does not include the scale factor set by the user for this specific display and is not guaranteed to be a supported DPI value.
            </summary>
        </member>
        <member name="F:CommonWin32.HighDPI.MONITOR_DPI_TYPE.MDT_DEFAULT">
            <summary>
            Same as <see cref="F:CommonWin32.HighDPI.MONITOR_DPI_TYPE.MDT_EFFECTIVE_DPI"/>.
            </summary>
        </member>
        <member name="T:CommonWin32.HighDPI.PROCESS_DPI_AWARENESS">
            <summary>
            Identifies dots per inch (dpi) awareness values. DPI awareness indicates how much scaling work an application performs for DPI versus how much is done by the system.
            </summary>
        </member>
        <member name="F:CommonWin32.HighDPI.PROCESS_DPI_AWARENESS.PROCESS_DPI_UNAWARE">
            <summary>
            DPI unaware. This app does not scale for DPI changes and is always assumed to have a scale factor of 100% (96 DPI). It will be automatically scaled by the system on any other DPI setting.
            </summary>
        </member>
        <member name="F:CommonWin32.HighDPI.PROCESS_DPI_AWARENESS.PROCESS_SYSTEM_DPI_AWARE">
            <summary>
            System DPI aware. This app does not scale for DPI changes. It will query for the DPI once and use that value for the lifetime of the app. If the DPI changes, the app will not adjust to the new DPI value. It will be automatically scaled up or down by the system when the DPI changes from the system value.
            </summary>
        </member>
        <member name="F:CommonWin32.HighDPI.PROCESS_DPI_AWARENESS.PROCESS_PER_MONITOR_DPI_AWARE">
            <summary>
            Per monitor DPI aware. This app checks for the DPI when it is created and adjusts the scale factor whenever the DPI changes. These applications are not automatically scaled by the system.
            </summary>
        </member>
        <member name="T:CommonWin32.HighDPI.SHELL_UI_COMPONENT">
            <summary>
            Identifies the type of UI component that is needed in the shell.
            </summary>
        </member>
        <member name="F:CommonWin32.HighDPI.SHELL_UI_COMPONENT.SHELL_UI_COMPONENT_TASKBARS">
            <summary>
            This UI component is a taskbar icon.
            </summary>
        </member>
        <member name="F:CommonWin32.HighDPI.SHELL_UI_COMPONENT.SHELL_UI_COMPONENT_NOTIFICATIONAREA">
            <summary>
            This UI component is an icon in the notification area.
            </summary>
        </member>
        <member name="F:CommonWin32.HighDPI.SHELL_UI_COMPONENT.SHELL_UI_COMPONENT_DESKBAND">
            <summary>
            This UI component is a deskband icon.
            </summary>
        </member>
        <member name="M:CommonWin32.HRESULT.GetExceptionForHR(System.Int32)">
            <summary>
            Converts the specified HRESULT error code to a corresponding System.Exception object.
            </summary>
            <param name="hr">The hr.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.HRESULT.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonWin32.HRESULT"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CommonWin32.HRESULT.op_Implicit(CommonWin32.HRESULT)~System.Int32">
            <summary>
            Performs an implicit conversion from <see cref="T:CommonWin32.HRESULT"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="This">The this.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:CommonWin32.HRESULT.op_Implicit(System.Int32)~CommonWin32.HRESULT">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:CommonWin32.HRESULT"/>.
            </summary>
            <param name="This">The this.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:CommonWin32.HRESULT.op_Implicit(CommonWin32.HRESULT)~System.Boolean">
            <summary>
            Performs an implicit conversion from <see cref="T:CommonWin32.HRESULT"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="This">The this.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:CommonWin32.HRESULT.op_True(CommonWin32.HRESULT)">
            <summary>
            Implements the operator true.
            </summary>
            <param name="This">The this.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:CommonWin32.HRESULT.op_False(CommonWin32.HRESULT)">
            <summary>
            Implements the operator false.
            </summary>
            <param name="This">The this.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:CommonWin32.HRESULT.op_Equality(CommonWin32.HRESULT,CommonWin32.HRESULT)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:CommonWin32.HRESULT.op_Inequality(CommonWin32.HRESULT,CommonWin32.HRESULT)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:CommonWin32.HRESULT.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CommonWin32.HRESULT.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:CommonWin32.HRESULT.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:CommonWin32.HRESULT.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj" />.
            Zero
            This instance is equal to <paramref name="obj" />.
            Greater than zero
            This instance is greater than <paramref name="obj" />.
            </returns>
            <exception cref="T:System.ArgumentException">Arg_MustBeHRESULT</exception>
        </member>
        <member name="F:CommonWin32.HRESULT.S_OK">
            <summary>
            Success code
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NO_ERROR">
            <summary>
            Success code
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NOERROR">
            <summary>
            Success code
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.S_FALSE">
            <summary>
            Success code false
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.E_UNEXPECTED">
            <summary>
            Catastrophic failure
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.E_NOTIMPL">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.E_OUTOFMEMORY">
            <summary>
            Ran out of memory
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.E_INVALIDARG">
            <summary>
            One or more arguments are invalid
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.E_NOINTERFACE">
            <summary>
            No such interface supported
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.E_POINTER">
            <summary>
            Invalid pointer
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.E_HANDLE">
            <summary>
            Invalid handle
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.E_ABORT">
            <summary>
            Operation aborted
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.E_FAIL">
            <summary>
            Unspecified error
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.E_ACCESSDENIED">
            <summary>
            General access denied error
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.E_PENDING">
            <summary>
            The data necessary to complete this operation is not yet available.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_INIT_TLS">
            <summary>
            Thread local storage failure
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_INIT_SHARED_ALLOCATOR">
            <summary>
            Get shared memory allocator failure
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_INIT_MEMORY_ALLOCATOR">
            <summary>
            Get memory allocator failure
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_INIT_CLASS_CACHE">
            <summary>
            Unable to initialize class cache
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_INIT_RPC_CHANNEL">
            <summary>
            Unable to initialize RPC services
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_INIT_TLS_SET_CHANNEL_CONTROL">
            <summary>
            Cannot set thread local storage channel control
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_INIT_TLS_CHANNEL_CONTROL">
            <summary>
            Could not allocate thread local storage channel control
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_INIT_UNACCEPTED_USER_ALLOCATOR">
            <summary>
            The user supplied memory allocator is unacceptable
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_INIT_SCM_MUTEX_EXISTS">
            <summary>
            The OLE service mutex already exists
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_INIT_SCM_FILE_MAPPING_EXISTS">
            <summary>
            The OLE service file mapping already exists
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_INIT_SCM_MAP_VIEW_OF_FILE">
            <summary>
            Unable to map view of file for OLE service
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_INIT_SCM_EXEC_FAILURE">
            <summary>
            Failure attempting to launch OLE service
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_INIT_ONLY_SINGLE_THREADED">
            <summary>
            There was an attempt to call CoInitialize a second time while single threaded
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_CANT_REMOTE">
            <summary>
            A Remote activation was necessary but was not allowed
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_BAD_SERVER_NAME">
            <summary>
            A Remote activation was necessary but the server name provided was invalid
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_WRONG_SERVER_IDENTITY">
            <summary>
            The class is configured to run as a security id different from the caller
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_OLE1DDE_DISABLED">
            <summary>
            Use of Ole1 services requiring DDE windows is disabled
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_RUNAS_SYNTAX">
            <summary>
            A RunAs specification must be &lt;domain name&gt;\&lt;user name&gt; or simply &lt;user name&gt;
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_CREATEPROCESS_FAILURE">
            <summary>
            The server process could not be started.  The pathname may be incorrect.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_RUNAS_CREATEPROCESS_FAILURE">
            <summary>
            The server process could not be started as the configured identity.
            <para>The pathname may be incorrect or unavailable.</para>
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_RUNAS_LOGON_FAILURE">
            <summary>
            The server process could not be started because the configured identity is incorrect.
            <para>Check the username and password.</para>
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_LAUNCH_PERMSSION_DENIED">
            <summary>
            The client is not allowed to launch this server.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_START_SERVICE_FAILURE">
            <summary>
            The service providing this server could not be started.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_REMOTE_COMMUNICATION_FAILURE">
            <summary>
            This computer was unable to communicate with the computer providing the server.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_SERVER_START_TIMEOUT">
            <summary>
            The server did not respond after being launched.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_CLSREG_INCONSISTENT">
            <summary>
            The registration information for this server is inconsistent or incomplete.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_IIDREG_INCONSISTENT">
            <summary>
            The registration information for this interface is inconsistent or incomplete.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_NOT_SUPPORTED">
            <summary>
            The operation attempted is not supported.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_RELOAD_DLL">
            <summary>
            A dll must be loaded.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_MSI_ERROR">
            <summary>
            A Microsoft Software Installer error was encountered.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_ATTEMPT_TO_CREATE_OUTSIDE_CLIENT_CONTEXT">
            <summary>
            The specified activation could not occur in the client context as specified.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_SERVER_PAUSED">
            <summary>
            Activations on the server are paused.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_SERVER_NOT_PAUSED">
            <summary>
            Activations on the server are not paused.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_CLASS_DISABLED">
            <summary>
            The component or application containing the component has been disabled.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_CLRNOTAVAILABLE">
            <summary>
            The common language runtime is not available
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_ASYNC_WORK_REJECTED">
            <summary>
            The thread-pool rejected the submitted asynchronous work.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_SERVER_INIT_TIMEOUT">
            <summary>
            The server started, but did not finish initializing in a timely fashion.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_NO_SECCTX_IN_ACTIVATE">
            <summary>
            Unable to complete the call since there is no COM+ security context inside IObjectControl.Activate.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_TRACKER_CONFIG">
            <summary>
            The provided tracker configuration is invalid
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_THREADPOOL_CONFIG">
            <summary>
            The provided thread pool configuration is invalid
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_SXS_CONFIG">
            <summary>
            The provided side-by-side configuration is invalid
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_MALFORMED_SPN">
            <summary>
            The server principal name (SPN) obtained during security negotiation is malformed.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_CALL_REJECTED">
            <summary>
            Call was rejected by callee.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_CALL_CANCELED">
            <summary>
            Call was canceled by the message filter.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_CANTPOST_INSENDCALL">
            <summary>
            The caller is dispatching an intertask SendMessage call and cannot call out via PostMessage.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_CANTCALLOUT_INASYNCCALL">
            <summary>
            The caller is dispatching an asynchronous call and cannot make an outgoing call on behalf of this call.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_CANTCALLOUT_INEXTERNALCALL">
            <summary>
            It is illegal to call out while inside message filter.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_CONNECTION_TERMINATED">
            <summary>
            The connection terminated or is in a bogus state and cannot be used any more. Other connections are still valid.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_SERVER_DIED">
            <summary>
            The callee (server [not server application]) is not available and disappeared; all connections are invalid. The call may have executed.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_CLIENT_DIED">
            <summary>
            The caller (client) disappeared while the callee (server) was processing a call.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_INVALID_DATAPACKET">
            <summary>
            The data packet with the marshalled parameter data is incorrect.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_CANTTRANSMIT_CALL">
            <summary>
            The call was not transmitted properly; the message queue was full and was not emptied after yielding.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_CLIENT_CANTMARSHAL_DATA">
            <summary>
            The client (caller) cannot marshall the parameter data - low memory, etc.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_CLIENT_CANTUNMARSHAL_DATA">
            <summary>
            The client (caller) cannot unmarshall the return data - low memory, etc.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_SERVER_CANTMARSHAL_DATA">
            <summary>
            The server (callee) cannot marshall the return data - low memory, etc.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_SERVER_CANTUNMARSHAL_DATA">
            <summary>
            The server (callee) cannot unmarshall the parameter data - low memory, etc.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_INVALID_DATA">
            <summary>
            Received data is invalid; could be server or client data.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_INVALID_PARAMETER">
            <summary>
            A particular parameter is invalid and cannot be (un)marshalled.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_CANTCALLOUT_AGAIN">
            <summary>
            There is no second outgoing call on same channel in DDE conversation.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_SERVER_DIED_DNE">
            <summary>
            The callee (server [not server application]) is not available and disappeared; all connections are invalid. The call did not execute.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_SYS_CALL_FAILED">
            <summary>
            System call failed.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_OUT_OF_RESOURCES">
            <summary>
            Could not allocate some required resource (memory, events, ...)
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_ATTEMPTED_MULTITHREAD">
            <summary>
            Attempted to make calls on more than one thread in single threaded mode.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_NOT_REGISTERED">
            <summary>
            The requested interface is not registered on the server object.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_FAULT">
            <summary>
            RPC could not call the server or could not return the results of calling the server.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_SERVERFAULT">
            <summary>
            The server threw an exception.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_CHANGED_MODE">
            <summary>
            Cannot change thread mode after it is set.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_INVALIDMETHOD">
            <summary>
            The method called does not exist on the server.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_DISCONNECTED">
            <summary>
            The object invoked has disconnected from its clients.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_RETRY">
            <summary>
            The object invoked chose not to process the call now.  Try again later.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_SERVERCALL_RETRYLATER">
            <summary>
            The message filter indicated that the application is busy.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_SERVERCALL_REJECTED">
            <summary>
            The message filter rejected the call.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_INVALID_CALLDATA">
            <summary>
            A call control interfaces was called with invalid data.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_CANTCALLOUT_ININPUTSYNCCALL">
            <summary>
            An outgoing call cannot be made since the application is dispatching an input-synchronous call.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_WRONG_THREAD">
            <summary>
            The application called an interface that was marshalled for a different thread.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_THREAD_NOT_INIT">
            <summary>
            CoInitialize has not been called on the current thread.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_VERSION_MISMATCH">
            <summary>
            The version of OLE on the client and server machines does not match.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_INVALID_HEADER">
            <summary>
            OLE received a packet with an invalid header.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_INVALID_EXTENSION">
            <summary>
            OLE received a packet with an invalid extension.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_INVALID_IPID">
            <summary>
            The requested object or interface does not exist.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_INVALID_OBJECT">
            <summary>
            The requested object does not exist.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_S_CALLPENDING">
            <summary>
            OLE has sent a request and is waiting for a reply.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_S_WAITONTIMER">
            <summary>
            OLE is waiting before retrying a request.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_CALL_COMPLETE">
            <summary>
            Call context cannot be accessed after call completed.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_UNSECURE_CALL">
            <summary>
            Impersonate on unsecure calls is not supported.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_TOO_LATE">
            <summary>
            Security must be initialized before any interfaces are marshalled or unmarshalled. It cannot be changed once initialized.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_NO_GOOD_SECURITY_PACKAGES">
            <summary>
            No security packages are installed on this machine or the user is not logged on or there are no compatible security packages between the client and server.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_ACCESS_DENIED">
            <summary>
            Access is denied.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_REMOTE_DISABLED">
            <summary>
            Remote calls are not allowed for this process.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_INVALID_OBJREF">
            <summary>
            The marshaled interface data packet (OBJREF) has an invalid or unknown format.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_NO_CONTEXT">
            <summary>
            No context is associated with this call. This happens for some custom marshalled calls and on the client side of the call.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_TIMEOUT">
            <summary>
            This operation returned because the timeout period expired.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_NO_SYNC">
            <summary>
            There are no synchronize objects to wait on.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_FULLSIC_REQUIRED">
            <summary>
            Full subject issuer chain SSL principal name expected from the server.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_INVALID_STD_NAME">
            <summary>
            Principal name is not a valid MSSTD name.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_FAILEDTOIMPERSONATE">
            <summary>
            Unable to impersonate DCOM client
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_FAILEDTOGETSECCTX">
            <summary>
            Unable to obtain server's security context
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_FAILEDTOOPENTHREADTOKEN">
            <summary>
            Unable to open the access token of the current thread
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_FAILEDTOGETTOKENINFO">
            <summary>
            Unable to obtain user info from an access token
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_TRUSTEEDOESNTMATCHCLIENT">
            <summary>
            The client who called IAccessControl::IsAccessPermitted was not the trustee provided to the method
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_FAILEDTOQUERYCLIENTBLANKET">
            <summary>
            Unable to obtain the client's security blanket
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_FAILEDTOSETDACL">
            <summary>
            Unable to set a discretionary ACL into a security descriptor
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_ACCESSCHECKFAILED">
            <summary>
            The system function, AccessCheck, returned false
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_NETACCESSAPIFAILED">
            <summary>
            Either NetAccessDel or NetAccessAdd returned an error code.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_WRONGTRUSTEENAMESYNTAX">
            <summary>
            One of the trustee strings provided by the user did not conform to the &lt;Domain&gt;\&lt;Name&gt; syntax and it was not the "*" string
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_INVALIDSID">
            <summary>
            One of the security identifiers provided by the user was invalid
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_CONVERSIONFAILED">
            <summary>
            Unable to convert a wide character trustee string to a multibyte trustee string
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_NOMATCHINGSIDFOUND">
            <summary>
            Unable to find a security identifier that corresponds to a trustee string provided by the user
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_LOOKUPACCSIDFAILED">
            <summary>
            The system function, LookupAccountSID, failed
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_NOMATCHINGNAMEFOUND">
            <summary>
            Unable to find a trustee name that corresponds to a security identifier provided by the user
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_LOOKUPACCNAMEFAILED">
            <summary>
            The system function, LookupAccountName, failed
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_SETSERLHNDLFAILED">
            <summary>
            Unable to set or reset a serialization handle
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_FAILEDTOGETWINDIR">
            <summary>
            Unable to obtain the Windows directory
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_PATHTOOLONG">
            <summary>
            Path too long
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_FAILEDTOGENUUID">
            <summary>
            Unable to generate a uuid.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_FAILEDTOCREATEFILE">
            <summary>
            Unable to create file
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_FAILEDTOCLOSEHANDLE">
            <summary>
            Unable to close a serialization handle or a file handle.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_EXCEEDSYSACLLIMIT">
            <summary>
            The number of ACEs in an ACL exceeds the system limit.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_ACESINWRONGORDER">
            <summary>
            Not all the DENY_ACCESS ACEs are arranged in front of the GRANT_ACCESS ACEs in the stream.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_INCOMPATIBLESTREAMVERSION">
            <summary>
            The version of ACL format in the stream is not supported by this implementation of IAccessControl
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_FAILEDTOOPENPROCESSTOKEN">
            <summary>
            Unable to open the access token of the server process
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_DECODEFAILED">
            <summary>
            Unable to decode the ACL in the stream provided by the user
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_ACNOTINITIALIZED">
            <summary>
            The COM IAccessControl object is not initialized
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_CANCEL_DISABLED">
            <summary>
            Call Cancellation is disabled
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.RPC_E_UNEXPECTED">
            <summary>
            An internal error occurred.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DISP_E_UNKNOWNINTERFACE">
            <summary>
            Unknown interface.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DISP_E_MEMBERNOTFOUND">
            <summary>
            Member not found.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DISP_E_PARAMNOTFOUND">
            <summary>
            Parameter not found.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DISP_E_TYPEMISMATCH">
            <summary>
            Type mismatch.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DISP_E_UNKNOWNNAME">
            <summary>
            Unknown name.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DISP_E_NONAMEDARGS">
            <summary>
            No named arguments.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DISP_E_BADVARTYPE">
            <summary>
            Bad variable type.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DISP_E_EXCEPTION">
            <summary>
            Exception occurred.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DISP_E_OVERFLOW">
            <summary>
            Out of present range.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DISP_E_BADINDEX">
            <summary>
            Invalid index.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DISP_E_UNKNOWNLCID">
            <summary>
            Unknown language.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DISP_E_ARRAYISLOCKED">
            <summary>
            Memory is locked.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DISP_E_BADPARAMCOUNT">
            <summary>
            Invalid number of parameters.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DISP_E_PARAMNOTOPTIONAL">
            <summary>
            Parameter not optional.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DISP_E_BADCALLEE">
            <summary>
            Invalid callee.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DISP_E_NOTACOLLECTION">
            <summary>
            Does not support a collection.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DISP_E_DIVBYZERO">
            <summary>
            Division by zero.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DISP_E_BUFFERTOOSMALL">
            <summary>
            Buffer too small
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TYPE_E_BUFFERTOOSMALL">
            <summary>
            Buffer too small.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TYPE_E_FIELDNOTFOUND">
            <summary>
            Field name not defined in the record.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TYPE_E_INVDATAREAD">
            <summary>
            Old format or invalid type library.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TYPE_E_UNSUPFORMAT">
            <summary>
            Old format or invalid type library.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TYPE_E_REGISTRYACCESS">
            <summary>
            Error accessing the OLE registry.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TYPE_E_LIBNOTREGISTERED">
            <summary>
            Library not registered.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TYPE_E_UNDEFINEDTYPE">
            <summary>
            Bound to unknown type.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TYPE_E_QUALIFIEDNAMEDISALLOWED">
            <summary>
            Qualified name disallowed.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TYPE_E_INVALIDSTATE">
            <summary>
            Invalid forward reference, or reference to uncompiled type.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TYPE_E_WRONGTYPEKIND">
            <summary>
            Type mismatch.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TYPE_E_ELEMENTNOTFOUND">
            <summary>
            Element not found.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TYPE_E_AMBIGUOUSNAME">
            <summary>
            Ambiguous name.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TYPE_E_NAMECONFLICT">
            <summary>
            Name already exists in the library.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TYPE_E_UNKNOWNLCID">
            <summary>
            Unknown LCID.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TYPE_E_DLLFUNCTIONNOTFOUND">
            <summary>
            Function not defined in specified DLL.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TYPE_E_BADMODULEKIND">
            <summary>
            Wrong module kind for the operation.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TYPE_E_SIZETOOBIG">
            <summary>
            Size may not exceed 64K.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TYPE_E_DUPLICATEID">
            <summary>
            Duplicate ID in inheritance hierarchy.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TYPE_E_INVALIDID">
            <summary>
            Incorrect inheritance depth in standard OLE hmember.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TYPE_E_TYPEMISMATCH">
            <summary>
            Type mismatch.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TYPE_E_OUTOFBOUNDS">
            <summary>
            Invalid number of arguments.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TYPE_E_IOERROR">
            <summary>
            I/O Error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TYPE_E_CANTCREATETMPFILE">
            <summary>
            Error creating unique tmp file.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TYPE_E_CANTLOADLIBRARY">
            <summary>
            Error loading type library/DLL.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TYPE_E_INCONSISTENTPROPFUNCS">
            <summary>
            Inconsistent property functions.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TYPE_E_CIRCULARTYPE">
            <summary>
            Circular dependency between types/modules.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_INVALIDFUNCTION">
            <summary>
            Unable to perform requested operation.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_FILENOTFOUND">
            <summary>
            %1 could not be found.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_PATHNOTFOUND">
            <summary>
            The path %1 could not be found.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_TOOMANYOPENFILES">
            <summary>
            There are insufficient resources to open another file.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_ACCESSDENIED">
            <summary>
            Access Denied.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_INVALIDHANDLE">
            <summary>
            Attempted an operation on an invalid object.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_INSUFFICIENTMEMORY">
            <summary>
            There is insufficient memory available to complete operation.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_INVALIDPOINTER">
            <summary>
            Invalid pointer error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_NOMOREFILES">
            <summary>
            There are no more entries to return.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_DISKISWRITEPROTECTED">
            <summary>
            Disk is write-protected.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_SEEKERROR">
            <summary>
            An error occurred during a seek operation.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_WRITEFAULT">
            <summary>
            A disk error occurred during a write operation.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_READFAULT">
            <summary>
            A disk error occurred during a read operation.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_SHAREVIOLATION">
            <summary>
            A share violation has occurred.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_LOCKVIOLATION">
            <summary>
            A lock violation has occurred.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_FILEALREADYEXISTS">
            <summary>
            %1 already exists.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_INVALIDPARAMETER">
            <summary>
            Invalid parameter error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_MEDIUMFULL">
            <summary>
            There is insufficient disk space to complete operation.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_PROPSETMISMATCHED">
            <summary>
            Illegal write of non-simple property to simple property set.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_ABNORMALAPIEXIT">
            <summary>
            An API call exited abnormally.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_INVALIDHEADER">
            <summary>
            The file %1 is not a valid compound file.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_INVALIDNAME">
            <summary>
            The name %1 is not valid.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_UNKNOWN">
            <summary>
            An unexpected error occurred.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_UNIMPLEMENTEDFUNCTION">
            <summary>
            That function is not implemented.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_INVALIDFLAG">
            <summary>
            Invalid flag error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_INUSE">
            <summary>
            Attempted to use an object that is busy.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_NOTCURRENT">
            <summary>
            The storage has been changed since the last commit.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_REVERTED">
            <summary>
            Attempted to use an object that has ceased to exist.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_CANTSAVE">
            <summary>
            Can't save.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_OLDFORMAT">
            <summary>
            The compound file %1 was produced with an incompatible version of storage.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_OLDDLL">
            <summary>
            The compound file %1 was produced with a newer version of storage.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_SHAREREQUIRED">
            <summary>
            Share.exe or equivalent is required for operation.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_NOTFILEBASEDSTORAGE">
            <summary>
            Illegal operation called on non-file based storage.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_EXTANTMARSHALLINGS">
            <summary>
            Illegal operation called on object with extant marshallings.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_DOCFILECORRUPT">
            <summary>
            The docfile has been corrupted.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_BADBASEADDRESS">
            <summary>
            OLE32.DLL has been loaded at the wrong address.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_DOCFILETOOLARGE">
            <summary>
            The compound file is too large for the current implementation
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_NOTSIMPLEFORMAT">
            <summary>
            The compound file was not created with the STGM_SIMPLE flag
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_INCOMPLETE">
            <summary>
            The file download was aborted abnormally.  The file is incomplete.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_TERMINATED">
            <summary>
            The file download has been terminated.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_S_CONVERTED">
            <summary>
            The underlying file was converted to compound file format.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_S_BLOCK">
            <summary>
            The storage operation should block until more data is available.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_S_RETRYNOW">
            <summary>
            The storage operation should retry immediately.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_S_MONITORING">
            <summary>
            The notified event sink will not influence the storage operation.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_S_MULTIPLEOPENS">
            <summary>
            Multiple opens prevent consolidated. (commit succeeded).
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_S_CONSOLIDATIONFAILED">
            <summary>
            Consolidation of the storage file failed. (commit succeeded).
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_S_CANNOTCONSOLIDATE">
            <summary>
            Consolidation of the storage file is inappropriate. (commit succeeded).
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_STATUS_COPY_PROTECTION_FAILURE">
            <summary>
            Generic Copy Protection Error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_CSS_AUTHENTICATION_FAILURE">
            <summary>
            Copy Protection Error - DVD CSS Authentication failed.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_CSS_KEY_NOT_PRESENT">
            <summary>
            Copy Protection Error - The given sector does not have a valid CSS key.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_CSS_KEY_NOT_ESTABLISHED">
            <summary>
            Copy Protection Error - DVD session key not established.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_CSS_SCRAMBLED_SECTOR">
            <summary>
            Copy Protection Error - The read failed because the sector is encrypted.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_CSS_REGION_MISMATCH">
            <summary>
            Copy Protection Error - The current DVD's region does not correspond to the region setting of the drive.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.STG_E_RESETS_EXHAUSTED">
            <summary>
            Copy Protection Error - The drive's region setting may be permanent or the number of user resets has been exhausted.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OLE_E_FIRST">
            <summary>
            Generic OLE errors that may be returned by many inerfaces
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OLE_E_OLEVERB">
            <summary>
            Invalid OLEVERB structure
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OLE_E_ADVF">
            <summary>
            Invalid advise flags
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OLE_E_ENUM_NOMORE">
            <summary>
            Can't enumerate any more, because the associated data is missing
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OLE_E_ADVISENOTSUPPORTED">
            <summary>
            This implementation doesn't take advises
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OLE_E_NOCONNECTION">
            <summary>
            There is no connection for this connection ID
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OLE_E_NOTRUNNING">
            <summary>
            Need to run the object to perform this operation
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OLE_E_NOCACHE">
            <summary>
            There is no cache to operate on
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OLE_E_BLANK">
            <summary>
            Uninitialized object
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OLE_E_CLASSDIFF">
            <summary>
            Linked object's source class has changed
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OLE_E_CANT_GETMONIKER">
            <summary>
            Not able to get the moniker of the object
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OLE_E_CANT_BINDTOSOURCE">
            <summary>
            Not able to bind to the source
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OLE_E_STATIC">
            <summary>
            Object is static; operation not allowed
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OLE_E_PROMPTSAVECANCELLED">
            <summary>
            User canceled out of save dialog
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OLE_E_INVALIDRECT">
            <summary>
            Invalid rectangle
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OLE_E_WRONGCOMPOBJ">
            <summary>
            compobj.dll is too old for the ole2.dll initialized
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OLE_E_INVALIDHWND">
            <summary>
            Invalid window handle
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OLE_E_NOT_INPLACEACTIVE">
            <summary>
            Object is not in any of the inplace active states
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OLE_E_CANTCONVERT">
            <summary>
            Not able to convert object
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OLE_E_NOSTORAGE">
            <summary>
            Not able to perform the operation because object is not given storage yet
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DV_E_FORMATETC">
            <summary>
            Invalid FORMATETC structure
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DV_E_DVTARGETDEVICE">
            <summary>
            Invalid DVTARGETDEVICE structure
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DV_E_STGMEDIUM">
            <summary>
            Invalid STDGMEDIUM structure
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DV_E_STATDATA">
            <summary>
            Invalid STATDATA structure
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DV_E_LINDEX">
            <summary>
            Invalid lindex
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DV_E_TYMED">
            <summary>
            Invalid tymed
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DV_E_CLIPFORMAT">
            <summary>
            Invalid clipboard format
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DV_E_DVASPECT">
            <summary>
            Invalid aspect(s)
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DV_E_DVTARGETDEVICE_SIZE">
            <summary>
            tdSize parameter of the DVTARGETDEVICE structure is invalid
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DV_E_NOIVIEWOBJECT">
            <summary>
            Object doesn't support IViewObject interface
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DRAGDROP_E_NOTREGISTERED">
            <summary>
            Trying to revoke a drop target that has not been registered
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DRAGDROP_E_ALREADYREGISTERED">
            <summary>
            This window has already been registered as a drop target
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DRAGDROP_E_INVALIDHWND">
            <summary>
            Invalid window handle
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CLASS_E_NOAGGREGATION">
            <summary>
            Class does not support aggregation (or class object is remote)
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CLASS_E_CLASSNOTAVAILABLE">
            <summary>
            ClassFactory cannot supply requested class
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CLASS_E_NOTLICENSED">
            <summary>
            Class is not licensed for use
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.VIEW_E_DRAW">
            <summary>
            Error drawing view
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.REGDB_E_READREGDB">
            <summary>
            Could not read key from registry
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.REGDB_E_WRITEREGDB">
            <summary>
            Could not write key to registry
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.REGDB_E_KEYMISSING">
            <summary>
            Could not find the key in the registry
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.REGDB_E_INVALIDVALUE">
            <summary>
            Invalid value for registry
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.REGDB_E_CLASSNOTREG">
            <summary>
            Class not registered
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.REGDB_E_IIDNOTREG">
            <summary>
            Interface not registered
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.REGDB_E_BADTHREADINGMODEL">
            <summary>
            Threading model entry is not valid
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CAT_E_CATIDNOEXIST">
            <summary>
            CATID does not exist
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CAT_E_NODESCRIPTION">
            <summary>
            Description not found
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CS_E_PACKAGE_NOTFOUND">
            <summary>
            No package in the software installation data in the Active Directory meets this criteria.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CS_E_NOT_DELETABLE">
            <summary>
            Deleting this will break the referential integrity of the software installation data in the Active Directory.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CS_E_CLASS_NOTFOUND">
            <summary>
            The CLSID was not found in the software installation data in the Active Directory.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CS_E_INVALID_VERSION">
            <summary>
            The software installation data in the Active Directory is corrupt.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CS_E_NO_CLASSSTORE">
            <summary>
            There is no software installation data in the Active Directory.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CS_E_OBJECT_NOTFOUND">
            <summary>
            There is no software installation data object in the Active Directory.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CS_E_OBJECT_ALREADY_EXISTS">
            <summary>
            The software installation data object in the Active Directory already exists.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CS_E_INVALID_PATH">
            <summary>
            The path to the software installation data in the Active Directory is not correct.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CS_E_NETWORK_ERROR">
            <summary>
            A network error interrupted the operation.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CS_E_ADMIN_LIMIT_EXCEEDED">
            <summary>
            The size of this object exceeds the maximum size set by the Administrator.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CS_E_SCHEMA_MISMATCH">
            <summary>
            The schema for the software installation data in the Active Directory does not match the required schema.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CS_E_INTERNAL_ERROR">
            <summary>
            An error occurred in the software installation data in the Active Directory.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CACHE_E_NOCACHE_UPDATED">
            <summary>
            Cache not updated
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OLEOBJ_E_NOVERBS">
            <summary>
            No verbs for OLE object
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OLEOBJ_E_INVALIDVERB">
            <summary>
            Invalid verb for OLE object
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.INPLACE_E_NOTUNDOABLE">
            <summary>
            Undo is not available
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.INPLACE_E_NOTOOLSPACE">
            <summary>
            Space for tools is not available
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CONVERT10_E_OLESTREAM_GET">
            <summary>
            OLESTREAM Get method failed
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CONVERT10_E_OLESTREAM_PUT">
            <summary>
            OLESTREAM Put method failed
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CONVERT10_E_OLESTREAM_FMT">
            <summary>
            Contents of the OLESTREAM not in correct format
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CONVERT10_E_OLESTREAM_BITMAP_TO_DIB">
            <summary>
            There was an error in a Windows GDI call while converting the bitmap to a DIB
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CONVERT10_E_STG_FMT">
            <summary>
            Contents of the IStorage not in correct format
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CONVERT10_E_STG_NO_STD_STREAM">
            <summary>
            Contents of IStorage is missing one of the standard streams
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CONVERT10_E_STG_DIB_TO_BITMAP">
            <summary>
            There was an error in a Windows GDI call while converting the DIB to a bitmap.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CLIPBRD_E_CANT_OPEN">
            <summary>
            OpenClipboard Failed
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CLIPBRD_E_CANT_EMPTY">
            <summary>
            EmptyClipboard Failed
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CLIPBRD_E_CANT_SET">
            <summary>
            SetClipboard Failed
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CLIPBRD_E_BAD_DATA">
            <summary>
            Data on clipboard is invalid
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CLIPBRD_E_CANT_CLOSE">
            <summary>
            CloseClipboard Failed
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MK_E_CONNECTMANUALLY">
            <summary>
            Moniker needs to be connected manually
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MK_E_EXCEEDEDDEADLINE">
            <summary>
            Operation exceeded deadline
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MK_E_NEEDGENERIC">
            <summary>
            Moniker needs to be generic
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MK_E_UNAVAILABLE">
            <summary>
            Operation unavailable
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MK_E_SYNTAX">
            <summary>
            Invalid syntax
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MK_E_NOOBJECT">
            <summary>
            No object for moniker
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MK_E_INVALIDEXTENSION">
            <summary>
            Bad extension for file
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MK_E_INTERMEDIATEINTERFACENOTSUPPORTED">
            <summary>
            Intermediate operation failed
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MK_E_NOTBINDABLE">
            <summary>
            Moniker is not bindable
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MK_E_NOTBOUND">
            <summary>
            Moniker is not bound
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MK_E_CANTOPENFILE">
            <summary>
            Moniker cannot open file
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MK_E_MUSTBOTHERUSER">
            <summary>
            User input required for operation to succeed
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MK_E_NOINVERSE">
            <summary>
            Moniker class has no inverse
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MK_E_NOSTORAGE">
            <summary>
            Moniker does not refer to storage
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MK_E_NOPREFIX">
            <summary>
            No common prefix
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MK_E_ENUMERATION_FAILED">
            <summary>
            Moniker could not be enumerated
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_NOTINITIALIZED">
            <summary>
            CoInitialize has not been called.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_ALREADYINITIALIZED">
            <summary>
            CoInitialize has already been called.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_CANTDETERMINECLASS">
            <summary>
            Class of object cannot be determined
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_CLASSSTRING">
            <summary>
            Invalid class string
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_IIDSTRING">
            <summary>
            Invalid interface string
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_APPNOTFOUND">
            <summary>
            Application not found
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_APPSINGLEUSE">
            <summary>
            Application cannot be run more than once
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_ERRORINAPP">
            <summary>
            Some error in application program
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_DLLNOTFOUND">
            <summary>
            DLL for class not found
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_ERRORINDLL">
            <summary>
            Error in the DLL
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_WRONGOSFORAPP">
            <summary>
            Wrong OS or OS version for application
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_OBJNOTREG">
            <summary>
            Object is not registered
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_OBJISREG">
            <summary>
            Object is already registered
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_OBJNOTCONNECTED">
            <summary>
            Object is not connected to server
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_APPDIDNTREG">
            <summary>
            Application was launched but it didn't register a class factory
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_RELEASED">
            <summary>
            Object has been released
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.EVENT_S_SOME_SUBSCRIBERS_FAILED">
            <summary>
            An event was able to invoke some but not all of the subscribers
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.EVENT_E_ALL_SUBSCRIBERS_FAILED">
            <summary>
            An event was unable to invoke any of the subscribers
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.EVENT_S_NOSUBSCRIBERS">
            <summary>
            An event was delivered but there were no subscribers
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.EVENT_E_QUERYSYNTAX">
            <summary>
            A syntax error occurred trying to evaluate a query string
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.EVENT_E_QUERYFIELD">
            <summary>
            An invalid field name was used in a query string
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.EVENT_E_INTERNALEXCEPTION">
            <summary>
            An unexpected exception was raised
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.EVENT_E_INTERNALERROR">
            <summary>
            An unexpected internal error was detected
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.EVENT_E_INVALID_PER_USER_SID">
            <summary>
            The owner SID on a per-user subscription doesn't exist
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.EVENT_E_USER_EXCEPTION">
            <summary>
            A user-supplied component or subscriber raised an exception
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.EVENT_E_TOO_MANY_METHODS">
            <summary>
            An interface has too many methods to fire events from
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.EVENT_E_MISSING_EVENTCLASS">
            <summary>
            A subscription cannot be stored unless its event class already exists
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.EVENT_E_NOT_ALL_REMOVED">
            <summary>
            Not all the objects requested could be removed
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.EVENT_E_COMPLUS_NOT_INSTALLED">
            <summary>
            COM+ is required for this operation, but is not installed
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.EVENT_E_CANT_MODIFY_OR_DELETE_UNCONFIGURED_OBJECT">
            <summary>
            Cannot modify or delete an object that was not added using the COM+ Admin SDK
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.EVENT_E_CANT_MODIFY_OR_DELETE_CONFIGURED_OBJECT">
            <summary>
            Cannot modify or delete an object that was added using the COM+ Admin SDK
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.EVENT_E_INVALID_EVENT_CLASS_PARTITION">
            <summary>
            The event class for this subscription is in an invalid partition
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.EVENT_E_PER_USER_SID_NOT_LOGGED_ON">
            <summary>
            The owner of the PerUser subscription is not logged on to the system specified
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_ALREADYOTHERSINGLEPHASE">
            <summary>
            Another single phase resource manager has already been enlisted in this transaction.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_CANTRETAIN">
            <summary>
            A retaining commit or abort is not supported
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_COMMITFAILED">
            <summary>
            The transaction failed to commit for an unknown reason. The transaction was aborted.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_COMMITPREVENTED">
            <summary>
            Cannot call commit on this transaction object because the calling application did not initiate the transaction.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_HEURISTICABORT">
            <summary>
            Instead of committing, the resource heuristically aborted.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_HEURISTICCOMMIT">
            <summary>
            Instead of aborting, the resource heuristically committed.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_HEURISTICDAMAGE">
            <summary>
            Some of the states of the resource were committed while others were aborted, likely because of heuristic decisions.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_HEURISTICDANGER">
            <summary>
            Some of the states of the resource may have been committed while others may have been aborted, likely because of heuristic decisions.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_ISOLATIONLEVEL">
            <summary>
            The requested isolation level is not valid or supported.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_NOASYNC">
            <summary>
            The transaction manager doesn't support an asynchronous operation for this method.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_NOENLIST">
            <summary>
            Unable to enlist in the transaction.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_NOISORETAIN">
            <summary>
            The requested semantics of retention of isolation across retaining commit and abort boundaries cannot be supported by this transaction implementation, or isoFlags was not equal to zero.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_NORESOURCE">
            <summary>
            There is no resource presently associated with this enlistment
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_NOTCURRENT">
            <summary>
            The transaction failed to commit due to the failure of optimistic concurrency control in at least one of the resource managers.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_NOTRANSACTION">
            <summary>
            The transaction has already been implicitly or explicitly committed or aborted
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_NOTSUPPORTED">
            <summary>
            An invalid combination of flags was specified
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_UNKNOWNRMGRID">
            <summary>
            The resource manager id is not associated with this transaction or the transaction manager.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_WRONGSTATE">
            <summary>
            This method was called in the wrong state
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_WRONGUOW">
            <summary>
            The indicated unit of work does not match the unit of work expected by the resource manager.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_XTIONEXISTS">
            <summary>
            An enlistment in a transaction already exists.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_NOIMPORTOBJECT">
            <summary>
            An import object for the transaction could not be found.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_INVALIDCOOKIE">
            <summary>
            The transaction cookie is invalid.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_INDOUBT">
            <summary>
            The transaction status is in doubt. A communication failure occurred, or a transaction manager or resource manager has failed
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_NOTIMEOUT">
            <summary>
            A time-out was specified, but time-outs are not supported.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_ALREADYINPROGRESS">
            <summary>
            The requested operation is already in progress for the transaction.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_ABORTED">
            <summary>
            The transaction has already been aborted.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_LOGFULL">
            <summary>
            The Transaction Manager returned a log full error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_TMNOTAVAILABLE">
            <summary>
            The Transaction Manager is not available.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_CONNECTION_DOWN">
            <summary>
            A connection with the transaction manager was lost.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_CONNECTION_DENIED">
            <summary>
            A request to establish a connection with the transaction manager was denied.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_REENLISTTIMEOUT">
            <summary>
            Resource manager reenlistment to determine transaction status timed out.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_TIP_CONNECT_FAILED">
            <summary>
            This transaction manager failed to establish a connection with another TIP transaction manager.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_TIP_PROTOCOL_ERROR">
            <summary>
            This transaction manager encountered a protocol error with another TIP transaction manager.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_TIP_PULL_FAILED">
            <summary>
            This transaction manager could not propagate a transaction from another TIP transaction manager.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_DEST_TMNOTAVAILABLE">
            <summary>
            The Transaction Manager on the destination machine is not available.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_TIP_DISABLED">
            <summary>
            The Transaction Manager has disabled its support for TIP.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_NETWORK_TX_DISABLED">
            <summary>
            The transaction manager has disabled its support for remote/network transactions.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_PARTNER_NETWORK_TX_DISABLED">
            <summary>
            The partner transaction manager has disabled its support for remote/network transactions.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_XA_TX_DISABLED">
            <summary>
            The transaction manager has disabled its support for XA transactions.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_UNABLE_TO_READ_DTC_CONFIG">
            <summary>
            MSDTC was unable to read its configuration information.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_UNABLE_TO_LOAD_DTC_PROXY">
            <summary>
            MSDTC was unable to load the dtc proxy dll.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_ABORTING">
            <summary>
            The local transaction has aborted.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_CLERKNOTFOUND">
            <summary>
            XACT_E_CLERKNOTFOUND
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_CLERKEXISTS">
            <summary>
            XACT_E_CLERKEXISTS
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_RECOVERYINPROGRESS">
            <summary>
            XACT_E_RECOVERYINPROGRESS
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_TRANSACTIONCLOSED">
            <summary>
            XACT_E_TRANSACTIONCLOSED
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_INVALIDLSN">
            <summary>
            XACT_E_INVALIDLSN
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_E_REPLAYREQUEST">
            <summary>
            XACT_E_REPLAYREQUEST
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_S_ASYNC">
            <summary>
            An asynchronous operation was specified. The operation has begun, but its outcome is not known yet.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_S_DEFECT">
            <summary>
            XACT_S_DEFECT
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_S_READONLY">
            <summary>
            The method call succeeded because the transaction was read-only.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_S_SOMENORETAIN">
            <summary>
            The transaction was successfully aborted. However, this is a coordinated transaction, and some number of enlisted resources were aborted outright because they could not support abort-retaining semantics
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_S_OKINFORM">
            <summary>
            No changes were made during this call, but the sink wants another chance to look if any other sinks make further changes.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_S_MADECHANGESCONTENT">
            <summary>
            The sink is content and wishes the transaction to proceed. Changes were made to one or more resources during this call.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_S_MADECHANGESINFORM">
            <summary>
            The sink is for the moment and wishes the transaction to proceed, but if other changes are made following this return by other event sinks then this sink wants another chance to look
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_S_ALLNORETAIN">
            <summary>
            The transaction was successfully aborted. However, the abort was non-retaining.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_S_ABORTING">
            <summary>
            An abort operation was already in progress.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_S_SINGLEPHASE">
            <summary>
            The resource manager has performed a single-phase commit of the transaction.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_S_LOCALLY_OK">
            <summary>
            The local transaction has not aborted.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XACT_S_LASTRESOURCEMANAGER">
            <summary>
            The resource manager has requested to be the coordinator (last resource manager) for the transaction.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CONTEXT_E_ABORTED">
            <summary>
            The root transaction wanted to commit, but transaction aborted
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CONTEXT_E_ABORTING">
            <summary>
            You made a method call on a COM+ component that has a transaction that has already aborted or in the process of aborting.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CONTEXT_E_NOCONTEXT">
            <summary>
            There is no MTS object context
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CONTEXT_E_WOULD_DEADLOCK">
            <summary>
            The component is configured to use synchronization and this method call would cause a deadlock to occur.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CONTEXT_E_SYNCH_TIMEOUT">
            <summary>
            The component is configured to use synchronization and a thread has timed out waiting to enter the context.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CONTEXT_E_OLDREF">
            <summary>
            You made a method call on a COM+ component that has a transaction that has already committed or aborted.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CONTEXT_E_ROLENOTFOUND">
            <summary>
            The specified role was not configured for the application
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CONTEXT_E_TMNOTAVAILABLE">
            <summary>
            COM+ was unable to talk to the Microsoft Distributed Transaction Coordinator
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_ACTIVATIONFAILED">
            <summary>
            An unexpected error occurred during COM+ Activation.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_ACTIVATIONFAILED_EVENTLOGGED">
            <summary>
            COM+ Activation failed. Check the event log for more information
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_ACTIVATIONFAILED_CATALOGERROR">
            <summary>
            COM+ Activation failed due to a catalog or configuration error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_ACTIVATIONFAILED_TIMEOUT">
            <summary>
            COM+ activation failed because the activation could not be completed in the specified amount of time.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_INITIALIZATIONFAILED">
            <summary>
            COM+ Activation failed because an initialization function failed.  Check the event log for more information.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CONTEXT_E_NOJIT">
            <summary>
            The requested operation requires that JIT be in the current context and it is not
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CONTEXT_E_NOTRANSACTION">
            <summary>
            The requested operation requires that the current context have a Transaction, and it does not
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_THREADINGMODEL_CHANGED">
            <summary>
            The components threading model has changed after install into a COM+ Application.  Please re-install component.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_NOIISINTRINSICS">
            <summary>
            IIS intrinsics not available.  Start your work with IIS.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_NOCOOKIES">
            <summary>
            An attempt to write a cookie failed.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_DBERROR">
            <summary>
            An attempt to use a database generated a database specific error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_NOTPOOLED">
            <summary>
            The COM+ component you created must use object pooling to work.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_NOTCONSTRUCTED">
            <summary>
            The COM+ component you created must use object construction to work correctly.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_NOSYNCHRONIZATION">
            <summary>
            The COM+ component requires synchronization, and it is not configured for it.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_ISOLEVELMISMATCH">
            <summary>
            The TxIsolation Level property for the COM+ component being created is stronger than the TxIsolationLevel for the "root" component for the transaction.  The creation failed.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OLE_S_USEREG">
            <summary>
            Use the registry database to provide the requested information
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OLE_S_STATIC">
            <summary>
            Success, but static
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OLE_S_MAC_CLIPFORMAT">
            <summary>
            Macintosh clipboard format
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DRAGDROP_S_DROP">
            <summary>
            Successful drop took place
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DRAGDROP_S_CANCEL">
            <summary>
            Drag-drop operation canceled
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DRAGDROP_S_USEDEFAULTCURSORS">
            <summary>
            Use the default cursor
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DATA_S_SAMEFORMATETC">
            <summary>
            Data has same FORMATETC
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.VIEW_S_ALREADY_FROZEN">
            <summary>
            View is already frozen
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CACHE_S_FORMATETC_NOTSUPPORTED">
            <summary>
            FORMATETC not supported
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CACHE_S_SAMECACHE">
            <summary>
            Same cache
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CACHE_S_SOMECACHES_NOTUPDATED">
            <summary>
            Some cache(s) not updated
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OLEOBJ_S_INVALIDVERB">
            <summary>
            Invalid verb for OLE object
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OLEOBJ_S_CANNOT_DOVERB_NOW">
            <summary>
            Verb number is valid but verb cannot be done now
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OLEOBJ_S_INVALIDHWND">
            <summary>
            Invalid window handle passed
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.INPLACE_S_TRUNCATED">
            <summary>
            Message is too long; some of it had to be truncated before displaying
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CONVERT10_S_NO_PRESENTATION">
            <summary>
            Unable to convert OLESTREAM to IStorage
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MK_S_REDUCED_TO_SELF">
            <summary>
            Moniker reduced to itself
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MK_S_ME">
            <summary>
            Common prefix is this moniker
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MK_S_HIM">
            <summary>
            Common prefix is input moniker
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MK_S_US">
            <summary>
            Common prefix is both monikers
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MK_S_MONIKERALREADYREGISTERED">
            <summary>
            Moniker is already registered in running object table
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCHED_S_TASK_READY">
            <summary>
            The task is ready to run at its next scheduled time.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCHED_S_TASK_RUNNING">
            <summary>
            The task is currently running.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCHED_S_TASK_DISABLED">
            <summary>
            The task will not run at the scheduled times because it has been disabled.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCHED_S_TASK_HAS_NOT_RUN">
            <summary>
            The task has not yet run.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCHED_S_TASK_NO_MORE_RUNS">
            <summary>
            There are no more runs scheduled for this task.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCHED_S_TASK_NOT_SCHEDULED">
            <summary>
            One or more of the properties that are needed to run this task on a schedule have not been set.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCHED_S_TASK_TERMINATED">
            <summary>
            The last run of the task was terminated by the user.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCHED_S_TASK_NO_VALID_TRIGGERS">
            <summary>
            Either the task has no triggers or the existing triggers are disabled or not set.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCHED_S_EVENT_TRIGGER">
            <summary>
            Event triggers don't have set run times.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCHED_E_TRIGGER_NOT_FOUND">
            <summary>
            Trigger not found.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCHED_E_TASK_NOT_READY">
            <summary>
            One or more of the properties that are needed to run this task have not been set.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCHED_E_TASK_NOT_RUNNING">
            <summary>
            There is no running instance of the task to terminate.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCHED_E_SERVICE_NOT_INSTALLED">
            <summary>
            The Task Scheduler Service is not installed on this computer.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCHED_E_CANNOT_OPEN_TASK">
            <summary>
            The task object could not be opened.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCHED_E_INVALID_TASK">
            <summary>
            The object is either an invalid task object or is not a task object.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCHED_E_ACCOUNT_INFORMATION_NOT_SET">
            <summary>
            No account information could be found in the Task Scheduler security database for the task indicated.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCHED_E_ACCOUNT_NAME_NOT_FOUND">
            <summary>
            Unable to establish existence of the account specified.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCHED_E_ACCOUNT_DBASE_CORRUPT">
            <summary>
            Corruption was detected in the Task Scheduler security database; the database has been reset.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCHED_E_NO_SECURITY_SERVICES">
            <summary>
            Task Scheduler security services are available only on Windows NT.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCHED_E_UNKNOWN_OBJECT_VERSION">
            <summary>
            The task object version is either unsupported or invalid.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCHED_E_UNSUPPORTED_ACCOUNT_OPTION">
            <summary>
            The task has been configured with an unsupported combination of account settings and run time options.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCHED_E_SERVICE_NOT_RUNNING">
            <summary>
            The Task Scheduler Service is not running.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_CLASS_CREATE_FAILED">
            <summary>
            Attempt to create a class object failed
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_SCM_ERROR">
            <summary>
            OLE service could not bind object
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_SCM_RPC_FAILURE">
            <summary>
            RPC communication failed with OLE service
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_BAD_PATH">
            <summary>
            Bad path to object
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_SERVER_EXEC_FAILURE">
            <summary>
            Server execution failed
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_OBJSRV_RPC_FAILURE">
            <summary>
            OLE service could not communicate with the object server
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MK_E_NO_NORMALIZED">
            <summary>
            Moniker path could not be normalized
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_E_SERVER_STOPPING">
            <summary>
            Object server is stopping when OLE service contacts it
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MEM_E_INVALID_ROOT">
            <summary>
            An invalid root block pointer was specified
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MEM_E_INVALID_LINK">
            <summary>
            An allocation chain contained an invalid link pointer
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MEM_E_INVALID_SIZE">
            <summary>
            The requested allocation size was too large
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_S_NOTALLINTERFACES">
            <summary>
            Not all the requested interfaces were available
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CO_S_MACHINENAMENOTFOUND">
            <summary>
            The specified machine name was not found in the cache.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.ERROR_AUDITING_DISABLED">
            <summary>
            The specified event is currently not being audited.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.ERROR_ALL_SIDS_FILTERED">
            <summary>
            The SID filtering operation removed all SIDs.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_BAD_UID">
            <summary>
            Bad UID.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_BAD_HASH">
            <summary>
            Bad Hash.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_BAD_KEY">
            <summary>
            Bad Key.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_BAD_LEN">
            <summary>
            Bad Length.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_BAD_DATA">
            <summary>
            Bad Data.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_BAD_SIGNATURE">
            <summary>
            Invalid Signature.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_BAD_VER">
            <summary>
            Bad Version of provider.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_BAD_ALGID">
            <summary>
            Invalid algorithm specified.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_BAD_FLAGS">
            <summary>
            Invalid flags specified.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_BAD_TYPE">
            <summary>
            Invalid type specified.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_BAD_KEY_STATE">
            <summary>
            Key not valid for use in specified state.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_BAD_HASH_STATE">
            <summary>
            Hash not valid for use in specified state.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_NO_KEY">
            <summary>
            Key does not exist.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_NO_MEMORY">
            <summary>
            Insufficient memory available for the operation.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_EXISTS">
            <summary>
            Object already exists.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_PERM">
            <summary>
            Access denied.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_NOT_FOUND">
            <summary>
            Object was not found.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_DOUBLE_ENCRYPT">
            <summary>
            Data already encrypted.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_BAD_PROVIDER">
            <summary>
            Invalid provider specified.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_BAD_PROV_TYPE">
            <summary>
            Invalid provider type specified.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_BAD_PUBLIC_KEY">
            <summary>
            Provider's public key is invalid.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_BAD_KEYSET">
            <summary>
            Keyset does not exist
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_PROV_TYPE_NOT_DEF">
            <summary>
            Provider type not defined.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_PROV_TYPE_ENTRY_BAD">
            <summary>
            Provider type as registered is invalid.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_KEYSET_NOT_DEF">
            <summary>
            The keyset is not defined.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_KEYSET_ENTRY_BAD">
            <summary>
            Keyset as registered is invalid.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_PROV_TYPE_NO_MATCH">
            <summary>
            Provider type does not match registered value.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_SIGNATURE_FILE_BAD">
            <summary>
            The digital signature file is corrupt.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_PROVIDER_DLL_FAIL">
            <summary>
            Provider DLL failed to initialize correctly.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_PROV_DLL_NOT_FOUND">
            <summary>
            Provider DLL could not be found.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_BAD_KEYSET_PARAM">
            <summary>
            The Keyset parameter is invalid.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_FAIL">
            <summary>
            An internal error occurred.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_SYS_ERR">
            <summary>
            A base error occurred.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_SILENT_CONTEXT">
            <summary>
            Provider could not perform the action since the context was acquired as silent.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_TOKEN_KEYSET_STORAGE_FULL">
            <summary>
            The security token does not have storage space available for an additional container.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_TEMPORARY_PROFILE">
            <summary>
            The profile for the user is a temporary profile.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.NTE_FIXEDPARAMETER">
            <summary>
            The key parameters could not be set because the CSP uses fixed parameters.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_INSUFFICIENT_MEMORY">
            <summary>
            Not enough memory is available to complete this request
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_INVALID_HANDLE">
            <summary>
            The handle specified is invalid
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_UNSUPPORTED_FUNCTION">
            <summary>
            The function requested is not supported
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_TARGET_UNKNOWN">
            <summary>
            The specified target is unknown or unreachable
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_INTERNAL_ERROR">
            <summary>
            The Local Security Authority cannot be contacted
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_SECPKG_NOT_FOUND">
            <summary>
            The requested security package does not exist
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_NOT_OWNER">
            <summary>
            The caller is not the owner of the desired credentials
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_CANNOT_INSTALL">
            <summary>
            The security package failed to initialize, and cannot be installed
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_INVALID_TOKEN">
            <summary>
            The token supplied to the function is invalid
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_CANNOT_PACK">
            <summary>
            The security package is not able to marshall the logon buffer, so the logon attempt has failed
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_QOP_NOT_SUPPORTED">
            <summary>
            The per-message Quality of Protection is not supported by the security package
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_NO_IMPERSONATION">
            <summary>
            The security context does not allow impersonation of the client
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_LOGON_DENIED">
            <summary>
            The logon attempt failed
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_UNKNOWN_CREDENTIALS">
            <summary>
            The credentials supplied to the package were not recognized
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_NO_CREDENTIALS">
            <summary>
            No credentials are available in the security package
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_MESSAGE_ALTERED">
            <summary>
            The message or signature supplied for verification has been altered
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_OUT_OF_SEQUENCE">
            <summary>
            The message supplied for verification is out of sequence
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_NO_AUTHENTICATING_AUTHORITY">
            <summary>
            No authority could be contacted for authentication.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_I_CONTINUE_NEEDED">
            <summary>
            The function completed successfully, but must be called again to complete the context
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_I_COMPLETE_NEEDED">
            <summary>
            The function completed successfully, but CompleteToken must be called
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_I_COMPLETE_AND_CONTINUE">
            <summary>
            The function completed successfully, but both CompleteToken and this function must be called to complete the context
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_I_LOCAL_LOGON">
            <summary>
            The logon was completed, but no network authority was available. The logon was made using locally known information
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_BAD_PKGID">
            <summary>
            The requested security package does not exist
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_CONTEXT_EXPIRED">
            <summary>
            The context has expired and can no longer be used.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_I_CONTEXT_EXPIRED">
            <summary>
            The context has expired and can no longer be used.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_INCOMPLETE_MESSAGE">
            <summary>
            The supplied message is incomplete.  The signature was not verified.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_INCOMPLETE_CREDENTIALS">
            <summary>
            The credentials supplied were not complete, and could not be verified. The context could not be initialized.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_BUFFER_TOO_SMALL">
            <summary>
            The buffers supplied to a function was too small.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_I_INCOMPLETE_CREDENTIALS">
            <summary>
            The credentials supplied were not complete, and could not be verified. Additional information can be returned from the context.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_I_RENEGOTIATE">
            <summary>
            The context data must be renegotiated with the peer.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_WRONG_PRINCIPAL">
            <summary>
            The target principal name is incorrect.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_I_NO_LSA_CONTEXT">
            <summary>
            There is no LSA mode context associated with this context.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_TIME_SKEW">
            <summary>
            The clocks on the client and server machines are skewed.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_UNTRUSTED_ROOT">
            <summary>
            The certificate chain was issued by an authority that is not trusted.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_ILLEGAL_MESSAGE">
            <summary>
            The message received was unexpected or badly formatted.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_CERT_UNKNOWN">
            <summary>
            An unknown error occurred while processing the certificate.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_CERT_EXPIRED">
            <summary>
            The received certificate has expired.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_ENCRYPT_FAILURE">
            <summary>
            The specified data could not be encrypted.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_DECRYPT_FAILURE">
            <summary>
            The specified data could not be decrypted.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_ALGORITHM_MISMATCH">
            <summary>
            The client and server cannot communicate, because they do not possess a common algorithm.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_SECURITY_QOS_FAILED">
            <summary>
            The security context could not be established due to a failure in the requested quality of service (e.g. mutual authentication or delegation).
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_UNFINISHED_CONTEXT_DELETED">
            <summary>
            A security context was deleted before the context was completed.  This is considered a logon failure.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_NO_TGT_REPLY">
            <summary>
            The client is trying to negotiate a context and the server requires user-to-user but didn't send a TGT reply.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_NO_IP_ADDRESSES">
            <summary>
            Unable to accomplish the requested task because the local machine does not have any IP addresses.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_WRONG_CREDENTIAL_HANDLE">
            <summary>
            The supplied credential handle does not match the credential associated with the security context.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_CRYPTO_SYSTEM_INVALID">
            <summary>
            The crypto system or checksum function is invalid because a required function is unavailable.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_MAX_REFERRALS_EXCEEDED">
            <summary>
            The number of maximum ticket referrals has been exceeded.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_MUST_BE_KDC">
            <summary>
            The local machine must be a Kerberos KDC (domain controller) and it is not.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_STRONG_CRYPTO_NOT_SUPPORTED">
            <summary>
            The other end of the security negotiation is requires strong crypto but it is not supported on the local machine.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_TOO_MANY_PRINCIPALS">
            <summary>
            The KDC reply contained more than one principal name.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_NO_PA_DATA">
            <summary>
            Expected to find PA data for a hint of what etype to use, but it was not found.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_PKINIT_NAME_MISMATCH">
            <summary>
            The client certificate does not contain a valid UPN, or does not match the client name in the logon request.  Please contact your administrator.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_SMARTCARD_LOGON_REQUIRED">
            <summary>
            Smartcard logon is required and was not used.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_SHUTDOWN_IN_PROGRESS">
            <summary>
            A system shutdown is in progress.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_KDC_INVALID_REQUEST">
            <summary>
            An invalid request was sent to the KDC.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_KDC_UNABLE_TO_REFER">
            <summary>
            The KDC was unable to generate a referral for the service requested.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_KDC_UNKNOWN_ETYPE">
            <summary>
            The encryption type requested is not supported by the KDC.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_UNSUPPORTED_PREAUTH">
            <summary>
            An unsupported preauthentication mechanism was presented to the kerberos package.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_DELEGATION_REQUIRED">
            <summary>
            The requested operation cannot be completed.  The computer must be trusted for delegation and the current user account must be configured to allow delegation.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_BAD_BINDINGS">
            <summary>
            Client's supplied SSPI channel bindings were incorrect.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_MULTIPLE_ACCOUNTS">
            <summary>
            The received certificate was mapped to multiple accounts.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_NO_KERB_KEY">
            <summary>
            SEC_E_NO_KERB_KEY
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_CERT_WRONG_USAGE">
            <summary>
            The certificate is not valid for the requested usage.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_DOWNGRADE_DETECTED">
            <summary>
            The system detected a possible attempt to compromise security.  Please ensure that you can contact the server that authenticated you.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_SMARTCARD_CERT_REVOKED">
            <summary>
            The smartcard certificate used for authentication has been revoked. Please contact your system administrator.  There may be additional information in the event log.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_ISSUING_CA_UNTRUSTED">
            <summary>
            An untrusted certificate authority was detected While processing the smartcard certificate used for authentication.  Please contact your system administrator.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_REVOCATION_OFFLINE_C">
            <summary>
            The revocation status of the smartcard certificate used for authentication could not be determined. Please contact your system administrator.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_PKINIT_CLIENT_FAILURE">
            <summary>
            The smartcard certificate used for authentication was not trusted.  Please contact your system administrator.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_SMARTCARD_CERT_EXPIRED">
            <summary>
            The smartcard certificate used for authentication has expired.  Please contact your system administrator.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_NO_S4U_PROT_SUPPORT">
            <summary>
            The Kerberos subsystem encountered an error.  A service for user protocol request was made against a domain controller which does not support service for user.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SEC_E_CROSSREALM_DELEGATION_FAILURE">
            <summary>
            An attempt was made by this server to make a Kerberos constrained delegation request for a target outside of the server's realm.  This is not supported, and indicates a misconfiguration on this server's allowed to delegate to list.  Please contact your administrator.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_MSG_ERROR">
            <summary>
            An error occurred while performing an operation on a cryptographic message.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_UNKNOWN_ALGO">
            <summary>
            Unknown cryptographic algorithm.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_OID_FORMAT">
            <summary>
            The object identifier is poorly formatted.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_INVALID_MSG_TYPE">
            <summary>
            Invalid cryptographic message type.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_UNEXPECTED_ENCODING">
            <summary>
            Unexpected cryptographic message encoding.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_AUTH_ATTR_MISSING">
            <summary>
            The cryptographic message does not contain an expected authenticated attribute.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_HASH_VALUE">
            <summary>
            The hash value is not correct.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_INVALID_INDEX">
            <summary>
            The index value is not valid.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_ALREADY_DECRYPTED">
            <summary>
            The content of the cryptographic message has already been decrypted.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_NOT_DECRYPTED">
            <summary>
            The content of the cryptographic message has not been decrypted yet.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_RECIPIENT_NOT_FOUND">
            <summary>
            The enveloped-data message does not contain the specified recipient.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_CONTROL_TYPE">
            <summary>
            Invalid control type.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_ISSUER_SERIALNUMBER">
            <summary>
            Invalid issuer and/or serial number.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_SIGNER_NOT_FOUND">
            <summary>
            Cannot find the original signer.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_ATTRIBUTES_MISSING">
            <summary>
            The cryptographic message does not contain all of the requested attributes.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_STREAM_MSG_NOT_READY">
            <summary>
            The streamed cryptographic message is not ready to return data.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_STREAM_INSUFFICIENT_DATA">
            <summary>
            The streamed cryptographic message requires more data to complete the decode operation.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_I_NEW_PROTECTION_REQUIRED">
            <summary>
            The protected data needs to be re-protected.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_BAD_LEN">
            <summary>
            The length specified for the output data was insufficient.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_BAD_ENCODE">
            <summary>
            An error occurred during encode or decode operation.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_FILE_ERROR">
            <summary>
            An error occurred while reading or writing to a file.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_NOT_FOUND">
            <summary>
            Cannot find object or property.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_EXISTS">
            <summary>
            The object or property already exists.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_NO_PROVIDER">
            <summary>
            No provider was specified for the store or object.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_SELF_SIGNED">
            <summary>
            The specified certificate is self signed.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_DELETED_PREV">
            <summary>
            The previous certificate or CRL context was deleted.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_NO_MATCH">
            <summary>
            Cannot find the requested object.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_UNEXPECTED_MSG_TYPE">
            <summary>
            The certificate does not have a property that references a private key.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_NO_KEY_PROPERTY">
            <summary>
            Cannot find the certificate and private key for decryption.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_NO_DECRYPT_CERT">
            <summary>
            Cannot find the certificate and private key to use for decryption.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_BAD_MSG">
            <summary>
            Not a cryptographic message or the cryptographic message is not formatted correctly.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_NO_SIGNER">
            <summary>
            The signed cryptographic message does not have a signer for the specified signer index.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_PENDING_CLOSE">
            <summary>
            Final closure is pending until additional frees or closes.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_REVOKED">
            <summary>
            The certificate is revoked.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_NO_REVOCATION_DLL">
            <summary>
            No Dll or exported function was found to verify revocation.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_NO_REVOCATION_CHECK">
            <summary>
            The revocation function was unable to check revocation for the certificate.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_REVOCATION_OFFLINE">
            <summary>
            The revocation function was unable to check revocation because the revocation server was offline.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_NOT_IN_REVOCATION_DATABASE">
            <summary>
            The certificate is not in the revocation server's database.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_INVALID_NUMERIC_STRING">
            <summary>
            The string contains a non-numeric character.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_INVALID_PRINTABLE_STRING">
            <summary>
            The string contains a non-printable character.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_INVALID_IA5_STRING">
            <summary>
            The string contains a character not in the 7 bit ASCII character set.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_INVALID_X500_STRING">
            <summary>
            The string contains an invalid X500 name attribute key, oid, value or delimiter.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_NOT_CHAR_STRING">
            <summary>
            The dwValueType for the CERT_NAME_VALUE is not one of the character strings.  Most likely it is either a CERT_RDN_ENCODED_BLOB or CERT_TDN_OCTED_STRING.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_FILERESIZED">
            <summary>
            The Put operation can not continue.  The file needs to be resized.  However, there is already a signature present.  A complete signing operation must be done.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_SECURITY_SETTINGS">
            <summary>
            The cryptographic operation failed due to a local security option setting.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_NO_VERIFY_USAGE_DLL">
            <summary>
            No DLL or exported function was found to verify subject usage.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_NO_VERIFY_USAGE_CHECK">
            <summary>
            The called function was unable to do a usage check on the subject.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_VERIFY_USAGE_OFFLINE">
            <summary>
            Since the server was offline, the called function was unable to complete the usage check.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_NOT_IN_CTL">
            <summary>
            The subject was not found in a Certificate Trust List (CTL).
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_NO_TRUSTED_SIGNER">
            <summary>
            None of the signers of the cryptographic message or certificate trust list is trusted.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_MISSING_PUBKEY_PARA">
            <summary>
            The public key's algorithm parameters are missing.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_OSS_ERROR">
            <summary>
            OSS Certificate encode/decode error code base
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_MORE_BUF">
            <summary>
            OSS ASN.1 Error: Output Buffer is too small.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_NEGATIVE_UINTEGER">
            <summary>
            OSS ASN.1 Error: Signed integer is encoded as a unsigned integer.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_PDU_RANGE">
            <summary>
            OSS ASN.1 Error: Unknown ASN.1 data type.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_MORE_INPUT">
            <summary>
            OSS ASN.1 Error: Output buffer is too small, the decoded data has been truncated.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_DATA_ERROR">
            <summary>
            OSS ASN.1 Error: Invalid data.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_BAD_ARG">
            <summary>
            OSS ASN.1 Error: Invalid argument.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_BAD_VERSION">
            <summary>
            OSS ASN.1 Error: Encode/Decode version mismatch.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_OUT_MEMORY">
            <summary>
            OSS ASN.1 Error: Out of memory.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_PDU_MISMATCH">
            <summary>
            OSS ASN.1 Error: Encode/Decode Error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_LIMITED">
            <summary>
            OSS ASN.1 Error: Internal Error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_BAD_PTR">
            <summary>
            OSS ASN.1 Error: Invalid data.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_BAD_TIME">
            <summary>
            OSS ASN.1 Error: Invalid data.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_INDEFINITE_NOT_SUPPORTED">
            <summary>
            OSS ASN.1 Error: Unsupported BER indefinite-length encoding.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_MEM_ERROR">
            <summary>
            OSS ASN.1 Error: Access violation.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_BAD_TABLE">
            <summary>
            OSS ASN.1 Error: Invalid data.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_TOO_LONG">
            <summary>
            OSS ASN.1 Error: Invalid data.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_CONSTRAINT_VIOLATED">
            <summary>
            OSS ASN.1 Error: Invalid data.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_FATAL_ERROR">
            <summary>
            OSS ASN.1 Error: Internal Error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_ACCESS_SERIALIZATION_ERROR">
            <summary>
            OSS ASN.1 Error: Multi-threading conflict.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_NULL_TBL">
            <summary>
            OSS ASN.1 Error: Invalid data.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_NULL_FCN">
            <summary>
            OSS ASN.1 Error: Invalid data.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_BAD_ENCRULES">
            <summary>
            OSS ASN.1 Error: Invalid data.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_UNAVAIL_ENCRULES">
            <summary>
            OSS ASN.1 Error: Encode/Decode function not implemented.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_CANT_OPEN_TRACE_WINDOW">
            <summary>
            OSS ASN.1 Error: Trace file error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_UNIMPLEMENTED">
            <summary>
            OSS ASN.1 Error: Function not implemented.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_OID_DLL_NOT_LINKED">
            <summary>
            OSS ASN.1 Error: Program link error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_CANT_OPEN_TRACE_FILE">
            <summary>
            OSS ASN.1 Error: Trace file error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_TRACE_FILE_ALREADY_OPEN">
            <summary>
            OSS ASN.1 Error: Trace file error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_TABLE_MISMATCH">
            <summary>
            OSS ASN.1 Error: Invalid data.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_TYPE_NOT_SUPPORTED">
            <summary>
            OSS ASN.1 Error: Invalid data.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_REAL_DLL_NOT_LINKED">
            <summary>
            OSS ASN.1 Error: Program link error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_REAL_CODE_NOT_LINKED">
            <summary>
            OSS ASN.1 Error: Program link error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_OUT_OF_RANGE">
            <summary>
            OSS ASN.1 Error: Program link error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_COPIER_DLL_NOT_LINKED">
            <summary>
            OSS ASN.1 Error: Program link error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_CONSTRAINT_DLL_NOT_LINKED">
            <summary>
            OSS ASN.1 Error: Program link error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_COMPARATOR_DLL_NOT_LINKED">
            <summary>
            OSS ASN.1 Error: Program link error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_COMPARATOR_CODE_NOT_LINKED">
            <summary>
            OSS ASN.1 Error: Program link error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_MEM_MGR_DLL_NOT_LINKED">
            <summary>
            OSS ASN.1 Error: Program link error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_PDV_DLL_NOT_LINKED">
            <summary>
            OSS ASN.1 Error: Program link error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_PDV_CODE_NOT_LINKED">
            <summary>
            OSS ASN.1 Error: Program link error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_API_DLL_NOT_LINKED">
            <summary>
            OSS ASN.1 Error: Program link error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_BERDER_DLL_NOT_LINKED">
            <summary>
            OSS ASN.1 Error: Program link error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_PER_DLL_NOT_LINKED">
            <summary>
            OSS ASN.1 Error: Program link error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_OPEN_TYPE_ERROR">
            <summary>
            OSS ASN.1 Error: Program link error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_MUTEX_NOT_CREATED">
            <summary>
            OSS ASN.1 Error: System resource error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.OSS_CANT_CLOSE_TRACE_FILE">
            <summary>
            OSS ASN.1 Error: Trace file error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_ASN1_ERROR">
            <summary>
            ASN1 Certificate encode/decode error code base.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_ASN1_INTERNAL">
            <summary>
            ASN1 internal encode or decode error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_ASN1_EOD">
            <summary>
            ASN1 unexpected end of data.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_ASN1_CORRUPT">
            <summary>
            ASN1 corrupted data.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_ASN1_LARGE">
            <summary>
            ASN1 value too large.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_ASN1_CONSTRAINT">
            <summary>
            ASN1 constraint violated.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_ASN1_MEMORY">
            <summary>
            ASN1 out of memory.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_ASN1_OVERFLOW">
            <summary>
            ASN1 buffer overflow.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_ASN1_BADPDU">
            <summary>
            ASN1 function not supported for this PDU.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_ASN1_BADARGS">
            <summary>
            ASN1 bad arguments to function call.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_ASN1_BADREAL">
            <summary>
            ASN1 bad real value.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_ASN1_BADTAG">
            <summary>
            ASN1 bad tag value met.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_ASN1_CHOICE">
            <summary>
            ASN1 bad choice value.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_ASN1_RULE">
            <summary>
            ASN1 bad encoding rule.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_ASN1_UTF8">
            <summary>
            ASN1 bad unicode (UTF8).
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_ASN1_PDU_TYPE">
            <summary>
            ASN1 bad PDU type.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_ASN1_NYI">
            <summary>
            ASN1 not yet implemented.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_ASN1_EXTENDED">
            <summary>
            ASN1 skipped unknown extension(s).
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CRYPT_E_ASN1_NOEOD">
            <summary>
            ASN1 end of data expected
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_BAD_REQUESTSUBJECT">
            <summary>
            The request subject name is invalid or too long.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_NO_REQUEST">
            <summary>
            The request does not exist.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_BAD_REQUESTSTATUS">
            <summary>
            The request's current status does not allow this operation.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_PROPERTY_EMPTY">
            <summary>
            The requested property value is empty.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_INVALID_CA_CERTIFICATE">
            <summary>
            The certification authority's certificate contains invalid data.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_SERVER_SUSPENDED">
            <summary>
            Certificate service has been suspended for a database restore operation.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_ENCODING_LENGTH">
            <summary>
            The certificate contains an encoded length that is potentially incompatible with older enrollment software.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_ROLECONFLICT">
            <summary>
            The operation is denied. The user has multiple roles assigned and the certification authority is configured to enforce role separation.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_RESTRICTEDOFFICER">
            <summary>
            The operation is denied. It can only be performed by a certificate manager that is allowed to manage certificates for the current requester.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_KEY_ARCHIVAL_NOT_CONFIGURED">
            <summary>
            Cannot archive private key.  The certification authority is not configured for key archival.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_NO_VALID_KRA">
            <summary>
            Cannot archive private key.  The certification authority could not verify one or more key recovery certificates.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_BAD_REQUEST_KEY_ARCHIVAL">
            <summary>
            The request is incorrectly formatted.  The encrypted private key must be in an unauthenticated attribute in an outermost signature.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_NO_CAADMIN_DEFINED">
            <summary>
            At least one security principal must have the permission to manage this CA.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_BAD_RENEWAL_CERT_ATTRIBUTE">
            <summary>
            The request contains an invalid renewal certificate attribute.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_NO_DB_SESSIONS">
            <summary>
            An attempt was made to open a Certification Authority database session, but there are already too many active sessions.  The server may need to be configured to allow additional sessions.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_ALIGNMENT_FAULT">
            <summary>
            A memory reference caused a data alignment fault.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_ENROLL_DENIED">
            <summary>
            The permissions on this certification authority do not allow the current user to enroll for certificates.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_TEMPLATE_DENIED">
            <summary>
            The permissions on the certificate template do not allow the current user to enroll for this type of certificate.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_DOWNLEVEL_DC_SSL_OR_UPGRADE">
            <summary>
            The contacted domain controller cannot support signed LDAP traffic.  Update the domain controller or configure Certificate Services to use SSL for Active Directory access.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_UNSUPPORTED_CERT_TYPE">
            <summary>
            The requested certificate template is not supported by this CA.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_NO_CERT_TYPE">
            <summary>
            The request contains no certificate template information.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_TEMPLATE_CONFLICT">
            <summary>
            The request contains conflicting template information.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_SUBJECT_ALT_NAME_REQUIRED">
            <summary>
            The request is missing a required Subject Alternate name extension.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_ARCHIVED_KEY_REQUIRED">
            <summary>
            The request is missing a required private key for archival by the server.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_SMIME_REQUIRED">
            <summary>
            The request is missing a required SMIME capabilities extension.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_BAD_RENEWAL_SUBJECT">
            <summary>
            The request was made on behalf of a subject other than the caller.  The certificate template must be configured to require at least one signature to authorize the request.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_BAD_TEMPLATE_VERSION">
            <summary>
            The request template version is newer than the supported template version.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_TEMPLATE_POLICY_REQUIRED">
            <summary>
            The template is missing a required signature policy attribute.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_SIGNATURE_POLICY_REQUIRED">
            <summary>
            The request is missing required signature policy information.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_SIGNATURE_COUNT">
            <summary>
            The request is missing one or more required signatures.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_SIGNATURE_REJECTED">
            <summary>
            One or more signatures did not include the required application or issuance policies.  The request is missing one or more required valid signatures.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_ISSUANCE_POLICY_REQUIRED">
            <summary>
            The request is missing one or more required signature issuance policies.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_SUBJECT_UPN_REQUIRED">
            <summary>
            The UPN is unavailable and cannot be added to the Subject Alternate name.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_SUBJECT_DIRECTORY_GUID_REQUIRED">
            <summary>
            The Active Directory GUID is unavailable and cannot be added to the Subject Alternate name.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_SUBJECT_DNS_REQUIRED">
            <summary>
            The DNS name is unavailable and cannot be added to the Subject Alternate name.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_ARCHIVED_KEY_UNEXPECTED">
            <summary>
            The request includes a private key for archival by the server, but key archival is not enabled for the specified certificate template.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_KEY_LENGTH">
            <summary>
            The public key does not meet the minimum size required by the specified certificate template.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_SUBJECT_EMAIL_REQUIRED">
            <summary>
            The EMail name is unavailable and cannot be added to the Subject or Subject Alternate name.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_UNKNOWN_CERT_TYPE">
            <summary>
            One or more certificate templates to be enabled on this certification authority could not be found.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERTSRV_E_CERT_TYPE_OVERLAP">
            <summary>
            The certificate template renewal period is longer than the certificate validity period.  The template should be reconfigured or the CA certificate renewed.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XENROLL_E_KEY_NOT_EXPORTABLE">
            <summary>
            The key is not exportable.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XENROLL_E_CANNOT_ADD_ROOT_CERT">
            <summary>
            You cannot add the root CA certificate into your local store.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XENROLL_E_RESPONSE_KA_HASH_NOT_FOUND">
            <summary>
            The key archival hash attribute was not found in the response.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XENROLL_E_RESPONSE_UNEXPECTED_KA_HASH">
            <summary>
            An unexpected key archival hash attribute was found in the response.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XENROLL_E_RESPONSE_KA_HASH_MISMATCH">
            <summary>
            There is a key archival hash mismatch between the request and the response.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.XENROLL_E_KEYSPEC_SMIME_MISMATCH">
            <summary>
            Signing certificate cannot include SMIME extension.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TRUST_E_SYSTEM_ERROR">
            <summary>
            A system-level error occurred while verifying trust.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TRUST_E_NO_SIGNER_CERT">
            <summary>
            The certificate for the signer of the message is invalid or not found.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TRUST_E_COUNTER_SIGNER">
            <summary>
            One of the counter signatures was invalid.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TRUST_E_CERT_SIGNATURE">
            <summary>
            The signature of the certificate can not be verified.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TRUST_E_TIME_STAMP">
            <summary>
            The timestamp signature and/or certificate could not be verified or is malformed.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TRUST_E_BAD_DIGEST">
            <summary>
            The digital signature of the object did not verify.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TRUST_E_BASIC_CONSTRAINTS">
            <summary>
            A certificate's basic constraint extension has not been observed.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TRUST_E_FINANCIAL_CRITERIA">
            <summary>
            The certificate does not meet or contain the Authenticode financial extensions.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MSSIPOTF_E_OUTOFMEMRANGE">
            <summary>
            Tried to reference a part of the file outside the proper range.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MSSIPOTF_E_CANTGETOBJECT">
            <summary>
            Could not retrieve an object from the file.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MSSIPOTF_E_NOHEADTABLE">
            <summary>
            Could not find the head table in the file.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MSSIPOTF_E_BAD_MAGICNUMBER">
            <summary>
            The magic number in the head table is incorrect.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MSSIPOTF_E_BAD_OFFSET_TABLE">
            <summary>
            The offset table has incorrect values.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MSSIPOTF_E_TABLE_TAGORDER">
            <summary>
            Duplicate table tags or tags out of alphabetical order.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MSSIPOTF_E_TABLE_LONGWORD">
            <summary>
            A table does not start on a long word boundary.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MSSIPOTF_E_BAD_FIRST_TABLE_PLACEMENT">
            <summary>
            First table does not appear after header information.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MSSIPOTF_E_TABLES_OVERLAP">
            <summary>
            Two or more tables overlap.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MSSIPOTF_E_TABLE_PADBYTES">
            <summary>
            Too many pad bytes between tables or pad bytes are not 0.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MSSIPOTF_E_FILETOOSMALL">
            <summary>
            File is too small to contain the last table.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MSSIPOTF_E_TABLE_CHECKSUM">
            <summary>
            A table checksum is incorrect.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MSSIPOTF_E_FILE_CHECKSUM">
            <summary>
            The file checksum is incorrect.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MSSIPOTF_E_FAILED_POLICY">
            <summary>
            The signature does not have the correct attributes for the policy.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MSSIPOTF_E_FAILED_HINTS_CHECK">
            <summary>
            The file did not pass the hints check.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MSSIPOTF_E_NOT_OPENTYPE">
            <summary>
            The file is not an OpenType file.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MSSIPOTF_E_FILE">
            <summary>
            Failed on a file operation (open, map, read, write).
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MSSIPOTF_E_CRYPT">
            <summary>
            A call to a CryptoAPI function failed.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MSSIPOTF_E_BADVERSION">
            <summary>
            There is a bad version number in the file.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MSSIPOTF_E_DSIG_STRUCTURE">
            <summary>
            The structure of the DSIG table is incorrect.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MSSIPOTF_E_PCONST_CHECK">
            <summary>
            A check failed in a partially constant table.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MSSIPOTF_E_STRUCTURE">
            <summary>
            Some kind of structural error.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TRUST_E_PROVIDER_UNKNOWN">
            <summary>
            Unknown trust provider.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TRUST_E_ACTION_UNKNOWN">
            <summary>
            The trust verification action specified is not supported by the specified trust provider.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TRUST_E_SUBJECT_FORM_UNKNOWN">
            <summary>
            The form specified for the subject is not one supported or known by the specified trust provider.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TRUST_E_SUBJECT_NOT_TRUSTED">
            <summary>
            The subject is not trusted for the specified action.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DIGSIG_E_ENCODE">
            <summary>
            Error due to problem in ASN.1 encoding process.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DIGSIG_E_DECODE">
            <summary>
            Error due to problem in ASN.1 decoding process.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DIGSIG_E_EXTENSIBILITY">
            <summary>
            Reading / writing Extensions where Attributes are appropriate, and visa versa.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.DIGSIG_E_CRYPTO">
            <summary>
            Unspecified cryptographic failure.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.PERSIST_E_SIZEDEFINITE">
            <summary>
            The size of the data could not be determined.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.PERSIST_E_SIZEINDEFINITE">
            <summary>
            The size of the indefinite-sized data could not be determined.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.PERSIST_E_NOTSELFSIZING">
            <summary>
            This object does not read and write self-sizing data.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TRUST_E_NOSIGNATURE">
            <summary>
            No signature was present in the subject.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERT_E_EXPIRED">
            <summary>
            A required certificate is not within its validity period when verifying against the current system clock or the timestamp in the signed file.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERT_E_VALIDITYPERIODNESTING">
            <summary>
            The validity periods of the certification chain do not nest correctly.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERT_E_ROLE">
            <summary>
            A certificate that can only be used as an end-entity is being used as a CA or visa versa.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERT_E_PATHLENCONST">
            <summary>
            A path length constraint in the certification chain has been violated.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERT_E_CRITICAL">
            <summary>
            A certificate contains an unknown extension that is marked 'critical'.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERT_E_PURPOSE">
            <summary>
            A certificate being used for a purpose other than the ones specified by its CA.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERT_E_ISSUERCHAINING">
            <summary>
            A parent of a given certificate in fact did not issue that child certificate.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERT_E_MALFORMED">
            <summary>
            A certificate is missing or has an empty value for an important field, such as a subject or issuer name.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERT_E_UNTRUSTEDROOT">
            <summary>
            A certificate chain processed, but terminated in a root certificate which is not trusted by the trust provider.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERT_E_CHAINING">
            <summary>
            A certificate chain could not be built to a trusted root authority.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TRUST_E_FAIL">
            <summary>
            Generic trust failure.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERT_E_REVOKED">
            <summary>
            A certificate was explicitly revoked by its issuer.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERT_E_UNTRUSTEDTESTROOT">
            <summary>
            The certification path terminates with the test root which is not trusted with the current policy settings.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERT_E_REVOCATION_FAILURE">
            <summary>
            The revocation process could not continue - the certificate(s) could not be checked.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERT_E_CN_NO_MATCH">
            <summary>
            The certificate's CN name does not match the passed value.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERT_E_WRONG_USAGE">
            <summary>
            The certificate is not valid for the requested usage.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.TRUST_E_EXPLICIT_DISTRUST">
            <summary>
            The certificate was explicitly marked as untrusted by the user.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERT_E_UNTRUSTEDCA">
            <summary>
            A certification chain processed correctly, but one of the CA certificates is not trusted by the policy provider.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERT_E_INVALID_POLICY">
            <summary>
            The certificate has invalid policy.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.CERT_E_INVALID_NAME">
            <summary>
            The certificate has an invalid name. The name is not included in the permitted list or is explicitly excluded.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_EXPECTED_SECTION_NAME">
            <summary>
            A non-empty line was encountered in the INF before the start of a section.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_BAD_SECTION_NAME_LINE">
            <summary>
            A section name marker in the INF is not complete, or does not exist on a line by itself.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_SECTION_NAME_TOO_LONG">
            <summary>
            An INF section was encountered whose name exceeds the maximum section name length.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_GENERAL_SYNTAX">
            <summary>
            The syntax of the INF is invalid.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_WRONG_INF_STYLE">
            <summary>
            The style of the INF is different than what was requested.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_SECTION_NOT_FOUND">
            <summary>
            The required section was not found in the INF.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_LINE_NOT_FOUND">
            <summary>
            The required line was not found in the INF.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_NO_BACKUP">
            <summary>
            The files affected by the installation of this file queue have not been backed up for uninstall.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_NO_ASSOCIATED_CLASS">
            <summary>
            The INF or the device information set or element does not have an associated install class.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_CLASS_MISMATCH">
            <summary>
            The INF or the device information set or element does not match the specified install class.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_DUPLICATE_FOUND">
            <summary>
            An existing device was found that is a duplicate of the device being manually installed.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_NO_DRIVER_SELECTED">
            <summary>
            There is no driver selected for the device information set or element.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_KEY_DOES_NOT_EXIST">
            <summary>
            The requested device registry key does not exist.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_INVALID_DEVINST_NAME">
            <summary>
            The device instance name is invalid.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_INVALID_CLASS">
            <summary>
            The install class is not present or is invalid.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_DEVINST_ALREADY_EXISTS">
            <summary>
            The device instance cannot be created because it already exists.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_DEVINFO_NOT_REGISTERED">
            <summary>
            The operation cannot be performed on a device information element that has not been registered.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_INVALID_REG_PROPERTY">
            <summary>
            The device property code is invalid.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_NO_INF">
            <summary>
            The INF from which a driver list is to be built does not exist.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_NO_SUCH_DEVINST">
            <summary>
            The device instance does not exist in the hardware tree.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_CANT_LOAD_CLASS_ICON">
            <summary>
            The icon representing this install class cannot be loaded.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_INVALID_CLASS_INSTALLER">
            <summary>
            The class installer registry entry is invalid.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_DI_DO_DEFAULT">
            <summary>
            The class installer has indicated that the default action should be performed for this installation request.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_DI_NOFILECOPY">
            <summary>
            The operation does not require any files to be copied.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_INVALID_HWPROFILE">
            <summary>
            The specified hardware profile does not exist.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_NO_DEVICE_SELECTED">
            <summary>
            There is no device information element currently selected for this device information set.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_DEVINFO_LIST_LOCKED">
            <summary>
            The operation cannot be performed because the device information set is locked.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_DEVINFO_DATA_LOCKED">
            <summary>
            The operation cannot be performed because the device information element is locked.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_DI_BAD_PATH">
            <summary>
            The specified path does not contain any applicable device INFs.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_NO_CLASSINSTALL_PARAMS">
            <summary>
            No class installer parameters have been set for the device information set or element.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_FILEQUEUE_LOCKED">
            <summary>
            The operation cannot be performed because the file queue is locked.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_BAD_SERVICE_INSTALLSECT">
            <summary>
            A service installation section in this INF is invalid.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_NO_CLASS_DRIVER_LIST">
            <summary>
            There is no class driver list for the device information element.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_NO_ASSOCIATED_SERVICE">
            <summary>
            The installation failed because a function driver was not specified for this device instance.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_NO_DEFAULT_DEVICE_INTERFACE">
            <summary>
            There is presently no default device interface designated for this interface class.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_DEVICE_INTERFACE_ACTIVE">
            <summary>
            The operation cannot be performed because the device interface is currently active.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_DEVICE_INTERFACE_REMOVED">
            <summary>
            The operation cannot be performed because the device interface has been removed from the system.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_BAD_INTERFACE_INSTALLSECT">
            <summary>
            An interface installation section in this INF is invalid.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_NO_SUCH_INTERFACE_CLASS">
            <summary>
            This interface class does not exist in the system.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_INVALID_REFERENCE_STRING">
            <summary>
            The reference string supplied for this interface device is invalid.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_INVALID_MACHINENAME">
            <summary>
            The specified machine name does not conform to UNC naming conventions.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_REMOTE_COMM_FAILURE">
            <summary>
            A general remote communication error occurred.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_MACHINE_UNAVAILABLE">
            <summary>
            The machine selected for remote communication is not available at this time.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_NO_CONFIGMGR_SERVICES">
            <summary>
            The Plug and Play service is not available on the remote machine.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_INVALID_PROPPAGE_PROVIDER">
            <summary>
            The property page provider registry entry is invalid.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_NO_SUCH_DEVICE_INTERFACE">
            <summary>
            The requested device interface is not present in the system.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_DI_POSTPROCESSING_REQUIRED">
            <summary>
            The device's co-installer has additional work to perform after installation is complete.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_INVALID_COINSTALLER">
            <summary>
            The device's co-installer is invalid.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_NO_COMPAT_DRIVERS">
            <summary>
            There are no compatible drivers for this device.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_NO_DEVICE_ICON">
            <summary>
            There is no icon that represents this device or device type.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_INVALID_INF_LOGCONFIG">
            <summary>
            A logical configuration specified in this INF is invalid.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_DI_DONT_INSTALL">
            <summary>
            The class installer has denied the request to install or upgrade this device.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_INVALID_FILTER_DRIVER">
            <summary>
            One of the filter drivers installed for this device is invalid.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_NON_WINDOWS_NT_DRIVER">
            <summary>
            The driver selected for this device does not support Windows XP.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_NON_WINDOWS_DRIVER">
            <summary>
            The driver selected for this device does not support Windows.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_NO_CATALOG_FOR_OEM_INF">
            <summary>
            The third-party INF does not contain digital signature information.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_DEVINSTALL_QUEUE_NONNATIVE">
            <summary>
            An invalid attempt was made to use a device installation file queue for verification of digital signatures relative to other platforms.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_NOT_DISABLEABLE">
            <summary>
            The device cannot be disabled.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_CANT_REMOVE_DEVINST">
            <summary>
            The device could not be dynamically removed.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_INVALID_TARGET">
            <summary>
            Cannot copy to specified target.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_DRIVER_NONNATIVE">
            <summary>
            Driver is not intended for this platform.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_IN_WOW64">
            <summary>
            Operation not allowed in WOW64.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_SET_SYSTEM_RESTORE_POINT">
            <summary>
            The operation involving unsigned file copying was rolled back, so that a system restore point could be set.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_INCORRECTLY_COPIED_INF">
            <summary>
            An INF was copied into the Windows INF directory in an improper manner.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_SCE_DISABLED">
            <summary>
            The Security Configuration Editor (SCE) APIs have been disabled on this Embedded product.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SPAPI_E_ERROR_NOT_INSTALLED">
            <summary>
            No installed components were detected.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_F_INTERNAL_ERROR">
            <summary>
            An internal consistency check failed.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_CANCELLED">
            <summary>
            The action was cancelled by an SCardCancel request.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_INVALID_HANDLE">
            <summary>
            The supplied handle was invalid.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_INVALID_PARAMETER">
            <summary>
            One or more of the supplied parameters could not be properly interpreted.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_INVALID_TARGET">
            <summary>
            Registry startup information is missing or invalid.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_NO_MEMORY">
            <summary>
            Not enough memory available to complete this command.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_F_WAITED_TOO_LONG">
            <summary>
            An internal consistency timer has expired.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_INSUFFICIENT_BUFFER">
            <summary>
            The data buffer to receive returned data is too small for the returned data.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_UNKNOWN_READER">
            <summary>
            The specified reader name is not recognized.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_TIMEOUT">
            <summary>
            The user-specified timeout value has expired.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_SHARING_VIOLATION">
            <summary>
            The smart card cannot be accessed because of other connections outstanding.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_NO_SMARTCARD">
            <summary>
            The operation requires a Smart Card, but no Smart Card is currently in the device.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_UNKNOWN_CARD">
            <summary>
            The specified smart card name is not recognized.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_CANT_DISPOSE">
            <summary>
            The system could not dispose of the media in the requested manner.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_PROTO_MISMATCH">
            <summary>
            The requested protocols are incompatible with the protocol currently in use with the smart card.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_NOT_READY">
            <summary>
            The reader or smart card is not ready to accept commands.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_INVALID_VALUE">
            <summary>
            One or more of the supplied parameters values could not be properly interpreted.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_SYSTEM_CANCELLED">
            <summary>
            The action was cancelled by the system, presumably to log off or shut down.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_F_COMM_ERROR">
            <summary>
            An internal communications error has been detected.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_F_UNKNOWN_ERROR">
            <summary>
            An internal error has been detected, but the source is unknown.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_INVALID_ATR">
            <summary>
            An ATR obtained from the registry is not a valid ATR string.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_NOT_TRANSACTED">
            <summary>
            An attempt was made to end a non-existent transaction.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_READER_UNAVAILABLE">
            <summary>
            The specified reader is not currently available for use.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_P_SHUTDOWN">
            <summary>
            The operation has been aborted to allow the server application to exit.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_PCI_TOO_SMALL">
            <summary>
            The PCI Receive buffer was too small.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_READER_UNSUPPORTED">
            <summary>
            The reader driver does not meet minimal requirements for support.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_DUPLICATE_READER">
            <summary>
            The reader driver did not produce a unique reader name.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_CARD_UNSUPPORTED">
            <summary>
            The smart card does not meet minimal requirements for support.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_NO_SERVICE">
            <summary>
            The Smart card resource manager is not running.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_SERVICE_STOPPED">
            <summary>
            The Smart card resource manager has shut down.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_UNEXPECTED">
            <summary>
            An unexpected card error has occurred.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_ICC_INSTALLATION">
            <summary>
            No Primary Provider can be found for the smart card.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_ICC_CREATEORDER">
            <summary>
            The requested order of object creation is not supported.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_UNSUPPORTED_FEATURE">
            <summary>
            This smart card does not support the requested feature.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_DIR_NOT_FOUND">
            <summary>
            The identified directory does not exist in the smart card.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_FILE_NOT_FOUND">
            <summary>
            The identified file does not exist in the smart card.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_NO_DIR">
            <summary>
            The supplied path does not represent a smart card directory.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_NO_FILE">
            <summary>
            The supplied path does not represent a smart card file.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_NO_ACCESS">
            <summary>
            Access is denied to this file.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_WRITE_TOO_MANY">
            <summary>
            The smartcard does not have enough memory to store the information.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_BAD_SEEK">
            <summary>
            There was an error trying to set the smart card file object pointer.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_INVALID_CHV">
            <summary>
            The supplied PIN is incorrect.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_UNKNOWN_RES_MNG">
            <summary>
            An unrecognized error code was returned from a layered component.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_NO_SUCH_CERTIFICATE">
            <summary>
            The requested certificate does not exist.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_CERTIFICATE_UNAVAILABLE">
            <summary>
            The requested certificate could not be obtained.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_NO_READERS_AVAILABLE">
            <summary>
            Cannot find a smart card reader.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_COMM_DATA_LOST">
            <summary>
            A communications error with the smart card has been detected.  Retry the operation.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_NO_KEY_CONTAINER">
            <summary>
            The requested key container does not exist on the smart card.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_E_SERVER_TOO_BUSY">
            <summary>
            The Smart card resource manager is too busy to complete this operation.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_W_UNSUPPORTED_CARD">
            <summary>
            The reader cannot communicate with the smart card, due to ATR configuration conflicts.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_W_UNRESPONSIVE_CARD">
            <summary>
            The smart card is not responding to a reset.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_W_UNPOWERED_CARD">
            <summary>
            Power has been removed from the smart card, so that further communication is not possible.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_W_RESET_CARD">
            <summary>
            The smart card has been reset, so any shared state information is invalid.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_W_REMOVED_CARD">
            <summary>
            The smart card has been removed, so that further communication is not possible.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_W_SECURITY_VIOLATION">
            <summary>
            Access was denied because of a security violation.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_W_WRONG_CHV">
            <summary>
            The card cannot be accessed because the wrong PIN was presented.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_W_CHV_BLOCKED">
            <summary>
            The card cannot be accessed because the maximum number of PIN entry attempts has been reached.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_W_EOF">
            <summary>
            The end of the smart card file has been reached.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_W_CANCELLED_BY_USER">
            <summary>
            The action was cancelled by the user.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.SCARD_W_CARD_NOT_AUTHENTICATED">
            <summary>
            No PIN was presented to the smart card.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_OBJECTERRORS">
            <summary>
            Errors occurred accessing one or more objects - the ErrorInfo collection may have more detail
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_OBJECTINVALID">
            <summary>
            One or more of the object's properties are missing or invalid
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_KEYMISSING">
            <summary>
            The object was not found in the catalog
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_ALREADYINSTALLED">
            <summary>
            The object is already registered
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_APP_FILE_WRITEFAIL">
            <summary>
            Error occurred writing to the application file
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_APP_FILE_READFAIL">
            <summary>
            Error occurred reading the application file
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_APP_FILE_VERSION">
            <summary>
            Invalid version number in application file
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_BADPATH">
            <summary>
            The file path is invalid
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_APPLICATIONEXISTS">
            <summary>
            The application is already installed
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_ROLEEXISTS">
            <summary>
            The role already exists
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_CANTCOPYFILE">
            <summary>
            An error occurred copying the file
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_NOUSER">
            <summary>
            One or more users are not valid
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_INVALIDUSERIDS">
            <summary>
            One or more users in the application file are not valid
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_NOREGISTRYCLSID">
            <summary>
            The component's CLSID is missing or corrupt
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_BADREGISTRYPROGID">
            <summary>
            The component's progID is missing or corrupt
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_AUTHENTICATIONLEVEL">
            <summary>
            Unable to set required authentication level for update request
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_USERPASSWDNOTVALID">
            <summary>
            The identity or password set on the application is not valid
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_CLSIDORIIDMISMATCH">
            <summary>
            Application file CLSIDs or IIDs do not match corresponding DLLs
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_REMOTEINTERFACE">
            <summary>
            Interface information is either missing or changed
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_DLLREGISTERSERVER">
            <summary>
            DllRegisterServer failed on component install
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_NOSERVERSHARE">
            <summary>
            No server file share available
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_DLLLOADFAILED">
            <summary>
            DLL could not be loaded
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_BADREGISTRYLIBID">
            <summary>
            The registered TypeLib ID is not valid
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_APPDIRNOTFOUND">
            <summary>
            Application install directory not found
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_REGISTRARFAILED">
            <summary>
            Errors occurred while in the component registrar
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_COMPFILE_DOESNOTEXIST">
            <summary>
            The file does not exist
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_COMPFILE_LOADDLLFAIL">
            <summary>
            The DLL could not be loaded
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_COMPFILE_GETCLASSOBJ">
            <summary>
            GetClassObject failed in the DLL
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_COMPFILE_CLASSNOTAVAIL">
            <summary>
            The DLL does not support the components listed in the TypeLib
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_COMPFILE_BADTLB">
            <summary>
            The TypeLib could not be loaded
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_COMPFILE_NOTINSTALLABLE">
            <summary>
            The file does not contain components or component information
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_NOTCHANGEABLE">
            <summary>
            Changes to this object and its sub-objects have been disabled
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_NOTDELETEABLE">
            <summary>
            The delete function has been disabled for this object
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_SESSION">
            <summary>
            The server catalog version is not supported
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_COMP_MOVE_LOCKED">
            <summary>
            The component move was disallowed, because the source or destination application is either a system application or currently locked against changes
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_COMP_MOVE_BAD_DEST">
            <summary>
            The component move failed because the destination application no longer exists
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_REGISTERTLB">
            <summary>
            The system was unable to register the TypeLib
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_SYSTEMAPP">
            <summary>
            This operation can not be performed on the system application
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_COMPFILE_NOREGISTRAR">
            <summary>
            The component registrar referenced in this file is not available
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_COREQCOMPINSTALLED">
            <summary>
            A component in the same DLL is already installed
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_SERVICENOTINSTALLED">
            <summary>
            The service is not installed
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_PROPERTYSAVEFAILED">
            <summary>
            One or more property settings are either invalid or in conflict with each other
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_OBJECTEXISTS">
            <summary>
            The object you are attempting to add or rename already exists
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_COMPONENTEXISTS">
            <summary>
            The component already exists
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_REGFILE_CORRUPT">
            <summary>
            The registration file is corrupt
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_PROPERTY_OVERFLOW">
            <summary>
            The property value is too large
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_NOTINREGISTRY">
            <summary>
            Object was not found in registry
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_OBJECTNOTPOOLABLE">
            <summary>
            This object is not poolable
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_APPLID_MATCHES_CLSID">
            <summary>
            A CLSID with the same GUID as the new application ID is already installed on this machine
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_ROLE_DOES_NOT_EXIST">
            <summary>
            A role assigned to a component, interface, or method did not exist in the application
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_START_APP_NEEDS_COMPONENTS">
            <summary>
            You must have components in an application in order to start the application
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_REQUIRES_DIFFERENT_PLATFORM">
            <summary>
            This operation is not enabled on this platform
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_CAN_NOT_EXPORT_APP_PROXY">
            <summary>
            Application Proxy is not exportable
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_CAN_NOT_START_APP">
            <summary>
            Failed to start application because it is either a library application or an application proxy
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_CAN_NOT_EXPORT_SYS_APP">
            <summary>
            System application is not exportable
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_CANT_SUBSCRIBE_TO_COMPONENT">
            <summary>
            Can not subscribe to this component (the component may have been imported)
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_EVENTCLASS_CANT_BE_SUBSCRIBER">
            <summary>
            An event class cannot also be a subscriber component
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_LIB_APP_PROXY_INCOMPATIBLE">
            <summary>
            Library applications and application proxies are incompatible
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_BASE_PARTITION_ONLY">
            <summary>
            This function is valid for the base partition only
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_START_APP_DISABLED">
            <summary>
            You cannot start an application that has been disabled
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_CAT_DUPLICATE_PARTITION_NAME">
            <summary>
            The specified partition name is already in use on this computer
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_CAT_INVALID_PARTITION_NAME">
            <summary>
            The specified partition name is invalid. Check that the name contains at least one visible character
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_CAT_PARTITION_IN_USE">
            <summary>
            The partition cannot be deleted because it is the default partition for one or more users
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_FILE_PARTITION_DUPLICATE_FILES">
            <summary>
            The partition cannot be exported, because one or more components in the partition have the same file name
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_CAT_IMPORTED_COMPONENTS_NOT_ALLOWED">
            <summary>
            Applications that contain one or more imported components cannot be installed into a non-base partition
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_AMBIGUOUS_APPLICATION_NAME">
            <summary>
            The application name is not unique and cannot be resolved to an application id
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_AMBIGUOUS_PARTITION_NAME">
            <summary>
            The partition name is not unique and cannot be resolved to a partition id
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_REGDB_NOTINITIALIZED">
            <summary>
            The COM+ registry database has not been initialized
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_REGDB_NOTOPEN">
            <summary>
            The COM+ registry database is not open
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_REGDB_SYSTEMERR">
            <summary>
            The COM+ registry database detected a system error
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_REGDB_ALREADYRUNNING">
            <summary>
            The COM+ registry database is already running
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_MIG_VERSIONNOTSUPPORTED">
            <summary>
            This version of the COM+ registry database cannot be migrated
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_MIG_SCHEMANOTFOUND">
            <summary>
            The schema version to be migrated could not be found in the COM+ registry database
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_CAT_BITNESSMISMATCH">
            <summary>
            There was a type mismatch between binaries
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_CAT_UNACCEPTABLEBITNESS">
            <summary>
            A binary of unknown or invalid type was provided
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_CAT_WRONGAPPBITNESS">
            <summary>
            There was a type mismatch between a binary and an application
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_CAT_PAUSE_RESUME_NOT_SUPPORTED">
            <summary>
            The application cannot be paused or resumed
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_CAT_SERVERFAULT">
            <summary>
            The COM+ Catalog Server threw an exception during execution
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMQC_E_APPLICATION_NOT_QUEUED">
            <summary>
            Only COM+ Applications marked "queued" can be invoked using the "queue" moniker
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMQC_E_NO_QUEUEABLE_INTERFACES">
            <summary>
            At least one interface must be marked "queued" in order to create a queued component instance with the "queue" moniker
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMQC_E_QUEUING_SERVICE_NOT_AVAILABLE">
            <summary>
            MSMQ is required for the requested operation and is not installed
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMQC_E_NO_IPERSISTSTREAM">
            <summary>
            Unable to marshal an interface that does not support IPersistStream
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMQC_E_BAD_MESSAGE">
            <summary>
            The message is improperly formatted or was damaged in transit
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMQC_E_UNAUTHENTICATED">
            <summary>
            An unauthenticated message was received by an application that accepts only authenticated messages
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMQC_E_UNTRUSTED_ENQUEUER">
            <summary>
            The message was requeued or moved by a user not in the "QC Trusted User" role
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.MSDTC_E_DUPLICATE_RESOURCE">
            <summary>
            Cannot create a duplicate resource of type Distributed Transaction Coordinator
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_OBJECT_PARENT_MISSING">
            <summary>
            One of the objects being inserted or updated does not belong to a valid parent collection
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_OBJECT_DOES_NOT_EXIST">
            <summary>
            One of the specified objects cannot be found
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_APP_NOT_RUNNING">
            <summary>
            The specified application is not currently running
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_INVALID_PARTITION">
            <summary>
            The partition(s) specified are not valid.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_SVCAPP_NOT_POOLABLE_OR_RECYCLABLE">
            <summary>
            COM+ applications that run as NT service may not be pooled or recycled
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_USER_IN_SET">
            <summary>
            One or more users are already assigned to a local partition set.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_CANTRECYCLELIBRARYAPPS">
            <summary>
            Library applications may not be recycled.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_CANTRECYCLESERVICEAPPS">
            <summary>
            Applications running as NT services may not be recycled.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_PROCESSALREADYRECYCLED">
            <summary>
            The process has already been recycled.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_PAUSEDPROCESSMAYNOTBERECYCLED">
            <summary>
            A paused process may not be recycled.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_CANTMAKEINPROCSERVICE">
            <summary>
            Library applications may not be NT services.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_PROGIDINUSEBYCLSID">
            <summary>
            The ProgID provided to the copy operation is invalid. The ProgID is in use by another registered CLSID.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_DEFAULT_PARTITION_NOT_IN_SET">
            <summary>
            The partition specified as default is not a member of the partition set.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_RECYCLEDPROCESSMAYNOTBEPAUSED">
            <summary>
            A recycled process may not be paused.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_PARTITION_ACCESSDENIED">
            <summary>
            Access to the specified partition is denied.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_PARTITION_MSI_ONLY">
            <summary>
            Only Application Files (*.MSI files) can be installed into partitions.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_1_0_FORMAT">
            <summary>
            Applications containing one or more legacy components may not be exported to 1.0 format.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_NONBASE_PARTITIONS">
            <summary>
            Legacy components may not exist in non-base partitions.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_COMP_MOVE_SOURCE">
            <summary>
            A component cannot be moved (or copied) from the System Application, an application proxy or a non-changeable application
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_COMP_MOVE_DEST">
            <summary>
            A component cannot be moved (or copied) to the System Application, an application proxy or a non-changeable application
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_COMP_MOVE_PRIVATE">
            <summary>
            A private component cannot be moved (or copied) to a library application or to the base partition
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_BASEPARTITION_REQUIRED_IN_SET">
            <summary>
            The Base Application Partition exists in all partition sets and cannot be removed.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_CANNOT_ALIAS_EVENTCLASS">
            <summary>
            Alas, Event Class components cannot be aliased.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_PRIVATE_ACCESSDENIED">
            <summary>
            Access is denied because the component is private.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_SAFERINVALID">
            <summary>
            The specified SAFER level is invalid.
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_REGISTRY_ACCESSDENIED">
            <summary>
            The specified user cannot write to the system registry
            </summary>
        </member>
        <member name="F:CommonWin32.HRESULT.COMADMIN_E_PARTITIONS_DISABLED">
            <summary>
            COM+ partitions are currently disabled.
            </summary>
        </member>
        <member name="F:CommonWin32.ImageLists.COLORREF.CLR_DEFAULT">
            <summary>
            The default background color.
            </summary>
        </member>
        <member name="F:CommonWin32.ImageLists.COLORREF.CLR_NONE">
            <summary>
            No background color.
            </summary>
        </member>
        <member name="T:CommonWin32.ImageLists.IMAGEINFO">
            <summary>
            Contains information about an image in an image list.
            </summary>
        </member>
        <member name="F:CommonWin32.ImageLists.IMAGEINFO.hbmImage">
            <summary>
            A handle to the bitmap that contains the images.
            </summary>
        </member>
        <member name="F:CommonWin32.ImageLists.IMAGEINFO.hbmMask">
            <summary>
            A handle to a monochrome bitmap that contains the masks for the images. If the image list does not contain a mask, this member is NULL.
            </summary>
        </member>
        <member name="F:CommonWin32.ImageLists.IMAGEINFO.Unused1">
            <summary>
            Not used. This member should always be zero.
            </summary>
        </member>
        <member name="F:CommonWin32.ImageLists.IMAGEINFO.Unused2">
            <summary>
            Not used. This member should always be zero.
            </summary>
        </member>
        <member name="F:CommonWin32.ImageLists.IMAGEINFO.rcImage">
            <summary>
            The bounding rectangle of the specified image within the bitmap specified by hbmImage.
            </summary>
        </member>
        <member name="T:CommonWin32.ImageLists.IMAGELISTDRAWPARAMS">
            <summary>
            Contains information about an image list draw operation and is used with the IImageList::Draw function.
            </summary>
        </member>
        <member name="F:CommonWin32.ImageLists.IMAGELISTDRAWPARAMS.cbSize">
            <summary>
            The size of this structure, in bytes.
            </summary>
        </member>
        <member name="F:CommonWin32.ImageLists.IMAGELISTDRAWPARAMS.himl">
            <summary>
            A handle to the image list that contains the image to be drawn.
            </summary>
        </member>
        <member name="F:CommonWin32.ImageLists.IMAGELISTDRAWPARAMS.i">
            <summary>
            The zero-based index of the image to be drawn.
            </summary>
        </member>
        <member name="F:CommonWin32.ImageLists.IMAGELISTDRAWPARAMS.hdcDst">
            <summary>
            A handle to the destination device context.
            </summary>
        </member>
        <member name="F:CommonWin32.ImageLists.IMAGELISTDRAWPARAMS.x">
            <summary>
            The x-coordinate that specifies where the image is drawn.
            </summary>
        </member>
        <member name="F:CommonWin32.ImageLists.IMAGELISTDRAWPARAMS.y">
            <summary>
            The y-coordinate that specifies where the image is drawn.
            </summary>
        </member>
        <member name="F:CommonWin32.ImageLists.IMAGELISTDRAWPARAMS.cx">
            <summary>
            A value that specifies the number of pixels to draw, relative to the upper-left corner of the drawing operation as specified by xBitmap and yBitmap. If cx and cy are zero, then Draw draws the entire valid section. The method does not ensure that the parameters are valid.
            </summary>
        </member>
        <member name="F:CommonWin32.ImageLists.IMAGELISTDRAWPARAMS.cy">
            <summary>
            A value that specifies the number of pixels to draw, relative to the upper-left corner of the drawing operation as specified by xBitmap and yBitmap. If cx and cy are zero, then Draw draws the entire valid section. The method does not ensure that the parameters are valid.
            </summary>
        </member>
        <member name="F:CommonWin32.ImageLists.IMAGELISTDRAWPARAMS.xBitmap">
            <summary>
            The x-coordinate that specifies the upper-left corner of the drawing operation in reference to the image itself. Pixels of the image that are to the left of xBitmap and above yBitmap do not appear.
            </summary>
        </member>
        <member name="F:CommonWin32.ImageLists.IMAGELISTDRAWPARAMS.yBitmap">
            <summary>
            The y-coordinate that specifies the upper-left corner of the drawing operation in reference to the image itself. Pixels of the image that are to the left of xBitmap and above yBitmap do not appear.
            </summary>
        </member>
        <member name="F:CommonWin32.ImageLists.IMAGELISTDRAWPARAMS.rgbBk">
            <summary>
            The image background color. This parameter can also be an application-defined RGB value.
            </summary>
        </member>
        <member name="F:CommonWin32.ImageLists.IMAGELISTDRAWPARAMS.rgbFg">
            <summary>
            The image foreground color. This member is used only if fStyle includes the ILD_BLEND25 or ILD_BLEND50 flag.
            </summary>
        </member>
        <member name="F:CommonWin32.ImageLists.IMAGELISTDRAWPARAMS.fStyle">
            <summary>
            A flag specifying the drawing style and, optionally, the overlay image.
            </summary>
        </member>
        <member name="F:CommonWin32.ImageLists.IMAGELISTDRAWPARAMS.dwRop">
            <summary>
            A value specifying a raster operation code. These codes define how the color data for the source rectangle will be combined with the color data for the destination rectangle to achieve the final color. This member is ignored if	fStyle does not include the ILD_ROP flag.
            </summary>
        </member>
        <member name="F:CommonWin32.ImageLists.IMAGELISTDRAWPARAMS.fState">
            <summary>
            A flag that specifies the drawing state. 
            </summary>
        </member>
        <member name="F:CommonWin32.ImageLists.IMAGELISTDRAWPARAMS.Frame">
            <summary>
            Used with the alpha blending effect.
            </summary>
        </member>
        <member name="F:CommonWin32.ImageLists.IMAGELISTDRAWPARAMS.crEffect">
            <summary>
            A color used for the glow and shadow effects. 
            </summary>
        </member>
        <member name="T:CommonWin32.IntPtrExtensions">
            <summary>
            Contains useful things for <see cref="T:System.IntPtr"/>.
            </summary>
        </member>
        <member name="M:CommonWin32.IntPtrExtensions.ToPoint(System.IntPtr)">
            <summary>
            Correctly gets the mouse point location specified in lParam.
            </summary>
            <param name="lParam">The lParam from WndProc.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.IntPtrExtensions.GetDrawingBitmap(System.IntPtr)">
            <summary>
            Gets the image from a DIB pointer as a <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <param name="dibBitmap">The dib handle.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.IntPtrExtensions.GetWPFBitmap(System.IntPtr)">
            <summary>
            Gets the image from a DIB pointer as a WPF <see cref="T:System.Windows.Media.Imaging.BitmapSource"/>.
            </summary>
            <param name="dibBitmap">The dib bitmap.</param>
            <returns></returns>
        </member>
        <member name="T:CommonWin32.ListViewControl.ColumnFlags">
            <summary>
            Indicates the valid field flags.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ColumnFlags.LVCF_FMT">
            <summary>
            The fmt member is valid.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ColumnFlags.LVCF_WIDTH">
            <summary>
            The cx member is valid.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ColumnFlags.LVCF_TEXT">
            <summary>
            The pszText member is valid.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ColumnFlags.LVCF_SUBITEM">
            <summary>
            The iSubItem member is valid.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ColumnFlags.LVCF_IMAGE">
            <summary>
            The iImage member is valid.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ColumnFlags.LVCF_ORDER">
            <summary>
            The iOrder member is valid.
            </summary>
        </member>
        <member name="T:CommonWin32.ListViewControl.ColumnFormats">
            <summary>
            Indicates the column format.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ColumnFormats.LVCFMT_LEFT">
            <summary>
            Text is left-aligned.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ColumnFormats.LVCFMT_RIGHT">
            <summary>
            Text is right-aligned.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ColumnFormats.LVCFMT_CENTER">
            <summary>
            Text is centered.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ColumnFormats.LVCFMT_JUSTIFYMASK">
            <summary>
            A bitmask used to select those bits of fmt that control field justification. To check the format of a column, use a logical "and" to combine LCFMT_JUSTIFYMASK with fmt. You can then use a switch statement to determine whether the LVCFMT_LEFT, LVCFMT_RIGHT, or LVCFMT_CENTER bits are set.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ColumnFormats.LVCFMT_IMAGE">
            <summary>
            The item displays an image from an image list.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ColumnFormats.LVCFMT_BITMAP_ON_RIGHT">
            <summary>
            The bitmap appears to the right of text. This does not affect an image from an image list assigned to the header item.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ColumnFormats.LVCFMT_COL_HAS_IMAGES">
            <summary>
            The header item contains an image in the image list.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ColumnFormats.HDF_SORTUP">
            <summary>
            Show sort ascending indicator in header.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ColumnFormats.HDF_SORTDOWN">
            <summary>
            Show sort descending indicator in header.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ColumnFormats.LVCFMT_LINE_BREAK">
            <summary>
            Forces the column to wrap to the top of the next list of columns.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ColumnFormats.LVCFMT_FILL">
            <summary>
            Fills the remainder of the tile area. Might have a title.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ColumnFormats.LVCFMT_WRAP">
            <summary>
            Allows the column to wrap within the remaining space in its list of columns.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ColumnFormats.LVCFMT_NO_TITLE">
            <summary>
            Removes the title from the subitem.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ColumnFormats.LVCFMT_TILE_PLACEMENTMASK">
            <summary>
            Equivalent to a combination of LVCFMT_LINE_BREAK and LVCFMT_FILL.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupAlignments.LVGA_HEADER_LEFT">
            <summary>
            Header text is aligned at the left of the window.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupAlignments.LVGA_HEADER_CENTER">
            <summary>
            Header text is centered horizontally in the window.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupAlignments.LVGA_HEADER_RIGHT">
            <summary>
            Header text is aligned at the right of the window.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupAlignments.LVGA_FOOTER_LEFT">
            <summary>
            Footer text is aligned at the left of the window.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupAlignments.LVGA_FOOTER_CENTER">
            <summary>
            Footer text is centered horizontally in the window.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupAlignments.LVGA_FOOTER_RIGHT">
            <summary>
            Footer text is aligned at the right of the window.
            </summary>
        </member>
        <member name="T:CommonWin32.ListViewControl.GroupFlags">
            <summary>
            Mask flags for listview group.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupFlags.LVGF_NONE">
            <summary>
            No other items are valid.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupFlags.LVGF_HEADER">
            <summary>
            pszHeader and cchHeader members are valid.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupFlags.LVGF_FOOTER">
            <summary>
            pszFooter and cchFooter members are valid.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupFlags.LVGF_STATE">
            <summary>
            state and stateMask members are valid.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupFlags.LVGF_ALIGN">
            <summary>
            uAlign member is valid.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupFlags.LVGF_GROUPID">
            <summary>
            iGroupId member is valid.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupFlags.LVGF_SUBTITLE">
            <summary>
            Version 6.00 and Windows Vista. The pszSubtitle member is valid.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupFlags.LVGF_TASK">
            <summary>
            Version 6.00 and Windows Vista. The pszTask member is valid.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupFlags.LVGF_DESCRIPTIONTOP">
            <summary>
            Version 6.00 and Windows Vista. The pszDescriptionTop member is valid.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupFlags.LVGF_DESCRIPTIONBOTTOM">
            <summary>
            Version 6.00 and Windows Vista. The pszDescriptionBottom member is valid.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupFlags.LVGF_TITLEIMAGE">
            <summary>
            Version 6.00 and Windows Vista. The iTitleImage member is valid.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupFlags.LVGF_EXTENDEDIMAGE">
            <summary>
            Version 6.00 and Windows Vista. The iExtendedImage member is valid.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupFlags.LVGF_ITEMS">
            <summary>
            Version 6.00 and Windows Vista. The cItems member is valid.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupFlags.LVGF_SUBSET">
            <summary>
            Version 6.00 and Windows Vista. The pszSubsetTitle member is valid.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupFlags.LVGF_SUBSETITEMS">
            <summary>
            Version 6.00 and Windows Vista. The cchSubsetTitle member is valid.
            </summary>
        </member>
        <member name="T:CommonWin32.ListViewControl.GroupStates">
            <summary>
            Specifies the listview group's state.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupStates.LVGS_NORMAL">
            <summary>
            Groups are expanded, the group name is displayed, and all items in the group are displayed.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupStates.LVGS_COLLAPSED">
            <summary>
            The group is collapsed.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupStates.LVGS_HIDDEN">
            <summary>
            The group is hidden.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupStates.LVGS_NOHEADER">
            <summary>
            Version 6.00 and Windows Vista. The group does not display a header.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupStates.LVGS_COLLAPSIBLE">
            <summary>
            Version 6.00 and Windows Vista. The group can be collapsed.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupStates.LVGS_FOCUSED">
            <summary>
            Version 6.00 and Windows Vista. The group has keyboard focus.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupStates.LVGS_SELECTED">
            <summary>
            Version 6.00 and Windows Vista. The group is selected.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupStates.LVGS_SUBSETED">
            <summary>
            Version 6.00 and Windows Vista. The group displays only a portion of its items.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.GroupStates.LVGS_SUBSETLINKFOCUSED">
            <summary>
            Version 6.00 and Windows Vista. The subset link of the group has keyboard focus.
            </summary>
        </member>
        <member name="T:CommonWin32.ListViewControl.ItemFlags">
            <summary>
            Flags for the mask.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ItemFlags.LVIF_TEXT">
            <summary>
            The pszText member is valid or must be set.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ItemFlags.LVIF_IMAGE">
            <summary>
            The iImage member is valid or must be set.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ItemFlags.LVIF_PARAM">
            <summary>
            The lParam member is valid or must be set.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ItemFlags.LVIF_STATE">
            <summary>
            The state member is valid or must be set.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ItemFlags.LVIF_INDENT">
            <summary>
            The iIndent member is valid or must be set.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ItemFlags.LVIF_NORECOMPUTE">
            <summary>
            The control will not generate LVN_GETDISPINFO to retrieve text information if it receives an LVM_GETITEM message. Instead, the pszText member will contain LPSTR_TEXTCALLBACK.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ItemFlags.LVIF_GROUPID">
            <summary>
            Windows XP and later. The iGroupId member is valid or must be set. If this flag is not set when an LVM_INSERTITEM message is sent, the value of iGroupId is assumed to be I_GROUPIDCALLBACK.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ItemFlags.LVIF_COLUMNS">
            <summary>
            Windows XP and later.The cColumns member is valid or must be set.
            </summary>
        </member>
        <member name="T:CommonWin32.ListViewControl.ListViewMessage">
            <summary>
            Messages for listview.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_FIRST">
            <summary>
            For value offset.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETBKCOLOR">
            <summary>
            Gets the background color of a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETBKCOLOR">
            <summary>
            Sets the background color of a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETIMAGELIST">
            <summary>
            Retrieves the handle to an image list used for drawing list-view items.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETIMAGELIST">
            <summary>
            Assigns an image list to a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETITEMCOUNT">
            <summary>
            Retrieves the number of items in a list-view control. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_DELETEITEM">
            <summary>
            Removes an item from a list-view control. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_DELETEALLITEMS">
            <summary>
            Removes all items from a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETCALLBACKMASK">
            <summary>
            Gets the callback mask for a list-view control. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETCALLBACKMASK">
            <summary>
            Changes the callback mask for a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETNEXTITEM">
            <summary>
            Searches for a list-view item that has the specified properties and bears the specified relationship to a specified item.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETITEMRECT">
            <summary>
            Retrieves the bounding rectangle for all or part of an item in the current view.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETITEMPOSITION">
            <summary>
            Moves an item to a specified position in a list-view control (must be in icon or small icon view). 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETITEMPOSITION">
            <summary>
            Retrieves the position of a list-view item.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_HITTEST">
            <summary>
            Determines which list-view item, if any, is at a specified position. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_ENSUREVISIBLE">
            <summary>
            Ensures that a list-view item is either entirely or partially visible, scrolling the list-view control if necessary.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SCROLL">
            <summary>
            Scrolls the content of a list-view control. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_REDRAWITEMS">
            <summary>
            Forces a list-view control to redraw a range of items. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_ARRANGE">
            <summary>
            Arranges items in icon view.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETEDITCONTROL">
            <summary>
            Gets the handle to the edit control being used to edit a list-view item's text.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_DELETECOLUMN">
            <summary>
            Removes a column from a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETCOLUMNWIDTH">
            <summary>
            Gets the width of a column in report or list view.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETCOLUMNWIDTH">
            <summary>
            Changes the width of a column in report-view mode or the width of all columns in list-view mode.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETHEADER">
            <summary>
            Gets the handle to the header control used by the list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_CREATEDRAGIMAGE">
            <summary>
            Creates a drag image list for the specified item.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETVIEWRECT">
            <summary>
            Retrieves the bounding rectangle of all items in the list-view control. The list view must be in icon or small icon view. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETTEXTCOLOR">
            <summary>
            Retrieves the text color of a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETTEXTCOLOR">
            <summary>
            Sets the text color of a list-view control. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETTEXTBKCOLOR">
            <summary>
            Retrieves the text background color of a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETTEXTBKCOLOR">
            <summary>
            Sets the background color of text in a list-view control. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETTOPINDEX">
            <summary>
            Retrieves the index of the topmost visible item when in list or report view.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETCOUNTPERPAGE">
            <summary>
            Calculates the number of items that can fit vertically in the visible area of a list-view control when in list or report view. Only fully visible items are counted.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETORIGIN">
            <summary>
            Retrieves the current view origin for a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_UPDATE">
            <summary>
            Updates a list-view item. If the list-view control has the LVS_AUTOARRANGE style, this macro causes the list-view control to be arranged. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETITEMSTATE">
            <summary>
            Changes the state of an item in a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETITEMSTATE">
            <summary>
            Retrieves the state of a list-view item. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETITEMCOUNT">
            <summary>
            Causes the list-view control to allocate memory for the specified number of items or sets the virtual number of items in a virtual list-view control. This depends on how the list-view control was created. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SORTITEMS">
            <summary>
            Uses an application-defined comparison function to sort the items of a list-view control. The index of each item changes to reflect the new sequence.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETITEMPOSITION32">
            <summary>
            Moves an item to a specified position in a list-view control (must be in icon or small icon view). This message differs from the LVM_SETITEMPOSITION message in that it uses 32-bit coordinates. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETSELECTEDCOUNT">
            <summary>
            Determines the number of selected items in a list-view control. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETITEMSPACING">
            <summary>
            Determines the spacing between items in a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETICONSPACING">
            <summary>
            Sets the spacing between icons in list-view controls that have the LVS_ICON style.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETEXTENDEDLISTVIEWSTYLE">
            <summary>
            Sets extended styles in list-view controls. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETEXTENDEDLISTVIEWSTYLE">
            <summary>
            Gets the extended styles that are currently in use for a given list-view control. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETSUBITEMRECT">
            <summary>
            Retrieves information about the bounding rectangle for a subitem in a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SUBITEMHITTEST">
            <summary>
            Determines which list-view item or subitem is at a given position. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETCOLUMNORDERARRAY">
            <summary>
            Sets the left-to-right order of columns in a list-view control. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETCOLUMNORDERARRAY">
            <summary>
            Gets the current left-to-right order of columns in a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETHOTITEM">
            <summary>
            Sets the hot item for a list-view control. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETHOTITEM">
            <summary>
            Retrieves the index of the hot item. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETHOTCURSOR">
            <summary>
            Sets the HCURSOR value that the list-view control uses when the pointer is over an item while hot tracking is enabled.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETHOTCURSOR">
            <summary>
            Retrieves the HCURSOR value used when the pointer is over an item while hot tracking is enabled. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_APPROXIMATEVIEWRECT">
            <summary>
            Calculates the approximate width and height required to display a given number of items. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETWORKAREAS">
            <summary>
            Sets the working areas within a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETSELECTIONMARK">
            <summary>
            Retrieves the selection mark from a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETSELECTIONMARK">
            <summary>
            Sets the selection mark in a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETWORKAREAS">
            <summary>
            Retrieves the working areas from a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETHOVERTIME">
            <summary>
            Sets the amount of time which the mouse cursor must hover over an item before it is selected.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETHOVERTIME">
            <summary>
            Retrieves the amount of time that the mouse cursor must hover over an item before it is selected. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETNUMBEROFWORKAREAS">
            <summary>
            Retrieves the number of working areas in a list-view control. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETTOOLTIPS">
            <summary>
            Sets the tooltip control that the list-view control will use to display tooltips. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETITEM">
            <summary>
            Retrieves some or all of a list-view item's attributes. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETITEM">
            <summary>
            Sets some or all of a list-view item's attributes. You can also send LVM_SETITEM to set the text of a subitem.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_INSERTITEM">
            <summary>
            Inserts a new item in a list-view control. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETTOOLTIPS">
            <summary>
            Retrieves the tooltip control that the list-view control uses to display tooltips.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SORTITEMSEX">
            <summary>
            Uses an application-defined comparison function to sort the items of a list-view control. The index of each item changes to reflect the new sequence. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_FINDITEM">
            <summary>
            Searches for a list-view item with the specified characteristics.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETSTRINGWIDTH">
            <summary>
            Determines the width of a specified string using the specified list-view control's current font.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETGROUPSTATE">
            <summary>
            Gets the state for a specified group. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETFOCUSEDGROUP">
            <summary>
            Gets the group that has the focus. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETCOLUMN">
            <summary>
            Gets the attributes of a list-view control's column. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETCOLUMN">
            <summary>
            Sets the attributes of a list-view column.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_INSERTCOLUMN">
            <summary>
            Inserts a new column in a list-view control. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETGROUPRECT">
            <summary>
            Gets the rectangle for a specified group.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETITEMTEXT">
            <summary>
            Retrieves the text of a list-view item or subitem.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETITEMTEXT">
            <summary>
            Changes the text of a list-view item or subitem. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETISEARCHSTRING">
            <summary>
            Retrieves the incremental search string of a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_EDITLABEL">
            <summary>
            Begins in-place editing of the specified list-view item's text. The message implicitly selects and focuses the specified item.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETBKIMAGE">
            <summary>
            Sets the background image in a list-view control. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETBKIMAGE">
            <summary>
            Gets the background image in a list-view control. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETSELECTEDCOLUMN">
            <summary>
            Sets the index of the selected column.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETVIEW">
            <summary>
            Sets the view of a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETVIEW">
            <summary>
            Retrieves the current view of a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_INSERTGROUP">
            <summary>
            Inserts a group into a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETGROUPINFO">
            <summary>
            Sets group information.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETGROUPINFO">
            <summary>
            Gets group information.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_REMOVEGROUP">
            <summary>
            Removes a group from a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_MOVEGROUP">
            <summary>
            This message is not implemented.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETGROUPCOUNT">
            <summary>
            Gets the number of groups.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETGROUPINFOBYINDEX">
            <summary>
            Gets information on a specified group. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_MOVEITEMTOGROUP">
            <summary>
            This message is not implemented.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETGROUPMETRICS">
            <summary>
            Sets information about the display of groups.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETGROUPMETRICS">
            <summary>
            Gets information about the display of groups.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_ENABLEGROUPVIEW">
            <summary>
            Enables or disables whether the items in a list-view control display as a group.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SORTGROUPS">
            <summary>
            Uses an application-defined comparison function to sort groups by ID within a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_INSERTGROUPSORTED">
            <summary>
            Inserts a group into an ordered list of groups.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_REMOVEALLGROUPS">
            <summary>
            Removes all groups from a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_HASGROUP">
            <summary>
            Determines whether the list-view control has a specified group.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETTILEVIEWINFO">
            <summary>
            Sets information that a list-view control uses in tile view.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETTILEVIEWINFO">
            <summary>
            Retrieves information about a list-view control in tile view.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETTILEINFO">
            <summary>
            Sets information for an existing tile of a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETTILEINFO">
            <summary>
            Retrieves information about a tile in a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETINSERTMARK">
            <summary>
            Sets the insertion point to the defined position.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETINSERTMARK">
            <summary>
            Retrieves the position of the insertion point.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_INSERTMARKHITTEST">
            <summary>
            Retrieves the insertion point closest to a specified point.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETINSERTMARKRECT">
            <summary>
            Retrieves the rectangle that bounds the insertion point.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETINSERTMARKCOLOR">
            <summary>
            Sets the color of the insertion point.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETINSERTMARKCOLOR">
            <summary>
            Retrieves the color of the insertion point.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETINFOTIP">
            <summary>
            Sets tooltip text in delayed response to the LVN_GETINFOTIP notification.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETSELECTEDCOLUMN">
            <summary>
            Retrieves an integer that specifies the selected column.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_ISGROUPVIEWENABLED">
            <summary>
            Checks whether the list-view control has group view enabled.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETOUTLINECOLOR">
            <summary>
            Retrieves the color of the border of a list-view control if the LVS_EX_BORDERSELECT extended window style is set.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETOUTLINECOLOR">
            <summary>
            Sets the color of the border of a list-view control if the LVS_EX_BORDERSELECT extended window style is set.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_CANCELEDITLABEL">
            <summary>
            Cancels an item text editing operation.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_MAPINDEXTOID">
            <summary>
            Maps the index of an item to a unique ID
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_MAPIDTOINDEX">
            <summary>
            Maps the ID of an item to an index.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_ISITEMVISIBLE">
            <summary>
            Indicates if an item in the list-view control is visible. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETEMPTYTEXT">
            <summary>
            Gets the text meant for display when the list-view control appears empty.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETFOOTERRECT">
            <summary>
            Retrieves the coordinates of the footer for a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETFOOTERINFO">
            <summary>
            Gets information about the footer of a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETFOOTERITEMRECT">
            <summary>
            Gets the coordinates of a footer for a specified item in a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETFOOTERITEM">
            <summary>
            Gets information on a footer item in a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETITEMINDEXRECT">
            <summary>
            Retrieves the bounding rectangle for all or part of a subitem in the current view of a list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETITEMINDEXSTATE">
            <summary>
            Sets the state of a list-view item.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETNEXTITEMINDEX">
            <summary>
            Retrieves the index of an item in a specified list-view control that matches the specified properties and relationship to another item. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_GETUNICODEFORMAT">
            <summary>
            Retrieves the UNICODE character format flag for the control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewMessage.LVM_SETUNICODEFORMAT">
            <summary>
            Sets the UNICODE character format flag for the control. This message allows you to change the character set used by the control at run time rather than having to re-create the control.
            </summary>
        </member>
        <member name="T:CommonWin32.ListViewControl.ListViewStylesEx">
            <summary>
            Extended styles for listview.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewStylesEx.LVS_EX_GRIDLINES">
            <summary>
            Displays gridlines around items and subitems. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewStylesEx.LVS_EX_SUBITEMIMAGES">
            <summary>
            Allows images to be displayed for subitems. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewStylesEx.LVS_EX_CHECKBOXES">
            <summary>
            Enables check boxes for items in a list-view control. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewStylesEx.LVS_EX_TRACKSELECT">
            <summary>
            Enables hot-track selection in a list-view control. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewStylesEx.LVS_EX_HEADERDRAGDROP">
            <summary>
            Enables drag-and-drop reordering of columns in a list-view control. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewStylesEx.LVS_EX_FULLROWSELECT">
            <summary>
            When an item is selected, the item and all its subitems are highlighted.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewStylesEx.LVS_EX_ONECLICKACTIVATE">
            <summary>
            The list-view control sends an LVN_ITEMACTIVATE notification code to the parent window when the user clicks an item.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.ListViewStylesEx.LVS_EX_TWOCLICKACTIVATE">
            <summary>
            The list-view control sends an LVN_ITEMACTIVATE notification code to the parent window when the user double-clicks an item. 
            </summary>
        </member>
        <member name="T:CommonWin32.ListViewControl.LVCOLUMN">
            <summary>
            Contains information about a column in report view.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVCOLUMN.mask">
            <summary>
            Variable specifying which members contain valid information
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVCOLUMN.fmt">
            <summary>
            Alignment of the column header and the subitem text in the column. The alignment of the leftmost column is always LVCFMT_LEFT; it cannot be changed.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVCOLUMN.cx">
            <summary>
            Width of the column, in pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVCOLUMN.pszText">
            <summary>
            String of the column header.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVCOLUMN.ccTextMax">
            <summary>
            Size in TCHARs of the buffer pointed to by the pszText member. If the structure is not receiving information about a column, this member is ignored.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVCOLUMN.iSubItem">
            <summary>
            Index of subitem associated with the column.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVCOLUMN.iImage">
            <summary>
            Zero-based index of an image within the image list. The specified image will appear within the column.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVCOLUMN.iOrder">
            <summary>
            Zero-based column offset. Column offset is in left-to-right order. For example, zero indicates the leftmost column.
            </summary>
        </member>
        <member name="T:CommonWin32.ListViewControl.LVCOLUMN_VISTA">
            <summary>
            Contains information about a column in report view.
            </summary>
        </member>
        <member name="P:CommonWin32.ListViewControl.LVCOLUMN_VISTA.IsSupported">
            <summary>
            Gets a value indicating whether this struct is supported on current platform.
            </summary>
            <value>
            <c>true</c> if this struct is supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVCOLUMN_VISTA.mask">
            <summary>
            Variable specifying which members contain valid information
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVCOLUMN_VISTA.fmt">
            <summary>
            Alignment of the column header and the subitem text in the column. The alignment of the leftmost column is always LVCFMT_LEFT; it cannot be changed.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVCOLUMN_VISTA.cx">
            <summary>
            Width of the column, in pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVCOLUMN_VISTA.pszText">
            <summary>
            String of the column header.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVCOLUMN_VISTA.ccTextMax">
            <summary>
            Size in TCHARs of the buffer pointed to by the pszText member. If the structure is not receiving information about a column, this member is ignored.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVCOLUMN_VISTA.iSubItem">
            <summary>
            Index of subitem associated with the column.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVCOLUMN_VISTA.iImage">
            <summary>
            Zero-based index of an image within the image list. The specified image will appear within the column.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVCOLUMN_VISTA.iOrder">
            <summary>
            Zero-based column offset. Column offset is in left-to-right order. For example, zero indicates the leftmost column.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVCOLUMN_VISTA.cxMin">
            <summary>
            Windows Vista. Minimum width of the column in pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVCOLUMN_VISTA.cxDefault">
            <summary>
            Windows Vista. Application-defined value typically used to store the default width of the column. This member is ignored by the list-view control.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVCOLUMN_VISTA.cxIdeal">
            <summary>
            Windows Vista. Read-only. The ideal width of the column in pixels, as the column may currently be autosized to a lesser width.
            </summary>
        </member>
        <member name="T:CommonWin32.ListViewControl.LVGROUP">
            <summary>
            Used to set and retrieve groups.
            </summary>
        </member>
        <member name="P:CommonWin32.ListViewControl.LVGROUP.IsSupported">
            <summary>
            Gets a value indicating whether this struct is supported on current platform.
            </summary>
            <value>
            <c>true</c> if this struct is supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP.cbSize">
            <summary>
            Size of this structure, in bytes.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP.mask">
            <summary>
            Mask that specifies which members of the structure are valid input. One or more of the following values:LVGF_NONENo other items are valid.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP.pszHeader">
            <summary>
            Pointer to a null-terminated string that contains the header text when item information is being set. If group information is being retrieved, this member specifies the address of the buffer that receives the header text.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP.cchHeader">
            <summary>
            Size in TCHARs of the buffer pointed to by the pszHeader member. If the structure is not receiving information about a group, this member is ignored.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP.pszFooter">
            <summary>
            Pointer to a null-terminated string that contains the footer text when item information is being set. If group information is being retrieved, this member specifies the address of the buffer that receives the footer text.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP.cchFooter">
            <summary>
            Size in TCHARs of the buffer pointed to by the pszFooter member. If the structure is not receiving information about a group, this member is ignored.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP.iGroupId">
            <summary>
            ID of the group.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP.stateMask">
            <summary>
            Mask used with LVM_GETGROUPINFO (Microsoft Windows XP and Windows Vista) and LVM_SETGROUPINFO (Windows Vista only) to specify which flags in the state value are being retrieved or set.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP.state">
            <summary>
            Flag that can have one of the following values:LVGS_NORMALGroups are expanded, the group name is displayed, and all items in the group are displayed.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP.uAlign">
            <summary>
            Indicates the alignment of the header or footer text for the group. It can have one or more of the following values. Use one of the header flags. Footer flags are optional. Windows XP: Footer flags are reserved.LVGA_FOOTER_CENTERReserved.
            </summary>
        </member>
        <member name="T:CommonWin32.ListViewControl.LVGROUP_VISTA">
            <summary>
            Used to set and retrieve groups.
            </summary>
        </member>
        <member name="P:CommonWin32.ListViewControl.LVGROUP_VISTA.IsSupported">
            <summary>
            Gets a value indicating whether this struct is supported on current platform.
            </summary>
            <value>
            <c>true</c> if this struct is supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP_VISTA.cbSize">
            <summary>
            Size of this structure, in bytes.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP_VISTA.mask">
            <summary>
            Mask that specifies which members of the structure are valid input. One or more of the following values:LVGF_NONENo other items are valid.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP_VISTA.pszHeader">
            <summary>
            Pointer to a null-terminated string that contains the header text when item information is being set. If group information is being retrieved, this member specifies the address of the buffer that receives the header text.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP_VISTA.cchHeader">
            <summary>
            Size in TCHARs of the buffer pointed to by the pszHeader member. If the structure is not receiving information about a group, this member is ignored.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP_VISTA.pszFooter">
            <summary>
            Pointer to a null-terminated string that contains the footer text when item information is being set. If group information is being retrieved, this member specifies the address of the buffer that receives the footer text.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP_VISTA.cchFooter">
            <summary>
            Size in TCHARs of the buffer pointed to by the pszFooter member. If the structure is not receiving information about a group, this member is ignored.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP_VISTA.iGroupId">
            <summary>
            ID of the group.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP_VISTA.stateMask">
            <summary>
            Mask used with LVM_GETGROUPINFO (Microsoft Windows XP and Windows Vista) and LVM_SETGROUPINFO (Windows Vista only) to specify which flags in the state value are being retrieved or set.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP_VISTA.state">
            <summary>
            Flag that can have one of the following values:LVGS_NORMALGroups are expanded, the group name is displayed, and all items in the group are displayed.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP_VISTA.uAlign">
            <summary>
            Indicates the alignment of the header or footer text for the group. It can have one or more of the following values. Use one of the header flags. Footer flags are optional. Windows XP: Footer flags are reserved.LVGA_FOOTER_CENTERReserved.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP_VISTA.pszSubtitle">
            <summary>
            Windows Vista. Pointer to a null-terminated string that contains the subtitle text when item information is being set. If group information is being retrieved, this member specifies the address of the buffer that receives the subtitle text. This element is drawn under the header text.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP_VISTA.cchSubtitle">
            <summary>
            Windows Vista. Size, in TCHARs, of the buffer pointed to by the pszSubtitle member. If the structure is not receiving information about a group, this member is ignored.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP_VISTA.pszTask">
            <summary>
            Windows Vista. Pointer to a null-terminated string that contains the text for a task link when item information is being set. If group information is being retrieved, this member specifies the address of the buffer that receives the task text. This item is drawn right-aligned opposite the header text. When clicked by the user, the task link generates an LVN_LINKCLICK notification.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP_VISTA.cchTask">
            <summary>
            Windows Vista. Size in TCHARs of the buffer pointed to by the pszTask member. If the structure is not receiving information about a group, this member is ignored.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP_VISTA.pszDescriptionTop">
            <summary>
            Windows Vista. Pointer to a null-terminated string that contains the top description text when item information is being set. If group information is being retrieved, this member specifies the address of the buffer that receives the top description text. This item is drawn opposite the title image when there is a title image, no extended image, and uAlign==LVGA_HEADER_CENTER.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP_VISTA.cchDescriptionTop">
            <summary>
            Windows Vista. Size in TCHARs of the buffer pointed to by the pszDescriptionTop member. If the structure is not receiving information about a group, this member is ignored.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP_VISTA.pszDescriptionBottom">
            <summary>
            Windows Vista. Pointer to a null-terminated string that contains the bottom description text when item information is being set. If group information is being retrieved, this member specifies the address of the buffer that receives the bottom description text. This item is drawn under the top description text when there is a title image, no extended image, and uAlign==LVGA_HEADER_CENTER.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP_VISTA.cchDescriptionBottom">
            <summary>
            Windows Vista. Size in TCHARs of the buffer pointed to by the pszDescriptionBottom member. If the structure is not receiving information about a group, this member is ignored.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP_VISTA.iTitleImage">
            <summary>
            Windows Vista. Index of the title image in the control imagelist.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP_VISTA.iExtendedImage">
            <summary>
            Windows Vista. Index of the extended image in the control imagelist.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP_VISTA.iFirstItem">
            <summary>
            Windows Vista. Read-only.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP_VISTA.cItems">
            <summary>
            Windows Vista. Read-only in non-owner data mode.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP_VISTA.pszSubsetTitle">
            <summary>
            Windows Vista. NULL if group is not a subset. Pointer to a null-terminated string that contains the subset title text when item information is being set. If group information is being retrieved, this member specifies the address of the buffer that receives the subset title text.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVGROUP_VISTA.cchSubsetTitle">
            <summary>
            Windows Vista. Size in TCHARs of the buffer pointed to by the pszSubsetTitle member. If the structure is not receiving information about a group, this member is ignored.
            </summary>
        </member>
        <member name="T:CommonWin32.ListViewControl.LVITEM">
            <summary>
            Specifies or receives the attributes of a list-view item.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM.mask">
            <summary>
            Set of flags that specify which members of this structure contain data to be set or which members are being requested. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM.iItem">
            <summary>
            Zero-based index of the item to which this structure refers.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM.iSubItem">
            <summary>
            One-based index of the subitem to which this structure refers, or zero if this structure refers to an item rather than a subitem.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM.state">
            <summary>
            Indicates the item's state, state image, and overlay image. The stateMask member indicates the valid bits of this member.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM.stateMask">
            <summary>
            Value specifying which bits of the state member will be retrieved or modified.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM.pszText">
            <summary>
            If the structure specifies item attributes, pszText is a string containing the item text.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM.cchTextMax">
            <summary>
            Number of TCHARs in the buffer pointed to by pszText, including the terminating NULL.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM.iImage">
            <summary>
            Index of the item's icon in the control's image list. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM.lParam">
            <summary>
            Value specific to the item. If you use the LVM_SORTITEMS message, the list-view control passes this value to the application-defined comparison function. You can also use the LVM_FINDITEM message to search a list-view control for an item with a specified lParam value.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM.iIndent">
            <summary>
            Number of image widths to indent the item. 
            </summary>
        </member>
        <member name="T:CommonWin32.ListViewControl.LVITEM_XP">
            <summary>
            Specifies or receives the attributes of a list-view item.
            </summary>
        </member>
        <member name="P:CommonWin32.ListViewControl.LVITEM_XP.IsSupported">
            <summary>
            Gets a value indicating whether this struct is supported on current platform.
            </summary>
            <value>
            <c>true</c> if this struct is supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM_XP.mask">
            <summary>
            Set of flags that specify which members of this structure contain data to be set or which members are being requested. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM_XP.iItem">
            <summary>
            Zero-based index of the item to which this structure refers.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM_XP.iSubItem">
            <summary>
            One-based index of the subitem to which this structure refers, or zero if this structure refers to an item rather than a subitem.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM_XP.state">
            <summary>
            Indicates the item's state, state image, and overlay image. The stateMask member indicates the valid bits of this member.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM_XP.stateMask">
            <summary>
            Value specifying which bits of the state member will be retrieved or modified.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM_XP.pszText">
            <summary>
            If the structure specifies item attributes, pszText is a string containing the item text.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM_XP.cchTextMax">
            <summary>
            Number of TCHARs in the buffer pointed to by pszText, including the terminating NULL.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM_XP.iImage">
            <summary>
            Index of the item's icon in the control's image list. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM_XP.lParam">
            <summary>
            Value specific to the item. If you use the LVM_SORTITEMS message, the list-view control passes this value to the application-defined comparison function. You can also use the LVM_FINDITEM message to search a list-view control for an item with a specified lParam value.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM_XP.iIndent">
            <summary>
            Number of image widths to indent the item. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM_XP.iGroupId">
            <summary>
            Identifier of the group that the item belongs to, or one of the following values.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM_XP.cColumns">
            <summary>
            Number of data columns (subitems) to display for this item in tile view. The maximum value is 20.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM_XP.puColumns">
            <summary>
            A pointer to an array of column indices, specifying which columns are displayed for this item, and the order of those columns.
            </summary>
        </member>
        <member name="T:CommonWin32.ListViewControl.LVITEM_VISTA">
            <summary>
            Specifies or receives the attributes of a list-view item.
            </summary>
        </member>
        <member name="P:CommonWin32.ListViewControl.LVITEM_VISTA.IsSupported">
            <summary>
            Gets a value indicating whether this struct is supported on current platform.
            </summary>
            <value>
            <c>true</c> if this struct is supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM_VISTA.mask">
            <summary>
            Set of flags that specify which members of this structure contain data to be set or which members are being requested. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM_VISTA.iItem">
            <summary>
            Zero-based index of the item to which this structure refers.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM_VISTA.iSubItem">
            <summary>
            One-based index of the subitem to which this structure refers, or zero if this structure refers to an item rather than a subitem.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM_VISTA.state">
            <summary>
            Indicates the item's state, state image, and overlay image. The stateMask member indicates the valid bits of this member.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM_VISTA.stateMask">
            <summary>
            Value specifying which bits of the state member will be retrieved or modified.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM_VISTA.pszText">
            <summary>
            If the structure specifies item attributes, pszText is a string containing the item text.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM_VISTA.cchTextMax">
            <summary>
            Number of TCHARs in the buffer pointed to by pszText, including the terminating NULL.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM_VISTA.iImage">
            <summary>
            Index of the item's icon in the control's image list. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM_VISTA.lParam">
            <summary>
            Value specific to the item. If you use the LVM_SORTITEMS message, the list-view control passes this value to the application-defined comparison function. You can also use the LVM_FINDITEM message to search a list-view control for an item with a specified lParam value.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM_VISTA.iIndent">
            <summary>
            Number of image widths to indent the item. 
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM_VISTA.iGroupId">
            <summary>
            Identifier of the group that the item belongs to, or one of the following values.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM_VISTA.cColumns">
            <summary>
            Number of data columns (subitems) to display for this item in tile view. The maximum value is 20.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM_VISTA.puColumns">
            <summary>
            A pointer to an array of column indices, specifying which columns are displayed for this item, and the order of those columns.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM_VISTA.piColFmt">
            <summary>
            Windows Vista: Not implemented. Windows 7 and later: A pointer to an array of these ColumnFormat flags:
            LVCFMT_LINE_BREAK, LVCFMT_FILL, LVCFMT_WRAP, LVCFMT_NO_TITLE, LVCFMT_TILE_PLACEMENTMASK (alone or in combination), 
            specifying the format of each subitem in extended tile view.
            </summary>
        </member>
        <member name="F:CommonWin32.ListViewControl.LVITEM_VISTA.iGroup">
            <summary>
            Group index of the item. Valid only for owner data/callback (single item in multiple groups).
            </summary>
        </member>
        <member name="T:CommonWin32.ListViewControl.MiscValues">
            <summary>
            Contains uncategorized values for list view.
            </summary>
        </member>
        <member name="T:CommonWin32.Monitors.MONITORINFO">
            <summary>
            Contains information about a display monitor.
            </summary>
        </member>
        <member name="F:CommonWin32.Monitors.MONITORINFO.cbSize">
            <summary>
            The size of the structure, in bytes.
            </summary>
        </member>
        <member name="F:CommonWin32.Monitors.MONITORINFO.rcMonitor">
            <summary>
            A RECT structure that specifies the display monitor rectangle, 
            expressed in virtual-screen coordinates. Note that if the monitor is 
            not the primary display monitor, some of the rectangle's coordinates 
            may be negative values.
            </summary>
        </member>
        <member name="F:CommonWin32.Monitors.MONITORINFO.rcWork">
            <summary>
            A RECT structure that specifies the work area rectangle of the display 
            monitor, expressed in virtual-screen coordinates. Note that if the monitor
            is not the primary display monitor, some of the rectangle's coordinates 
            may be negative values.
            </summary>
        </member>
        <member name="F:CommonWin32.Monitors.MONITORINFO.dwFlags">
            <summary>
            A set of flags that represent attributes of the display monitor.
            </summary>
        </member>
        <member name="T:CommonWin32.Monitors.Flag">
            <summary>
            Indicates the monitor flag.
            </summary>
        </member>
        <member name="F:CommonWin32.Monitors.Flag.MONITORINFOF_PRIMARY">
            <summary>
            This is the primary display monitor.
            </summary>
        </member>
        <member name="T:CommonWin32.MouseInput.EventFlags">
            <summary>
            Flags for the mouse event.
            </summary>
        </member>
        <member name="F:CommonWin32.MouseInput.EventFlags.TME_CANCEL">
            <summary>
            The caller wants to cancel a prior tracking request. The caller should also specify the type of tracking that it wants to cancel. For example, to cancel hover tracking, the caller must pass the TME_CANCEL and TME_HOVER flags.
            </summary>
        </member>
        <member name="F:CommonWin32.MouseInput.EventFlags.TME_HOVER">
            <summary>
            The caller wants hover notification. Notification is delivered as a WM_MOUSEHOVER message.
            If the caller requests hover tracking while hover tracking is already active, the hover timer will be reset.
            This flag is ignored if the mouse pointer is not over the specified window or area.
            </summary>
        </member>
        <member name="F:CommonWin32.MouseInput.EventFlags.TME_LEAVE">
            <summary>
            The caller wants leave notification. Notification is delivered as a WM_MOUSELEAVE message. 
            If the mouse is not over the specified window or area, a leave notification is generated 
            immediately and no further tracking is performed.
            </summary>
        </member>
        <member name="F:CommonWin32.MouseInput.EventFlags.TME_NONCLIENT">
            <summary>
            The caller wants hover and leave notification for the nonclient areas. 
            Notification is delivered as WM_NCMOUSEHOVER and WM_NCMOUSELEAVE messages.
            </summary>
        </member>
        <member name="F:CommonWin32.MouseInput.EventFlags.TME_QUERY">
            <summary>
            The function fills in the structure instead of treating it as a tracking request. 
            The structure is filled such that had that structure been passed to TrackMouseEvent, 
            it would generate the current tracking.
            </summary>
        </member>
        <member name="T:CommonWin32.MouseInput.MouseActivate">
            <summary>
            Return values for WM_MOUSEACTIVATE message.
            </summary>
        </member>
        <member name="F:CommonWin32.MouseInput.MouseActivate.MA_ACTIVATE">
            <summary>
            Activates the window, and does not discard the mouse message.
            </summary>
        </member>
        <member name="F:CommonWin32.MouseInput.MouseActivate.MA_ACTIVATEANDEAT">
            <summary>
            Activates the window, and discards the mouse message.
            </summary>
        </member>
        <member name="F:CommonWin32.MouseInput.MouseActivate.MA_NOACTIVATE">
            <summary>
            Does not activate the window, and does not discard the mouse message.
            </summary>
        </member>
        <member name="F:CommonWin32.MouseInput.MouseActivate.MA_NOACTIVATEANDEAT">
            <summary>
            Does not activate the window, but discards the mouse message.
            </summary>
        </member>
        <member name="T:CommonWin32.MouseInput.TRACKMOUSEEVENT">
            <summary>
            Used by the TrackMouseEvent function to track when the mouse pointer 
            leaves a window or hovers over a window for a specified amount of time.
            </summary>
        </member>
        <member name="F:CommonWin32.MouseInput.TRACKMOUSEEVENT.cbSize">
            <summary>
            The size of the TRACKMOUSEEVENT structure, in bytes.
            </summary>
        </member>
        <member name="F:CommonWin32.MouseInput.TRACKMOUSEEVENT.dwFlags">
            <summary>
            The services requested. 
            </summary>
        </member>
        <member name="F:CommonWin32.MouseInput.TRACKMOUSEEVENT.hwndTrack">
            <summary>
            A handle to the window to track.
            </summary>
        </member>
        <member name="F:CommonWin32.MouseInput.TRACKMOUSEEVENT.dwHoverTime">
            <summary>
            The hover time-out (if TME_HOVER was specified in dwFlags), in milliseconds.
            default is 400.
            </summary>
        </member>
        <member name="T:CommonWin32.PEHeaderReader">
            <summary>
            Reads in the header information of the Portable Executable format.
            Provides information such as the date the assembly was compiled.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.TypeReg">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.TypeDsect">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.TypeNoLoad">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.TypeGroup">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.TypeNoPadded">
            <summary>
            The section should not be padded to the next boundary. This flag is obsolete and is replaced by IMAGE_SCN_ALIGN_1BYTES. This is valid only for object files.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.TypeCopy">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.ContentCode">
            <summary>
            The section contains executable code.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.ContentInitializedData">
            <summary>
            The section contains initialized data.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.ContentUninitializedData">
            <summary>
            The section contains uninitialized data.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.LinkOther">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.LinkInfo">
            <summary>
            The section contains comments or other information. The .drectve section has this type. This is valid for object files only.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.TypeOver">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.LinkRemove">
            <summary>
            The section will not become part of the image. This is valid only for object files.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.LinkComDat">
            <summary>
            The section contains COMDAT data. For more information, see section 5.5.6, COMDAT Sections (Object Only). This is valid only for object files.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.NoDeferSpecExceptions">
            <summary>
            Reset speculative exceptions handling bits in the TLB entries for this section.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.RelativeGP">
            <summary>
            The section contains data referenced through the global pointer (GP).
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.MemPurgeable">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.Memory16Bit">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.MemoryLocked">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.MemoryPreload">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.Align1Bytes">
            <summary>
            Align data on a 1-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.Align2Bytes">
            <summary>
            Align data on a 2-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.Align4Bytes">
            <summary>
            Align data on a 4-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.Align8Bytes">
            <summary>
            Align data on an 8-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.Align16Bytes">
            <summary>
            Align data on a 16-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.Align32Bytes">
            <summary>
            Align data on a 32-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.Align64Bytes">
            <summary>
            Align data on a 64-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.Align128Bytes">
            <summary>
            Align data on a 128-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.Align256Bytes">
            <summary>
            Align data on a 256-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.Align512Bytes">
            <summary>
            Align data on a 512-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.Align1024Bytes">
            <summary>
            Align data on a 1024-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.Align2048Bytes">
            <summary>
            Align data on a 2048-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.Align4096Bytes">
            <summary>
            Align data on a 4096-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.Align8192Bytes">
            <summary>
            Align data on an 8192-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.LinkExtendedRelocationOverflow">
            <summary>
            The section contains extended relocations.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.MemoryDiscardable">
            <summary>
            The section can be discarded as needed.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.MemoryNotCached">
            <summary>
            The section cannot be cached.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.MemoryNotPaged">
            <summary>
            The section is not pageable.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.MemoryShared">
            <summary>
            The section can be shared in memory.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.MemoryExecute">
            <summary>
            The section can be executed as code.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.MemoryRead">
            <summary>
            The section can be read.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.DataSectionFlags.MemoryWrite">
            <summary>
            The section can be written to.
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.dosHeader">
            <summary>
            The DOS header
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.fileHeader">
            <summary>
            The file header
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.optionalHeader32">
            <summary>
            Optional 32 bit file header 
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.optionalHeader64">
            <summary>
            Optional 64 bit file header 
            </summary>
        </member>
        <member name="F:CommonWin32.PEHeaderReader.imageSectionHeaders">
            <summary>
            Image Section headers. Number of sections is in the file header.
            </summary>
        </member>
        <member name="M:CommonWin32.PEHeaderReader.GetCallingAssemblyHeader">
            <summary>
            Gets the header of the .NET assembly that called this function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.PEHeaderReader.GetAssemblyHeader">
            <summary>
            Gets the header of the .NET assembly that called this function
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.PEHeaderReader.FromBinaryReader``1(System.IO.BinaryReader)">
            <summary>
            Reads in a block from a file and converts it to the struct
            type specified by the template parameter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="P:CommonWin32.PEHeaderReader.Is32BitHeader">
            <summary>
            Gets if the file header is 32 bit or not
            </summary>
        </member>
        <member name="P:CommonWin32.PEHeaderReader.FileHeader">
            <summary>
            Gets the file header
            </summary>
        </member>
        <member name="P:CommonWin32.PEHeaderReader.OptionalHeader32">
            <summary>
            Gets the optional header
            </summary>
        </member>
        <member name="P:CommonWin32.PEHeaderReader.OptionalHeader64">
            <summary>
            Gets the optional header
            </summary>
        </member>
        <member name="P:CommonWin32.PEHeaderReader.TimeStamp">
            <summary>
            Gets the timestamp from the file header
            </summary>
        </member>
        <member name="T:CommonWin32.PlatformInfo">
            <summary>
            Provides checks for platform support.
            </summary>
        </member>
        <member name="P:CommonWin32.PlatformInfo.Is64BitProcess">
            <summary>
            Gets a value indicating whether the current process is 64-bit.
            </summary>
            <value>
              <c>true</c> if the current process is 64-bit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonWin32.PlatformInfo.IsWin2kUp">
            <summary>
            Gets a value indicating whether the OS is Windows 2000 or higher.
            </summary>
            <value>
              <c>true</c> if the OS is Windows 2000 higher; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonWin32.PlatformInfo.IsWinXPUp">
            <summary>
            Gets a value indicating whether the OS is Windows XP or higher.
            </summary>
            <value>
              <c>true</c> if the OS is Windows XP higher; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonWin32.PlatformInfo.IsWinVistaUp">
            <summary>
            Gets a value indicating whether the OS is Windows vista or higher.
            </summary>
            <value>
            <c>true</c> if the OS is Windows vista or higher; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonWin32.PlatformInfo.IsWin7Up">
            <summary>
            Gets a value indicating whether the OS is Windows 7 or higher.
            </summary>
            <value>
            <c>true</c> if the OS is Windows 7 or higher; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonWin32.PlatformInfo.IsWin8Up">
            <summary>
            Gets a value indicating whether the OS is Windows 8 or higher.
            </summary>
            <value>
            <c>true</c> if the OS is Windows 8 or higher; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonWin32.PlatformInfo.IsWin81Up">
            <summary>
            Gets a value indicating whether the OS is Windows 8.1 or higher.
            </summary>
            <value>
            <c>true</c> if the OS is Windows 8.1 or higher; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonWin32.PlatformInfo.IsWin10Up">
            <summary>
            Gets a value indicating whether the OS is Windows 10 or higher.
            </summary>
            <value>
            <c>true</c> if the OS is Windows 10 or higher; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:CommonWin32.PowerManagement.PowerBroadcastType">
            <summary>
            wParam values for WM_POWERBROADCAST message.
            </summary>
        </member>
        <member name="F:CommonWin32.PowerManagement.PowerBroadcastType.PBT_APMPOWERSTATUSCHANGE">
            <summary>
            Power status has changed.
            </summary>
        </member>
        <member name="F:CommonWin32.PowerManagement.PowerBroadcastType.PBT_APMRESUMEAUTOMATIC">
            <summary>
            Operation is resuming automatically from a low-power state. This message is sent every time the system resumes.
            </summary>
        </member>
        <member name="F:CommonWin32.PowerManagement.PowerBroadcastType.PBT_APMRESUMESUSPEND">
            <summary>
            Operation is resuming from a low-power state. This message is sent after PBT_APMRESUMEAUTOMATIC if the resume is triggered by user input, such as pressing a key.
            </summary>
        </member>
        <member name="F:CommonWin32.PowerManagement.PowerBroadcastType.PBT_APMSUSPEND">
            <summary>
            System is suspending operation.
            </summary>
        </member>
        <member name="F:CommonWin32.PowerManagement.PowerBroadcastType.PBT_POWERSETTINGCHANGE">
            <summary>
            A power setting change event has been received.
            </summary>
        </member>
        <member name="F:CommonWin32.PowerManagement.PowerBroadcastType.PBT_APMBATTERYLOW">
            <summary>
            Battery power is low. In Windows Server 2008 and Windows Vista, use PBT_APMPOWERSTATUSCHANGE instead.
            </summary>
        </member>
        <member name="F:CommonWin32.PowerManagement.PowerBroadcastType.PBT_APMOEMEVENT">
            <summary>
            OEM-defined event occurred. In Windows Server 2008 and Windows Vista, this event is not available because these operating systems support only ACPI; APM BIOS events are not supported.
            </summary>
        </member>
        <member name="F:CommonWin32.PowerManagement.PowerBroadcastType.PBT_APMQUERYSUSPEND">
            <summary>
            Request for permission to suspend. In Windows Server 2008 and Windows Vista, use the SetThreadExecutionState function instead.
            </summary>
        </member>
        <member name="F:CommonWin32.PowerManagement.PowerBroadcastType.PBT_APMQUERYSUSPENDFAILED">
            <summary>
            Suspension request denied. In Windows Server 2008 and Windows Vista, use SetThreadExecutionState instead.
            </summary>
        </member>
        <member name="F:CommonWin32.PowerManagement.PowerBroadcastType.PBT_APMRESUMECRITICAL">
            <summary>
            Operation resuming after critical suspension. In Windows Server 2008 and Windows Vista, use PBT_APMRESUMEAUTOMATIC instead.
            </summary>
        </member>
        <member name="T:CommonWin32.Rectangles.POINT">
            <summary>
            Defines the x- and y- coordinates of a point.
            </summary>
        </member>
        <member name="M:CommonWin32.Rectangles.POINT.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonWin32.Rectangles.POINT"/> struct.
            </summary>
            <param name="x">The x location.</param>
            <param name="y">The y location.</param>
        </member>
        <member name="F:CommonWin32.Rectangles.POINT.x">
            <summary>
            The x-coordinate of the point.
            </summary>
        </member>
        <member name="F:CommonWin32.Rectangles.POINT.y">
            <summary>
            The y-coordinate of the point.
            </summary>
        </member>
        <member name="M:CommonWin32.Rectangles.POINT.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:CommonWin32.Rectangles.POINT.op_Implicit(System.Windows.Point)~CommonWin32.Rectangles.POINT">
            <summary>
            Converts to <see cref="T:CommonWin32.Rectangles.POINT"/>.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.Rectangles.POINT.op_Implicit(CommonWin32.Rectangles.POINT)~System.Windows.Point">
            <summary>
            Converts to <see cref="T:System.Windows.Point"/>.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.Rectangles.POINT.op_Implicit(System.Drawing.Point)~CommonWin32.Rectangles.POINT">
            <summary>
            Converts to <see cref="T:CommonWin32.Rectangles.POINT"/>.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.Rectangles.POINT.op_Implicit(CommonWin32.Rectangles.POINT)~System.Drawing.Point">
            <summary>
            Converts to <see cref="T:System.Drawing.Point"/>.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="T:CommonWin32.Rectangles.RECT">
            <summary>
            Defines the coordinates of the upper-left and lower-right corners of a rectangle.
            </summary>
        </member>
        <member name="F:CommonWin32.Rectangles.RECT.left">
            <summary>
            The x-coordinate of the upper-left corner of the rectangle.
            </summary>
        </member>
        <member name="F:CommonWin32.Rectangles.RECT.top">
            <summary>
            The y-coordinate of the upper-left corner of the rectangle.
            </summary>
        </member>
        <member name="F:CommonWin32.Rectangles.RECT.right">
            <summary>
            The x-coordinate of the lower-right corner of the rectangle.
            </summary>
        </member>
        <member name="F:CommonWin32.Rectangles.RECT.bottom">
            <summary>
            The y-coordinate of the lower-right corner of the rectangle.
            </summary>
        </member>
        <member name="P:CommonWin32.Rectangles.RECT.Width">
            <summary>
            Gets the calculated width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:CommonWin32.Rectangles.RECT.Height">
            <summary>
            Gets the calculated height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="M:CommonWin32.Rectangles.RECT.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:CommonWin32.Rectangles.RECT.op_Implicit(System.Windows.Rect)~CommonWin32.Rectangles.RECT">
            <summary>
            Converts to <see cref="T:CommonWin32.Rectangles.RECT" />.
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.Rectangles.RECT.op_Implicit(CommonWin32.Rectangles.RECT)~System.Windows.Rect">
            <summary>
            Converts to <see cref="T:System.Windows.Rect" />.
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.Rectangles.RECT.op_Implicit(System.Drawing.Rectangle)~CommonWin32.Rectangles.RECT">
            <summary>
            Converts to <see cref="T:CommonWin32.Rectangles.RECT" />.
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:CommonWin32.Rectangles.RECT.op_Implicit(CommonWin32.Rectangles.RECT)~System.Drawing.Rectangle">
            <summary>
            Converts to <see cref="T:System.Drawing.Rectangle" />.
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="T:CommonWin32.Shells.APPBARDATA">
            <summary>
            Contains information about a system appbar message.
            </summary>
        </member>
        <member name="P:CommonWin32.Shells.APPBARDATA.IsSupported">
            <summary>
            Gets a value indicating whether this struct is supported on current platform.
            </summary>
            <value>
            <c>true</c> if this struct is supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:CommonWin32.Shells.APPBARDATA.cbSize">
            <summary>
            The size of the structure, in bytes.
            </summary>
        </member>
        <member name="F:CommonWin32.Shells.APPBARDATA.hWnd">
            <summary>
            The handle to the appbar window.
            </summary>
        </member>
        <member name="F:CommonWin32.Shells.APPBARDATA.uCallbackMessage">
            <summary>
            An application-defined message identifier. The application uses the specified identifier for notification messages that it sends to the appbar identified by the hWnd member. This member is used when sending the ABM_NEW message.
            </summary>
        </member>
        <member name="F:CommonWin32.Shells.APPBARDATA.uEdge">
            <summary>
            A value that specifies an edge of the screen.
            </summary>
        </member>
        <member name="F:CommonWin32.Shells.APPBARDATA.rc">
            <summary>
            A RECT structure whose use varies depending on the message.
            </summary>
        </member>
        <member name="F:CommonWin32.Shells.APPBARDATA.lParam">
            <summary>
            A message-dependent value.
            </summary>
        </member>
        <member name="F:CommonWin32.Shells.AppBarEdge.ABE_LEFT">
            <summary>
            Left edge.
            </summary>
        </member>
        <member name="F:CommonWin32.Shells.AppBarEdge.ABE_TOP">
            <summary>
            Top edge.
            </summary>
        </member>
        <member name="F:CommonWin32.Shells.AppBarEdge.ABE_RIGHT">
            <summary>
            Right edge.
            </summary>
        </member>
        <member name="F:CommonWin32.Shells.AppBarEdge.ABE_BOTTOM">
            <summary>
            Bottom edge.
            </summary>
        </member>
        <member name="T:CommonWin32.Shells.AppBarMessage">
            <summary>
            Appbar message value for SHAppBarMessage.
            </summary>
        </member>
        <member name="F:CommonWin32.Shells.AppBarMessage.ABM_NEW">
            <summary>
            Registers a new appbar and specifies the message identifier that the system should use to send notification messages to the appbar.
            </summary>
        </member>
        <member name="F:CommonWin32.Shells.AppBarMessage.ABM_REMOVE">
            <summary>
            Unregisters an appbar, removing the bar from the system's internal list.
            </summary>
        </member>
        <member name="F:CommonWin32.Shells.AppBarMessage.ABM_QUERYPOS">
            <summary>
            Requests a size and screen position for an appbar.
            </summary>
        </member>
        <member name="F:CommonWin32.Shells.AppBarMessage.ABM_SETPOS">
            <summary>
            Sets the size and screen position of an appbar.
            </summary>
        </member>
        <member name="F:CommonWin32.Shells.AppBarMessage.ABM_GETSTATE">
            <summary>
            Retrieves the autohide and always-on-top states of the Windows taskbar.
            </summary>
        </member>
        <member name="F:CommonWin32.Shells.AppBarMessage.ABM_GETTASKBARPOS">
            <summary>
            Retrieves the bounding rectangle of the Windows taskbar.
            </summary>
        </member>
        <member name="F:CommonWin32.Shells.AppBarMessage.ABM_ACTIVATE">
            <summary>
            Notifies the system to activate or deactivate an appbar. The lParam member of the APPBARDATA pointed to by pData is set to TRUE to activate or FALSE to deactivate.
            </summary>
        </member>
        <member name="F:CommonWin32.Shells.AppBarMessage.ABM_GETAUTOHIDEBAR">
            <summary>
            Retrieves the handle to the autohide appbar associated with a particular edge of the screen.
            </summary>
        </member>
        <member name="F:CommonWin32.Shells.AppBarMessage.ABM_SETAUTOHIDEBAR">
            <summary>
            Registers or unregisters an autohide appbar for an edge of the screen.
            </summary>
        </member>
        <member name="F:CommonWin32.Shells.AppBarMessage.ABM_WINDOWPOSCHANGED">
            <summary>
            Notifies the system when an appbar's position has changed.
            </summary>
        </member>
        <member name="F:CommonWin32.Shells.AppBarMessage.ABM_SETSTATE">
            <summary>
            Windows XP and later: Sets the state of the appbar's autohide and always-on-top attributes.
            </summary>
        </member>
        <member name="T:CommonWin32.Shells.SHFILEINFO">
            <summary>
            Contains information about a file object.
            </summary>
        </member>
        <member name="F:CommonWin32.Shells.SHFILEINFO.hIcon">
            <summary>
            A handle to the icon that represents the file. 
            </summary>
        </member>
        <member name="F:CommonWin32.Shells.SHFILEINFO.iIcon">
            <summary>
            The index of the icon image within the system image list.
            </summary>
        </member>
        <member name="F:CommonWin32.Shells.SHFILEINFO.dwAttributes">
            <summary>
            An array of values that indicates the attributes of the file object.
            </summary>
        </member>
        <member name="F:CommonWin32.Shells.SHFILEINFO.szDisplayName">
            <summary>
            A string that contains the name of the file as it appears in the Windows Shell, or the path and file name of the file that contains the icon representing the file.
            </summary>
        </member>
        <member name="F:CommonWin32.Shells.SHFILEINFO.szTypeName">
            <summary>
            A string that describes the type of file.
            </summary>
        </member>
        <member name="F:CommonWin32.SystemInformation.VersionConditionMask.VER_EQUAL">
            <summary>
            The current value must be equal to the specified value.
            </summary>
        </member>
        <member name="F:CommonWin32.SystemInformation.VersionConditionMask.VER_GREATER">
            <summary>
            The current value must be greater than the specified value.
            </summary>
        </member>
        <member name="F:CommonWin32.SystemInformation.VersionConditionMask.VER_GREATER_EQUAL">
            <summary>
            The current value must be greater than or equal to the specified value.
            </summary>
        </member>
        <member name="F:CommonWin32.SystemInformation.VersionConditionMask.VER_LESS">
            <summary>
            The current value must be less than the specified value.
            </summary>
        </member>
        <member name="F:CommonWin32.SystemInformation.VersionConditionMask.VER_LESS_EQUAL">
            <summary>
            The current value must be less than or equal to the specified value.
            </summary>
        </member>
        <member name="F:CommonWin32.SystemInformation.VersionConditionMask.VER_AND">
            <summary>
            All product suites specified in the wSuiteMask member must be present in the current system.
            </summary>
        </member>
        <member name="F:CommonWin32.SystemInformation.VersionConditionMask.VER_OR">
            <summary>
            At least one of the specified product suites must be present in the current system.
            </summary>
        </member>
        <member name="F:CommonWin32.SystemInformation.VersionTypeMask.VER_BUILDNUMBER">
            <summary>
            dwBuildNumber
            </summary>
        </member>
        <member name="F:CommonWin32.SystemInformation.VersionTypeMask.VER_MAJORVERSION">
            <summary>
            dwMajorVersion.
            If you are testing the major version, you must also test the minor version and the service pack major and minor versions.
            </summary>
        </member>
        <member name="F:CommonWin32.SystemInformation.VersionTypeMask.VER_MINORVERSION">
            <summary>
            dwMinorVersion
            </summary>
        </member>
        <member name="F:CommonWin32.SystemInformation.VersionTypeMask.VER_PLATFORMID">
            <summary>
            dwPlatformId
            </summary>
        </member>
        <member name="F:CommonWin32.SystemInformation.VersionTypeMask.VER_SERVICEPACKMAJOR">
            <summary>
            wServicePackMajor
            </summary>
        </member>
        <member name="F:CommonWin32.SystemInformation.VersionTypeMask.VER_SERVICEPACKMINOR">
            <summary>
            wServicePackMinor
            </summary>
        </member>
        <member name="F:CommonWin32.SystemInformation.VersionTypeMask.VER_SUITENAME">
            <summary>
            wSuiteMask
            </summary>
        </member>
        <member name="F:CommonWin32.SystemInformation.VersionTypeMask.VER_PRODUCT_TYPE">
            <summary>
            wProductType
            </summary>
        </member>
        <member name="T:CommonWin32.TreeViewControl.TreeViewMessage">
            <summary>
            Messages for treeview.
            </summary>
        </member>
        <member name="F:CommonWin32.TreeViewControl.TreeViewMessage.TVM_FIRST">
            <summary>
            For value offset.
            </summary>
        </member>
        <member name="F:CommonWin32.TreeViewControl.TreeViewMessage.TVM_SETEXTENDEDSTYLE">
            <summary>
            Informs the tree-view control to set extended styles. 
            </summary>
        </member>
        <member name="F:CommonWin32.TreeViewControl.TreeViewMessage.TVM_GETEXTENDEDSTYLE">
            <summary>
            Retrieves the extended style for a tree-view control. 
            </summary>
        </member>
        <member name="F:CommonWin32.TreeViewControl.TreeViewMessage.TVM_SETAUTOSCROLLINFO">
            <summary>
            Sets information used to determine auto-scroll characteristics.
            </summary>
        </member>
        <member name="T:CommonWin32.TreeViewControl.TreeViewStyles">
            <summary>
            Style for treeview.
            </summary>
        </member>
        <member name="F:CommonWin32.TreeViewControl.TreeViewStyles.TVS_NOHSCROLL">
            <summary>
            Disables horizontal scrolling in the control. The control will not display any horizontal scroll bars.
            </summary>
        </member>
        <member name="T:CommonWin32.TreeViewControl.TreeViewStylesEx">
            <summary>
            Extended style flags for treeview.
            </summary>
        </member>
        <member name="F:CommonWin32.TreeViewControl.TreeViewStylesEx.TVS_EX_AUTOHSCROLL">
            <summary>
            Windows Vista. Remove the horizontal scroll bar and auto-scroll depending on mouse position.
            </summary>
        </member>
        <member name="F:CommonWin32.TreeViewControl.TreeViewStylesEx.TVS_EX_FADEINOUTEXPANDOS">
            <summary>
            Windows Vista. Fade expando buttons in or out when the mouse moves away or into a state of hovering over the control.
            </summary>
        </member>
        <member name="F:CommonWin32.TreeViewControl.TreeViewStylesEx.TVS_EX_DOUBLEBUFFER">
            <summary>
            Windows Vista. Specifies how the background is erased or filled.
            </summary>
        </member>
        <member name="T:CommonWin32.VisualStyles.MARGINS">
            <summary>
            Defines the margins of windows that have visual styles applied.
            </summary>
        </member>
        <member name="P:CommonWin32.VisualStyles.MARGINS.IsSupported">
            <summary>
            Gets a value indicating whether this struct is supported on current platform.
            </summary>
            <value>
            <c>true</c> if this struct is supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:CommonWin32.VisualStyles.MARGINS.cxLeftWidth">
            <summary>
            Width of the left border that retains its size.
            </summary>
        </member>
        <member name="F:CommonWin32.VisualStyles.MARGINS.cxRightWidth">
            <summary>
            Width of the right border that retains its size.
            </summary>
        </member>
        <member name="F:CommonWin32.VisualStyles.MARGINS.cyTopHeight">
            <summary>
            Height of the top border that retains its size.
            </summary>
        </member>
        <member name="F:CommonWin32.VisualStyles.MARGINS.cyBottomHeight">
            <summary>
            Height of the bottom border that retains its size.
            </summary>
        </member>
        <member name="M:CommonWin32.VisualStyles.MARGINS.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:CommonWin32.WindowClasses.ClassLong">
            <summary>
            Values for *ClassLong function.
            </summary>
        </member>
        <member name="F:CommonWin32.WindowClasses.ClassLong.GCW_ATOM">
            <summary>
            Retrieves an ATOM value that uniquely identifies the window class. This is the same atom that the RegisterClassEx function returns.
            </summary>
        </member>
        <member name="F:CommonWin32.WindowClasses.ClassLong.GCL_CBCLSEXTRA">
            <summary>
            Retrieves the size, in bytes, of the extra memory associated with the class.
            </summary>
        </member>
        <member name="F:CommonWin32.WindowClasses.ClassLong.GCL_CBWNDEXTRA">
            <summary>
            Retrieves the size, in bytes, of the extra window memory associated with each window in the class
            </summary>
        </member>
        <member name="F:CommonWin32.WindowClasses.ClassLong.GCLP_HBRBACKGROUND">
            <summary>
            Retrieves a handle to the background brush associated with the class.
            </summary>
        </member>
        <member name="F:CommonWin32.WindowClasses.ClassLong.GCLP_HCURSOR">
            <summary>
            Retrieves a handle to the cursor associated with the class.
            </summary>
        </member>
        <member name="F:CommonWin32.WindowClasses.ClassLong.GCLP_HICON">
            <summary>
            Retrieves a handle to the icon associated with the class.
            </summary>
        </member>
        <member name="F:CommonWin32.WindowClasses.ClassLong.GCLP_HICONSM">
            <summary>
            Retrieves a handle to the small icon associated with the class.
            </summary>
        </member>
        <member name="F:CommonWin32.WindowClasses.ClassLong.GCLP_HMODULE">
            <summary>
            Retrieves a handle to the module that registered the class.
            </summary>
        </member>
        <member name="F:CommonWin32.WindowClasses.ClassLong.GCLP_MENUNAME">
            <summary>
            Retrieves the pointer to the menu name string. The string identifies the menu resource associated with the class.
            </summary>
        </member>
        <member name="F:CommonWin32.WindowClasses.ClassLong.GCL_STYLE">
            <summary>
            Retrieves the window-class style bits.
            </summary>
        </member>
        <member name="F:CommonWin32.WindowClasses.ClassLong.GCLP_WNDPROC">
            <summary>
            Retrieves the address of the window procedure, or a handle representing the address of the window procedure. You must use the CallWindowProc function to call the window procedure.
            </summary>
        </member>
        <member name="T:CommonWin32.WindowClasses.WindowLong">
            <summary>
            Values for *WindowLong function.
            </summary>
        </member>
        <member name="F:CommonWin32.WindowClasses.WindowLong.GWL_WNDPROC">
            <summary>
            Retrieves the pointer to the window procedure, or a handle representing the pointer to the window procedure. You must use the CallWindowProc function to call the window procedure.
            </summary>
        </member>
        <member name="F:CommonWin32.WindowClasses.WindowLong.GWL_HINSTANCE">
            <summary>
            Retrieves a handle to the application instance.
            </summary>
        </member>
        <member name="F:CommonWin32.WindowClasses.WindowLong.GWL_HWNDPARENT">
            <summary>
            Retrieves a handle to the parent window, if there is one.
            </summary>
        </member>
        <member name="F:CommonWin32.WindowClasses.WindowLong.GWL_STYLE">
            <summary>
            Retrieves the window styles.
            </summary>
        </member>
        <member name="F:CommonWin32.WindowClasses.WindowLong.GWL_EXSTYLE">
            <summary>
            Retrieves the extended window styles.
            </summary>
        </member>
        <member name="F:CommonWin32.WindowClasses.WindowLong.GWL_USERDATA">
            <summary>
            Retrieves the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.
            </summary>
        </member>
        <member name="F:CommonWin32.WindowClasses.WindowLong.GWL_ID">
            <summary>
            Retrieves the identifier of the window.
            </summary>
        </member>
        <member name="T:CommonWin32.Windows.ClassStyles">
            <summary>
            Class style flags for a window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.ClassStyles.CS_VREDRAW">
            <summary>
            Redraws the entire window if a movement or size adjustment changes the height of the client area.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.ClassStyles.CS_HREDRAW">
            <summary>
            Redraws the entire window if a movement or size adjustment changes the width of the client area.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.ClassStyles.CS_DBLCLKS">
            <summary>
            Sends a double-click message to the window procedure when the user double-clicks the mouse while the cursor is within a window belonging to the class.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.ClassStyles.CS_OWNDC">
            <summary>
            Allocates a unique device context for each window in the class.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.ClassStyles.CS_CLASSDC">
            <summary>
            Allocates one device context to be shared by all windows in the class. 
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.ClassStyles.CS_PARENTDC">
            <summary>
            Sets the clipping rectangle of the child window to that of the parent window so that the child can draw on the parent. 
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.ClassStyles.CS_NOCLOSE">
            <summary>
            Disables Close on the window menu.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.ClassStyles.CS_SAVEBITS">
            <summary>
            Saves, as a bitmap, the portion of the screen image obscured by a window of this class. When the window is removed, the system uses the saved bitmap to restore the screen image, including other windows that were obscured.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.ClassStyles.CS_BYTEALIGNCLIENT">
            <summary>
            Aligns the window's client area on a byte boundary (in the x direction). This style affects the width of the window and its horizontal placement on the display.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.ClassStyles.CS_BYTEALIGNWINDOW">
            <summary>
            Aligns the window on a byte boundary (in the x direction). This style affects the width of the window and its horizontal placement on the display.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.ClassStyles.CS_GLOBALCLASS">
            <summary>
            Indicates that the window class is an application global class.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.ClassStyles.CS_DROPSHADOW">
            <summary>
            Enables the drop shadow effect on a window. The effect is turned on and off through SPI_SETDROPSHADOW. 
            </summary>
        </member>
        <member name="T:CommonWin32.Windows.MINMAXINFO">
            <summary>
            Contains information about a window's maximized size and position and its minimum and 
            maximum tracking size.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.MINMAXINFO.ptReserved">
            <summary>
            Reserved; do not use.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.MINMAXINFO.ptMaxSize">
            <summary>
            The maximized width (x member) and the maximized height (y member) of the window. 
            For top-level windows, this value is based on the width of the primary monitor.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.MINMAXINFO.ptMaxPosition">
            <summary>
            The position of the left side of the maximized window (x member) and the position 
            of the top of the maximized window (y member). For top-level windows, this value 
            is based on the position of the primary monitor.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.MINMAXINFO.ptMinTrackSize">
            <summary>
            The minimum tracking width (x member) and the minimum tracking height (y member) 
            of the window. This value can be obtained programmatically from the system metrics 
            SM_CXMINTRACK and SM_CYMINTRACK (see the GetSystemMetrics function).
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.MINMAXINFO.ptMaxTrackSize">
            <summary>
            The maximum tracking width (x member) and the maximum tracking height (y member) 
            of the window. This value is based on the size of the virtual screen and can be 
            obtained programmatically from the system metrics SM_CXMAXTRACK and SM_CYMAXTRACK 
            (see the GetSystemMetrics function).
            </summary>
        </member>
        <member name="T:CommonWin32.Windows.NcCalcResults">
            <summary>
            Values for possible WM_NCCALCSIZE message.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.NcCalcResults.WVR_ALIGNTOP">
            <summary>
            Specifies that the client area of the window is to be preserved and aligned with the top of the new position of the window. For example, to align the client area to the upper-left corner, return the WVR_ALIGNTOP and WVR_ALIGNLEFT values.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.NcCalcResults.WVR_ALIGNLEFT">
            <summary>
            Specifies that the client area of the window is to be preserved and aligned with the left side of the new position of the window. For example, to align the client area to the lower-left corner, return the WVR_ALIGNLEFT and WVR_ALIGNBOTTOM values.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.NcCalcResults.WVR_ALIGNBOTTOM">
            <summary>
            Specifies that the client area of the window is to be preserved and aligned with the bottom of the new position of the window. For example, to align the client area to the top-left corner, return the WVR_ALIGNTOP and WVR_ALIGNLEFT values.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.NcCalcResults.WVR_ALIGNRIGHT">
            <summary>
            Specifies that the client area of the window is to be preserved and aligned with the right side of the new position of the window. For example, to align the client area to the lower-right corner, return the WVR_ALIGNRIGHT and WVR_ALIGNBOTTOM values.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.NcCalcResults.WVR_HREDRAW">
            <summary>
            Used in combination with any other values, except WVR_VALIDRECTS, causes the window to be completely redrawn if the client rectangle changes size horizontally. This value is similar to CS_HREDRAW class style
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.NcCalcResults.WVR_VREDRAW">
            <summary>
            Used in combination with any other values, except WVR_VALIDRECTS, causes the window to be completely redrawn if the client rectangle changes size vertically. This value is similar to CS_VREDRAW class style
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.NcCalcResults.WVR_REDRAW">
            <summary>
            This value causes the entire window to be redrawn. It is a combination of WVR_HREDRAW and WVR_VREDRAW values.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.NcCalcResults.WVR_VALIDRECTS">
            <summary>
            This value indicates that, upon return from WM_NCCALCSIZE, the rectangles specified by the rgrc[1] and rgrc[2] members of the NCCALCSIZE_PARAMS structure contain valid destination and source area rectangles, respectively. The system combines these rectangles to calculate the area of the window to be preserved. The system copies any part of the window image that is within the source rectangle and clips the image to the destination rectangle. Both rectangles are in parent-relative or screen-relative coordinates. This flag cannot be combined with any other flags.
            This return value allows an application to implement more elaborate client-area preservation strategies, such as centering or preserving a subset of the client area.
            </summary>
        </member>
        <member name="T:CommonWin32.Windows.NCCALCSIZE_PARAMS">
            <summary>
            Contains information that an application can use while processing the WM_NCCALCSIZE 
            message to calculate the size, position, and valid contents of the client area of a window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.NCCALCSIZE_PARAMS.rectProposed">
            <summary>
            Contains the new coordinates of a window that has been moved or resized, 
            that is, it is the proposed new window coordinates.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.NCCALCSIZE_PARAMS.rectBeforeMove">
            <summary>
            Contains the coordinates of the window before it was moved or resized.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.NCCALCSIZE_PARAMS.rectClientBeforeMove">
            <summary>
            Contains the coordinates of the window's client area before the window 
            was moved or resized.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.NCCALCSIZE_PARAMS.lpPos">
            <summary>
            Pointer to a WINDOWPOS structure that contains the size and position 
            values specified in the operation that moved or resized the window.
            </summary>
        </member>
        <member name="T:CommonWin32.Windows.NcHitTest">
            <summary>
            Location of cursor hot spot returned in <see cref="F:CommonWin32.Windows.WindowMessage.WM_NCHITTEST" />.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.NcHitTest.HTERROR">
            <summary>
            On the screen background or on a dividing line between windows 
            (same as HTNOWHERE, except that the DefWindowProc function produces a system beep to indicate an error).
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.NcHitTest.HTTRANSPARENT">
            <summary>
            In a window currently covered by another window in the same thread 
            (the message will be sent to underlying windows in the same thread until one of them returns a code that is not HTTRANSPARENT).
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.NcHitTest.HTNOWHERE">
            <summary>
            On the screen background or on a dividing line between windows.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.NcHitTest.HTCLIENT">
            <summary>In a client area.</summary>
        </member>
        <member name="F:CommonWin32.Windows.NcHitTest.HTCAPTION">
            <summary>In a title bar.</summary>
        </member>
        <member name="F:CommonWin32.Windows.NcHitTest.HTSYSMENU">
            <summary>In a window menu or in a Close button in a child window.</summary>
        </member>
        <member name="F:CommonWin32.Windows.NcHitTest.HTGROWBOX">
            <summary>In a size box (same as HTSIZE).</summary>
        </member>
        <member name="F:CommonWin32.Windows.NcHitTest.HTSIZE">
            <summary>In a size box (same as HTSIZE).</summary>
        </member>
        <member name="F:CommonWin32.Windows.NcHitTest.HTMENU">
            <summary>In a menu.</summary>
        </member>
        <member name="F:CommonWin32.Windows.NcHitTest.HTHSCROLL">
            <summary>In a horizontal scroll bar.</summary>
        </member>
        <member name="F:CommonWin32.Windows.NcHitTest.HTVSCROLL">
            <summary>In the vertical scroll bar.</summary>
        </member>
        <member name="F:CommonWin32.Windows.NcHitTest.HTMINBUTTON">
            <summary>In a Minimize button.</summary>
        </member>
        <member name="F:CommonWin32.Windows.NcHitTest.HTREDUCE">
            <summary>In a Minimize button.</summary>
        </member>
        <member name="F:CommonWin32.Windows.NcHitTest.HTMAXBUTTON">
            <summary>In a Maximize button.</summary>
        </member>
        <member name="F:CommonWin32.Windows.NcHitTest.HTZOOM">
            <summary>
            In a Maximize button.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.NcHitTest.HTLEFT">
            <summary>In the left border of a resizable window 
            (the user can click the mouse to resize the window horizontally).</summary>
        </member>
        <member name="F:CommonWin32.Windows.NcHitTest.HTRIGHT">
            <summary>
            In the right border of a resizable window 
            (the user can click the mouse to resize the window horizontally).
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.NcHitTest.HTTOP">
            <summary>In the upper-horizontal border of a window.</summary>
        </member>
        <member name="F:CommonWin32.Windows.NcHitTest.HTTOPLEFT">
            <summary>In the upper-left corner of a window border.</summary>
        </member>
        <member name="F:CommonWin32.Windows.NcHitTest.HTTOPRIGHT">
            <summary>In the upper-right corner of a window border.</summary>
        </member>
        <member name="F:CommonWin32.Windows.NcHitTest.HTBOTTOM">
            <summary>	In the lower-horizontal border of a resizable window 
            (the user can click the mouse to resize the window vertically).</summary>
        </member>
        <member name="F:CommonWin32.Windows.NcHitTest.HTBOTTOMLEFT">
            <summary>In the lower-left corner of a border of a resizable window 
            (the user can click the mouse to resize the window diagonally).</summary>
        </member>
        <member name="F:CommonWin32.Windows.NcHitTest.HTBOTTOMRIGHT">
            <summary>	
            In the lower-right corner of a border of a resizable window 
            (the user can click the mouse to resize the window diagonally).</summary>
        </member>
        <member name="F:CommonWin32.Windows.NcHitTest.HTBORDER">
            <summary>In the border of a window that does not have a sizing border.</summary>
        </member>
        <member name="F:CommonWin32.Windows.NcHitTest.HTCLOSE">
            <summary>In a Close button.</summary>
        </member>
        <member name="F:CommonWin32.Windows.NcHitTest.HTHELP">
            <summary>In a Help button.</summary>
        </member>
        <member name="T:CommonWin32.Windows.SetWindowPosOptions">
            <summary>
            Flags for the window position.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SetWindowPosOptions.SWP_NOSIZE">
            <summary>
            Retains the current size (ignores the cx and cy parameters).
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SetWindowPosOptions.SWP_NOMOVE">
            <summary>
            Retains the current position (ignores the x and y parameters).
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SetWindowPosOptions.SWP_NOZORDER">
            <summary>
            Retains the current Z order (ignores the hwndInsertAfter parameter).
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SetWindowPosOptions.SWP_NOREDRAW">
            <summary>
            Does not redraw changes. If this flag is set, no repainting of any kind occurs. 
            This applies to the client area, the nonclient area (including the title bar and scroll bars),
            and any part of the parent window uncovered as a result of the window being moved. 
            When this flag is set, the application must explicitly invalidate or redraw any parts 
            of the window and parent window that need redrawing.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SetWindowPosOptions.SWP_NOACTIVATE">
            <summary>
            Does not activate the window. If this flag is not set, 
            the window is activated and moved to the top of either the 
            topmost or non-topmost group (depending on the setting of the hwndInsertAfter member).
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SetWindowPosOptions.SWP_FRAMECHANGED">
            <summary>
            Sends a WM_NCCALCSIZE message to the window, 
            even if the window's size is not being changed. 
            If this flag is not specified, WM_NCCALCSIZE is sent only 
            when the window's size is being changed.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SetWindowPosOptions.SWP_DRAWFRAME">
            <summary>
            Draws a frame (defined in the window's class description) 
            around the window. Same as the SWP_FRAMECHANGED flag.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SetWindowPosOptions.SWP_SHOWWINDOW">
            <summary>
            Displays the window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SetWindowPosOptions.SWP_HIDEWINDOW">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SetWindowPosOptions.SWP_NOCOPYBITS">
            <summary>
            Discards the entire contents of the client area. 
            If this flag is not specified, the valid contents of the client area are 
            saved and copied back into the client area after the window is sized or repositioned.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SetWindowPosOptions.SWP_NOOWNERZORDER">
            <summary>
            Does not change the owner window's position in the Z order.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SetWindowPosOptions.SWP_NOREPOSITION">
            <summary>
            Does not change the owner window's position in the Z order. Same as the SWP_NOOWNERZORDER flag.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SetWindowPosOptions.SWP_NOSENDCHANGING">
            <summary>
            Prevents the window from receiving the WM_WINDOWPOSCHANGING message.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SetWindowPosOptions.SWP_DEFERERASE">
            <summary>
            Prevents generation of the WM_SYNCPAINT message.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SetWindowPosOptions.SWP_ASYNCWINDOWPOS">
            <summary>
            If the calling thread and the thread that owns the window are attached to different input queues, the system posts the request to the thread that owns the window. This prevents the calling thread from blocking its execution while other threads process the request.
            </summary>
        </member>
        <member name="T:CommonWin32.Windows.ShowWindowOption">
            <summary>
            Options for ShowWindow option.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.ShowWindowOption.SW_HIDE">
            <summary>
            Hides the window and activates another window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.ShowWindowOption.SW_SHOWNORMAL">
            <summary>
            Activates and displays a window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when displaying the window for the first time.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.ShowWindowOption.SW_SHOWMINIMIZED">
            <summary>
            Activates the window and displays it as a minimized window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.ShowWindowOption.SW_MAXIMIZE">
            <summary>
            Maximizes the specified window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.ShowWindowOption.SW_SHOWNOACTIVATE">
            <summary>
            Displays a window in its most recent size and position. This value is similar to SW_SHOWNORMAL, except that the window is not activated.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.ShowWindowOption.SW_SHOW">
            <summary>
            Activates the window and displays it in its current size and position.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.ShowWindowOption.SW_MINIMIZE">
            <summary>
            Minimizes the specified window and activates the next top-level window in the Z order.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.ShowWindowOption.SW_SHOWMINNOACTIVE">
            <summary>
            Displays the window as a minimized window. This value is similar to SW_SHOWMINIMIZED, except the window is not activated.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.ShowWindowOption.SW_SHOWNA">
            <summary>
            Displays the window in its current size and position. This value is similar to SW_SHOW, except that the window is not activated.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.ShowWindowOption.SW_RESTORE">
            <summary>
            Activates and displays the window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when restoring a minimized window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.ShowWindowOption.SW_SHOWDEFAULT">
            <summary>
            Sets the show state based on the SW_ value specified in the STARTUPINFO structure passed to the CreateProcess function by the program that started the application.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.ShowWindowOption.SW_FORCEMINIMIZE">
            <summary>
            Minimizes a window, even if the thread that owns the window is not responding. This flag should only be used when minimizing windows from a different thread.
            </summary>
        </member>
        <member name="T:CommonWin32.Windows.SystemCommand">
            <summary>
            Parameter for WM_SYSCOMMAND.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SystemCommand.SC_SIZE">
            <summary>
            Sizes the window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SystemCommand.SC_MOVE">
            <summary>
            Moves the window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SystemCommand.SC_MINIMIZE">
            <summary>
            Minimizes the window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SystemCommand.SC_MAXIMIZE">
            <summary>
            Maximizes the window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SystemCommand.SC_MAXIMIZE2">
            <summary>
            fired from double-click on caption
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SystemCommand.SC_NEXTWINDOW">
            <summary>
            Moves to the next window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SystemCommand.SC_PREVWINDOW">
            <summary>
            Moves to the previous window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SystemCommand.SC_CLOSE">
            <summary>
            Closes the window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SystemCommand.SC_VSCROLL">
            <summary>
            Scrolls vertically.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SystemCommand.SC_HSCROLL">
            <summary>
            Scrolls horizontally.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SystemCommand.SC_MOUSEMENU">
            <summary>
            Retrieves the window menu as a result of a mouse click.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SystemCommand.SC_KEYMENU">
            <summary>
            Retrieves the window menu as a result of a keystroke.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SystemCommand.SC_RESTORE">
            <summary>
            Restores the window to its normal position and size.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SystemCommand.SC_RESTORE2">
            <summary>
            fired from double-click on caption
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SystemCommand.SC_TASKLIST">
            <summary>
            Activates the Start menu.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SystemCommand.SC_SCREENSAVE">
            <summary>
            Executes the screen saver application.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SystemCommand.SC_HOTKEY">
            <summary>
            Activates the window associated with the application-specified hot key. The lParam parameter identifies the window to activate.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SystemCommand.SC_DEFAULT">
            <summary>
            Selects the default item; the user double-clicked the window menu.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SystemCommand.SC_MONITORPOWER">
            <summary>
            Sets the state of the display. This command supports devices that have power-saving features, such as a battery-powered personal computer.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.SystemCommand.SC_CONTEXTHELP">
            <summary>
            Changes the cursor to a question mark with a pointer. If the user then clicks a control in the dialog box, the control receives a WM_HELP message.
            </summary>
        </member>
        <member name="T:CommonWin32.Windows.WindowMessage">
            <summary>
            Enumerated values of window messages.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_NULL">
            <summary>
            Performs no operation. An application sends the WM_NULL message if it wants to post a message that the recipient window will ignore.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_CREATE">
            <summary>
            Sent when an application requests that a window be created by calling the CreateWindowEx or CreateWindow function. (The message is sent before the function returns.) The window procedure of the new window receives this message after the window is created, but before the window becomes visible.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_DESTROY">
            <summary>
            Sent when a window is being destroyed. It is sent to the window procedure of the window being destroyed after the window is removed from the screen.
            This message is sent first to the window being destroyed and then to the child windows (if any) as they are destroyed. During the processing of the message, it can be assumed that all child windows still exist.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MOVE">
            <summary>
            Sent after a window has been moved.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_SIZE">
            <summary>
            Sent to a window after its size has changed.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_ACTIVATE">
            <summary>
            Sent to both the window being activated and the window being deactivated. If the windows use the same input queue, the message is sent synchronously, first to the window procedure of the top-level window being deactivated, then to the window procedure of the top-level window being activated. If the windows use different input queues, the message is sent asynchronously, so the window is activated immediately.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_SETFOCUS">
            <summary>
            Sent to a window after it has gained the keyboard focus.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_KILLFOCUS">
            <summary>
            Sent to a window immediately before it loses the keyboard focus.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_ENABLE">
            <summary>
            Sent when an application changes the enabled state of a window. It is sent to the window whose enabled state is changing. This message is sent before the EnableWindow function returns, but after the enabled state (WS_DISABLED style bit) of the window has changed.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_SETREDRAW">
            <summary>
            An application sends the WM_SETREDRAW message to a window to allow changes in that window to be redrawn or to prevent changes in that window from being redrawn.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_SETTEXT">
            <summary>
            Sets the text of a window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_GETTEXT">
            <summary>
            Copies the text that corresponds to a window into a buffer provided by the caller.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_GETTEXTLENGTH">
            <summary>
            Determines the length, in characters, of the text associated with a window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_PAINT">
            <summary>
            The WM_PAINT message is sent when the system or another application makes a request to paint a portion of an application's window. The message is sent when the UpdateWindow or RedrawWindow function is called, or by the DispatchMessage function when the application obtains a WM_PAINT message by using the GetMessage or PeekMessage function.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_CLOSE">
            <summary>
            Sent as a signal that a window or an application should terminate.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_QUERYENDSESSION">
            <summary>
            The WM_QUERYENDSESSION message is sent when the user chooses to end the session or when an application calls one of the system shutdown functions. If any application returns zero, the session is not ended. The system stops sending WM_QUERYENDSESSION messages as soon as one application returns zero.
            After processing this message, the system sends the WM_ENDSESSION message with the wParam parameter set to the results of the WM_QUERYENDSESSION message.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_QUIT">
            <summary>
            Indicates a request to terminate an application, and is generated when the application calls the PostQuitMessage function. This message causes the GetMessage function to return zero.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_QUERYOPEN">
            <summary>
            Sent to an icon when the user requests that the window be restored to its previous size and position.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_ERASEBKGND">
            <summary>
            Sent when the window background must be erased (for example, when a window is resized). The message is sent to prepare an invalidated portion of a window for painting.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_SYSCOLORCHANGE">
            <summary>
            The WM_SYSCOLORCHANGE message is sent to all top-level windows when a change is made to a system color setting.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_ENDSESSION">
            <summary>
            The WM_ENDSESSION message is sent to an application after the system processes the results of the WM_QUERYENDSESSION message. The WM_ENDSESSION message informs the application whether the session is ending.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_SHOWWINDOW">
            <summary>
            Sent to a window when the window is about to be hidden or shown.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_CTLCOLOR">
            <summary>
            The WM_CTLCOLOR message is used in 16-bit versions of Windows to change the color scheme of list boxes, the list boxes of combo boxes, message boxes, button controls, edit controls, static controls, and dialog boxes.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_SETTINGCHANGE">
            <summary>
            A message that is sent to all top-level windows when the SystemParametersInfo function changes a system-wide setting or when policy settings have changed.
            Applications should send WM_SETTINGCHANGE to all top-level windows when they make changes to system parameters. (This message cannot be sent directly to a window.) To send the WM_SETTINGCHANGE message to all top-level windows, use the SendMessageTimeout function with the hwnd parameter set to HWND_BROADCAST.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_DEVMODECHANGE">
            <summary>
            The WM_DEVMODECHANGE message is sent to all top-level windows whenever the user changes device-mode settings.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_ACTIVATEAPP">
            <summary>
            Sent when a window belonging to a different application than the active window is about to be activated. The message is sent to the application whose window is being activated and to the application whose window is being deactivated.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_FONTCHANGE">
            <summary>
            An application sends the WM_FONTCHANGE message to all top-level windows in the system after changing the pool of font resources.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_TIMECHANGE">
            <summary>
            A message that is sent whenever there is a change in the system time.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_CANCELMODE">
            <summary>
            Sent to cancel certain modes, such as mouse capture. For example, the system sends this message to the active window when a dialog box or message box is displayed. Certain functions also send this message explicitly to the specified window regardless of whether it is the active window. For example, the EnableWindow function sends this message when disabling the specified window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_SETCURSOR">
            <summary>
            Sent to a window if the mouse causes the cursor to move within a window and mouse input is not captured.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MOUSEACTIVATE">
            <summary>
            Sent when the cursor is in an inactive window and the user presses a mouse button. The parent window receives this message only if the child window passes it to the DefWindowProc function.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_CHILDACTIVATE">
            <summary>
            Sent to a child window when the user clicks the window's title bar or when the window is activated, moved, or sized.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_QUEUESYNC">
            <summary>
            Sent by a computer-based training (CBT) application to separate user-input messages from other messages sent through the WH_JOURNALPLAYBACK procedure.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_GETMINMAXINFO">
            <summary>
            Sent to a window when the size or position of the window is about to change. An application can use this message to override the window's default maximized size and position, or its default minimum or maximum tracking size.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_NEXTDLGCTL">
            <summary>
            Sent to a dialog box procedure to set the keyboard focus to a different control in the dialog box.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_SPOOLERSTATUS">
            <summary>
            The WM_SPOOLERSTATUS message is sent from Print Manager whenever a job is added to or removed from the Print Manager queue.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_DRAWITEM">
            <summary>
            Sent to the parent window of an owner-drawn button, combo box, list box, or menu when a visual aspect of the button, combo box, list box, or menu has changed.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MEASUREITEM">
            <summary>
            Sent to the owner window of a combo box, list box, list view control, or menu item when the control or menu is created.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_DELETEITEM">
            <summary>
            Sent to the owner of a list box or combo box when the list box or combo box is destroyed or when items are removed by the LB_DELETESTRING, LB_RESETCONTENT, CB_DELETESTRING, or CB_RESETCONTENT message. The system sends a WM_DELETEITEM message for each deleted item. The system sends the WM_DELETEITEM message for any deleted list box or combo box item with nonzero item data.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_VKEYTOITEM">
            <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_KEYDOWN message.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_CHARTOITEM">
            <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_CHAR message.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_SETFONT">
            <summary>
            Sets the font that a control is to use when drawing text.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_GETFONT">
            <summary>
            Retrieves the font with which the control is currently drawing its text.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_SETHOTKEY">
            <summary>
            Sent to a window to associate a hot key with the window. When the user presses the hot key, the system activates the window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_GETHOTKEY">
            <summary>
            Sent to determine the hot key associated with a window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_QUERYDRAGICON">
            <summary>
            Sent to a minimized (iconic) window. The window is about to be dragged by the user but does not have an icon defined for its class. An application can return a handle to an icon or cursor. The system displays this cursor or icon while the user drags the icon.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_COMPAREITEM">
            <summary>
            Sent to determine the relative position of a new item in the sorted list of an owner-drawn combo box or list box. Whenever the application adds a new item, the system sends this message to the owner of a combo box or list box created with the CBS_SORT or LBS_SORT style.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_GETOBJECT">
            <summary>
            Sent by both Microsoft Active Accessibility and Microsoft UI Automation to obtain information about an accessible object contained in a server application.
            Applications never send this message directly. Microsoft Active Accessibility sends this message in response to calls to AccessibleObjectFromPoint, AccessibleObjectFromEvent, or AccessibleObjectFromWindow. However, server applications handle this message. UI Automation sends this message in response to calls to IUIAutomation::ElementFromHandle, ElementFromPoint, and GetFocusedElement, and when handling events for which a client has registered.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_COMPACTING">
            <summary>
            Sent to all top-level windows when the system detects more than 12.5 percent of system time over a 30- to 60-second interval is being spent compacting memory. This indicates that system memory is low.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_WINDOWPOSCHANGING">
            <summary>
            Sent to a window whose size, position, or place in the Z order is about to change as a result of a call to the SetWindowPos function or another window-management function.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_WINDOWPOSCHANGED">
            <summary>
            Sent to a window whose size, position, or place in the Z order has changed as a result of a call to the SetWindowPos function or another window-management function.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_COPYDATA">
            <summary>
            An application sends the WM_COPYDATA message to pass data to another application.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_CANCELJOURNAL">
            <summary>
            Posted to an application when a user cancels the application's journaling activities. The message is posted with a NULL window handle.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_NOTIFY">
            <summary>
            Sent by a common control to its parent window when an event has occurred or the control requires some information.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_INPUTLANGCHANGEREQUEST">
            <summary>
            Posted to the window with the focus when the user chooses a new input language, either with the hotkey (specified in the Keyboard control panel application) or from the indicator on the system taskbar. An application can accept the change by passing the message to the DefWindowProc function or reject the change (and prevent it from taking place) by returning immediately.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_INPUTLANGCHANGE">
            <summary>
            Sent to the topmost affected window after an application's input language has been changed. You should make any application-specific settings and pass the message to the DefWindowProc function, which passes the message to all first-level child windows. These child windows can pass the message to DefWindowProc to have it pass the message to their child windows, and so on.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_TCARD">
            <summary>
            Sent to an application that has initiated a training card with Windows Help. The message informs the application when the user clicks an authorable button. An application initiates a training card by specifying the HELP_TCARD command in a call to the WinHelp function.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_HELP">
            <summary>
            Indicates that the user pressed the F1 key. If a menu is active when F1 is pressed, WM_HELP is sent to the window associated with the menu; otherwise, WM_HELP is sent to the window that has the keyboard focus. If no window has the keyboard focus, WM_HELP is sent to the currently active window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_USERCHANGED">
            <summary>
            Sent to all windows after the user has logged on or off. When the user logs on or off, the system updates the user-specific settings. The system sends this message immediately after updating the settings.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_NOTIFYFORMAT">
            <summary>
            Determines if a window accepts ANSI or Unicode structures in the WM_NOTIFY notification message. WM_NOTIFYFORMAT messages are sent from a common control to its parent window and from the parent window to the common control.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_CONTEXTMENU">
            <summary>
            Notifies a window that the user clicked the right mouse button (right-clicked) in the window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_STYLECHANGING">
            <summary>
            Sent to a window when the SetWindowLong function is about to change one or more of the window's styles.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_STYLECHANGED">
            <summary>
            Sent to a window after the SetWindowLong function has changed one or more of the window's styles.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_DISPLAYCHANGE">
            <summary>
            The WM_DISPLAYCHANGE message is sent to all windows when the display resolution has changed.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_GETICON">
            <summary>
            Sent to a window to retrieve a handle to the large or small icon associated with a window. The system displays the large icon in the ALT+TAB dialog, and the small icon in the window caption.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_SETICON">
            <summary>
            Associates a new large or small icon with a window. The system displays the large icon in the ALT+TAB dialog box, and the small icon in the window caption.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_NCCREATE">
            <summary>
            Sent prior to the WM_CREATE message when a window is first created.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_NCDESTROY">
            <summary>
            Notifies a window that its nonclient area is being destroyed. The DestroyWindow function sends the WM_NCDESTROY message to the window following the WM_DESTROY message.WM_DESTROY is used to free the allocated memory object associated with the window.
            The WM_NCDESTROY message is sent after the child windows have been destroyed. In contrast, WM_DESTROY is sent before the child windows are destroyed.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_NCCALCSIZE">
            <summary>
            Sent when the size and position of a window's client area must be calculated. By processing this message, an application can control the content of the window's client area when the size or position of the window changes.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_NCHITTEST">
            <summary>
            Sent to a window in order to determine what part of the window corresponds to a particular screen coordinate. This can happen, for example, when the cursor moves, when a mouse button is pressed or released, or in response to a call to a function such as WindowFromPoint. If the mouse is not captured, the message is sent to the window beneath the cursor. Otherwise, the message is sent to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_NCPAINT">
            <summary>
            The WM_NCPAINT message is sent to a window when its frame must be painted.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_NCACTIVATE">
            <summary>
            Sent to a window when its nonclient area needs to be changed to indicate an active or inactive state.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_GETDLGCODE">
            <summary>
            Sent to the window procedure associated with a control. By default, the system handles all keyboard input to the control; the system interprets certain types of keyboard input as dialog box navigation keys. To override this default behavior, the control can respond to the WM_GETDLGCODE message to indicate the types of input it wants to process itself.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_SYNCPAINT">
            <summary>
            The WM_SYNCPAINT message is used to synchronize painting while avoiding linking independent GUI threads.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_NCMOUSEMOVE">
            <summary>
            Posted to a window when the cursor is moved within the nonclient area of the window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_NCLBUTTONDOWN">
            <summary>
            Posted when the user presses the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_NCLBUTTONUP">
            <summary>
            Posted when the user releases the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_NCLBUTTONDBLCLK">
            <summary>
            Posted when the user double-clicks the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_NCRBUTTONDOWN">
            <summary>
            Posted when the user presses the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_NCRBUTTONUP">
            <summary>
            Posted when the user releases the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_NCRBUTTONDBLCLK">
            <summary>
            Posted when the user double-clicks the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_NCMBUTTONDOWN">
            <summary>
            Posted when the user presses the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_NCMBUTTONUP">
            <summary>
            Posted when the user releases the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_NCMBUTTONDBLCLK">
            <summary>
            Posted when the user double-clicks the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_NCXBUTTONDOWN">
            <summary>
            Posted when the user presses the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_NCXBUTTONUP">
            <summary>
            Posted when the user releases the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_NCXBUTTONDBLCLK">
            <summary>
            Posted when the user double-clicks the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_NCUAHDRAWCAPTION">
            <summary>
            Undocumented value that needs to be suppressed in custom
            drawn form.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_NCUAHDRAWFRAME">
            <summary>
            Undocumented value that needs to be suppressed in custom
            drawn form.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_KEYDOWN">
            <summary>
            Posted to the window with the keyboard focus when a nonsystem key is pressed. A nonsystem key is a key that is pressed when the ALT key is not pressed.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_KEYUP">
            <summary>
            Posted to the window with the keyboard focus when a nonsystem key is released. A nonsystem key is a key that is pressed when the ALT key is not pressed, or a keyboard key that is pressed when a window has the keyboard focus.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_CHAR">
            <summary>
            Posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_CHAR message contains the character code of the key that was pressed.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_DEADCHAR">
            <summary>
            Posted to the window with the keyboard focus when a WM_KEYUP message is translated by the TranslateMessage function. WM_DEADCHAR specifies a character code generated by a dead key. A dead key is a key that generates a character, such as the umlaut (double-dot), that is combined with another character to form a composite character. For example, the umlaut-O character (Ö) is generated by typing the dead key for the umlaut character, and then typing the O key.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_SYSKEYDOWN">
            <summary>
            Posted to the window with the keyboard focus when the user presses the F10 key (which activates the menu bar) or holds down the ALT key and then presses another key. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYDOWN message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_SYSKEYUP">
            <summary>
            Posted to the window with the keyboard focus when the user releases a key that was pressed while the ALT key was held down. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYUP message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_SYSCHAR">
            <summary>
            Posted to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. It specifies the character code of a system character key — that is, a character key that is pressed while the ALT key is down.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_SYSDEADCHAR">
            <summary>
            Sent to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. WM_SYSDEADCHAR specifies the character code of a system dead key — that is, a dead key that is pressed while holding down the ALT key.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_UNICHAR">
            <summary>
            Posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_UNICHAR message contains the character code of the key that was pressed.
            The WM_UNICHAR message is equivalent to WM_CHAR, but it uses Unicode Transformation Format (UTF)-32, whereas WM_CHAR uses UTF-16. It is designed to send or post Unicode characters to ANSI windows and it can can handle Unicode Supplementary Plane characters.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_IME_STARTCOMPOSITION">
            <summary>
            Sent immediately before the IME generates the composition string as a result of a keystroke.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_IME_ENDCOMPOSITION">
            <summary>
            Sent to an application when the IME ends composition.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_IME_COMPOSITION">
            <summary>
            Sent to an application when the IME changes composition status as a result of a keystroke.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_INITDIALOG">
            <summary>
            Sent to the dialog box procedure immediately before a dialog box is displayed. Dialog box procedures typically use this message to initialize controls and carry out any other initialization tasks that affect the appearance of the dialog box.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_COMMAND">
            <summary>
            Sent when the user selects a command item from a menu, when a control sends a notification message to its parent window, or when an accelerator keystroke is translated.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_SYSCOMMAND">
            <summary>
            A window receives this message when the user chooses a command from the Window menu (formerly known as the system or control menu) or when the user chooses the maximize button, minimize button, restore button, or close button.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_TIMER">
            <summary>
            Posted to the installing thread's message queue when a timer expires. 
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_HSCROLL">
            <summary>
            The WM_HSCROLL message is sent to a window when a scroll event occurs in the window's standard horizontal scroll bar. This message is also sent to the owner of a horizontal scroll bar control when a scroll event occurs in the control.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_VSCROLL">
            <summary>
            The WM_VSCROLL message is sent to a window when a scroll event occurs in the window's standard vertical scroll bar. This message is also sent to the owner of a vertical scroll bar control when a scroll event occurs in the control.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_INITMENU">
            <summary>
            Sent when a menu is about to become active. It occurs when the user clicks an item on the menu bar or presses a menu key. This allows the application to modify the menu before it is displayed.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_INITMENUPOPUP">
            <summary>
            Sent when a drop-down menu or submenu is about to become active. This allows an application to modify the menu before it is displayed, without changing the entire menu.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MENUSELECT">
            <summary>
            Sent to a menu's owner window when the user selects a menu item.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MENUCHAR">
            <summary>
            Sent when a menu is active and the user presses a key that does not correspond to any mnemonic or accelerator key. This message is sent to the window that owns the menu.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_ENTERIDLE">
            <summary>
            Sent to the owner window of a modal dialog box or menu that is entering an idle state. A modal dialog box or menu enters an idle state when no messages are waiting in its queue after it has processed one or more previous messages.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MENURBUTTONUP">
            <summary>
            Sent when the user releases the right mouse button while the cursor is on a menu item.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MENUDRAG">
            <summary>
            Sent to the owner of a drag-and-drop menu when the user drags a menu item.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MENUGETOBJECT">
            <summary>
            Sent to the owner of a drag-and-drop menu when the mouse cursor enters a menu item or moves from the center of the item to the top or bottom of the item.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_UNINITMENUPOPUP">
            <summary>
            Sent when a drop-down menu or submenu has been destroyed.   
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MENUCOMMAND">
            <summary>
            Sent when the user makes a selection from a menu.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_CHANGEUISTATE">
            <summary>
            An application sends the WM_CHANGEUISTATE message to indicate that the UI state should be changed.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_UPDATEUISTATE">
            <summary>
            An application sends the WM_UPDATEUISTATE message to change the UI state for the specified window and all its child windows.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_QUERYUISTATE">
            <summary>
            An application sends the WM_QUERYUISTATE message to retrieve the UI state for a window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_CTLCOLOREDIT">
            <summary>
            An edit control that is not read-only or disabled sends the WM_CTLCOLOREDIT message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the edit control.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_CTLCOLORLISTBOX">
            <summary>
            Sent to the parent window of a list box before the system draws the list box. By responding to this message, the parent window can set the text and background colors of the list box by using the specified display device context handle.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_CTLCOLORBTN">
            <summary>
            The WM_CTLCOLORBTN message is sent to the parent window of a button before drawing the button. The parent window can change the button's text and background colors. However, only owner-drawn buttons respond to the parent window processing this message.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_CTLCOLORDLG">
            <summary>
            Sent to a dialog box before the system draws the dialog box. By responding to this message, the dialog box can set its text and background colors using the specified display device context handle.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_CTLCOLORSCROLLBAR">
            <summary>
            The WM_CTLCOLORSCROLLBAR message is sent to the parent window of a scroll bar control when the control is about to be drawn. By responding to this message, the parent window can use the display context handle to set the background color of the scroll bar control.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_CTLCOLORSTATIC">
            <summary>
            A static control, or an edit control that is read-only or disabled, sends the WM_CTLCOLORSTATIC message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the static control.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MOUSEMOVE">
            <summary>
            Posted to a window when the cursor moves. If the mouse is not captured, the message is posted to the window that contains the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_LBUTTONDOWN">
            <summary>
            Posted when the user presses the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_LBUTTONUP">
            <summary>
            Posted when the user releases the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_LBUTTONDBLCLK">
            <summary>
            Posted when the user double-clicks the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_RBUTTONDOWN">
            <summary>
            Posted when the user presses the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_RBUTTONUP">
            <summary>
            Posted when the user releases the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_RBUTTONDBLCLK">
            <summary>
            Posted when the user double-clicks the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MBUTTONDOWN">
            <summary>
            Posted when the user presses the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MBUTTONUP">
            <summary>
            Posted when the user releases the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MBUTTONDBLCLK">
            <summary>
            Posted when the user double-clicks the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MOUSEWHEEL">
            <summary>
            Sent to the focus window when the mouse wheel is rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_XBUTTONDOWN">
            <summary>
            Posted when the user presses the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_XBUTTONUP">
            <summary>
            Posted when the user releases the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_XBUTTONDBLCLK">
            <summary>
            Posted when the user double-clicks the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MOUSEHWHEEL">
            <summary>
            Sent to the active window when the mouse's horizontal scroll wheel is tilted or rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_PARENTNOTIFY">
            <summary>
            Sent to the parent of a child window when the child window is created or destroyed, or when the user clicks a mouse button while the cursor is over the child window. When the child window is being created, the system sends WM_PARENTNOTIFY just before the CreateWindow or CreateWindowEx function that creates the window returns. When the child window is being destroyed, the system sends the message before any processing to destroy the window takes place.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_ENTERMENULOOP">
            <summary>
            Notifies an application's main window procedure that a menu modal loop has been entered.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_EXITMENULOOP">
            <summary>
            Notifies an application's main window procedure that a menu modal loop has been entered.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_NEXTMENU">
            <summary>
            Sent to an application when the right or left arrow key is used to switch between the menu bar and the system menu.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_SIZING">
            <summary>
            Sent to a window that the user is resizing. By processing this message, an application can monitor the size and position of the drag rectangle and, if needed, change its size or position.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_CAPTURECHANGED">
            <summary>
            Sent to the window that is losing the mouse capture.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MOVING">
            <summary>
            Sent to a window that the user is moving. By processing this message, an application can monitor the position of the drag rectangle and, if needed, change its position.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_POWERBROADCAST">
            <summary>
            Notifies applications that a power-management event has occurred.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_DEVICECHANGE">
            <summary>
            Notifies an application of a change to the hardware configuration of a device or the computer.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MDICREATE">
            <summary>
            An application sends the WM_MDICREATE message to a multiple-document interface (MDI) client window to create an MDI child window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MDIDESTROY">
            <summary>
            An application sends the WM_MDIDESTROY message to a multiple-document interface (MDI) client window to close an MDI child window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MDIACTIVATE">
            <summary>
            An application sends the WM_MDIACTIVATE message to a multiple-document interface (MDI) client window to instruct the client window to activate a different MDI child window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MDIRESTORE">
            <summary>
            An application sends the WM_MDIRESTORE message to a multiple-document interface (MDI) client window to restore an MDI child window from maximized or minimized size.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MDINEXT">
            <summary>
            An application sends the WM_MDINEXT message to a multiple-document interface (MDI) client window to activate the next or previous child window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MDIMAXIMIZE">
            <summary>
            An application sends the WM_MDIMAXIMIZE message to a multiple-document interface (MDI) client window to maximize an MDI child window. The system resizes the child window to make its client area fill the client window. The system places the child window's window menu icon in the rightmost position of the frame window's menu bar, and places the child window's restore icon in the leftmost position. The system also appends the title bar text of the child window to that of the frame window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MDITILE">
            <summary>
            An application sends the WM_MDITILE message to a multiple-document interface (MDI) client window to arrange all of its MDI child windows in a tile format.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MDICASCADE">
            <summary>
            An application sends the WM_MDICASCADE message to a multiple-document interface (MDI) client window to arrange all its child windows in a cascade format.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MDIICONARRANGE">
            <summary>
            An application sends the WM_MDIICONARRANGE message to a multiple-document interface (MDI) client window to arrange all minimized MDI child windows. It does not affect child windows that are not minimized.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MDIGETACTIVE">
            <summary>
            An application sends the WM_MDIGETACTIVE message to a multiple-document interface (MDI) client window to retrieve the handle to the active MDI child window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MDISETMENU">
            <summary>
            An application sends the WM_MDISETMENU message to a multiple-document interface (MDI) client window to replace the entire menu of an MDI frame window, to replace the window menu of the frame window, or both.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_ENTERSIZEMOVE">
            <summary>
            Sent one time to a window after it enters the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns.
            The system sends the WM_ENTERSIZEMOVE message regardless of whether the dragging of full windows is enabled.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_EXITSIZEMOVE">
            <summary>
            Sent one time to a window, after it has exited the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_DROPFILES">
            <summary>
            Sent when the user drops a file on the window of an application that has registered itself as a recipient of dropped files.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MDIREFRESHMENU">
            <summary>
            An application sends the WM_MDIREFRESHMENU message to a multiple-document interface (MDI) client window to refresh the window menu of the MDI frame window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_IME_NOTIFY">
            <summary>
            Sent to an application to notify it of changes to the IME window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_IME_CONTROL">
            <summary>
            Sent by an application to direct the IME window to carry out the requested command. The application uses this message to control the IME window that it has created. To send this message, the application calls the SendMessage function with the following parameters.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_IME_COMPOSITIONFULL">
            <summary>
            Sent to an application when the IME window finds no space to extend the area for the composition window. 
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_IME_SELECT">
            <summary>
            Sent to an application when the operating system is about to change the current IME. 
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_IME_CHAR">
            <summary>
            Sent to an application when the IME gets a character of the conversion result.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_IME_REQUEST">
            <summary>
            Sent to an application to provide commands and request information. 
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_IME_KEYDOWN">
            <summary>
            Sent to an application by the IME to notify the application of a key press and to keep message order.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_IME_KEYUP">
            <summary>
            Sent to an application by the IME to notify the application of a key release and to keep message order. 
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_NCMOUSEHOVER">
            <summary>
            Posted to a window when the cursor hovers over the nonclient area of the window for the period of time specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MOUSEHOVER">
            <summary>
            Posted to a window when the cursor hovers over the client area of the window for the period of time specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_NCMOUSELEAVE">
            <summary>
            Posted to a window when the cursor leaves the nonclient area of the window specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_MOUSELEAVE">
            <summary>
            Posted to a window when the cursor leaves the client area of the window specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_DPICHANGED">
            <summary>
            Sent when a window's position changes such that most of its area intersects a monitor with a dots per inch (dpi) that is different from the DPI before the position change.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_CUT">
            <summary>
            An application sends a WM_CUT message to an edit control or combo box to delete (cut) the current selection, if any, in the edit control and copy the deleted text to the clipboard in CF_TEXT format.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_COPY">
            <summary>
            An application sends the WM_COPY message to an edit control or combo box to copy the current selection to the clipboard in CF_TEXT format.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_PASTE">
            <summary>
            An application sends a WM_PASTE message to an edit control or combo box to copy the current content of the clipboard to the edit control at the current caret position. Data is inserted only if the clipboard contains data in CF_TEXT format.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_CLEAR">
            <summary>
            An application sends a WM_CLEAR message to an edit control or combo box to delete (clear) the current selection, if any, from the edit control.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_UNDO">
            <summary>
            An application sends a WM_UNDO message to an edit control to undo the last operation. When this message is sent to an edit control, the previously deleted text is restored or the previously added text is deleted.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_RENDERFORMAT">
            <summary>
            Sent to the clipboard owner if it has delayed rendering a specific clipboard format and if an application has requested data in that format. The clipboard owner must render data in the specified format and place it on the clipboard by calling the SetClipboardData function.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_RENDERALLFORMATS">
            <summary>
            Sent to the clipboard owner before it is destroyed, if the clipboard owner has delayed rendering one or more clipboard formats. For the content of the clipboard to remain available to other applications, the clipboard owner must render data in all the formats it is capable of generating, and place the data on the clipboard by calling the SetClipboardData function.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_DESTROYCLIPBOARD">
            <summary>
            ent to the clipboard owner when a call to the EmptyClipboard function empties the clipboard.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_DRAWCLIPBOARD">
            <summary>
            Sent to the first window in the clipboard viewer chain when the content of the clipboard changes. This enables a clipboard viewer window to display the new content of the clipboard.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_PAINTCLIPBOARD">
            <summary>
            Sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area needs repainting.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_VSCROLLCLIPBOARD">
            <summary>
            Sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's vertical scroll bar. The owner should scroll the clipboard image and update the scroll bar values.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_SIZECLIPBOARD">
            <summary>
            Sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area has changed size.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_ASKCBFORMATNAME">
            <summary>
            Sent to the clipboard owner by a clipboard viewer window to request the name of a CF_OWNERDISPLAY clipboard format.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_CHANGECBCHAIN">
            <summary>
            Sent to the first window in the clipboard viewer chain when a window is being removed from the chain.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_HSCROLLCLIPBOARD">
            <summary>
            Sent to the clipboard owner by a clipboard viewer window. This occurs when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's horizontal scroll bar. The owner should scroll the clipboard image and update the scroll bar values.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_QUERYNEWPALETTE">
            <summary>
            The WM_QUERYNEWPALETTE message informs a window that it is about to receive the keyboard focus, giving the window the opportunity to realize its logical palette when it receives the focus.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_PALETTEISCHANGING">
            <summary>
            The WM_PALETTEISCHANGING message informs applications that an application is going to realize its logical palette.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_PALETTECHANGED">
            <summary>
            The WM_PALETTECHANGED message is sent to all top-level and overlapped windows after the window with the keyboard focus has realized its logical palette, thereby changing the system palette. This message enables a window that uses a color palette but does not have the keyboard focus to realize its logical palette and update its client area.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_HOTKEY">
            <summary>
            Posted when the user presses a hot key registered by the RegisterHotKey function. The message is placed at the top of the message queue associated with the thread that registered the hot key.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_POPUPSYSTEMMENU">
            <summary>
            Undocumented message to show system menu.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_PRINT">
            <summary>
            The WM_PRINT message is sent to a window to request that it draw itself in the specified device context, most commonly in a printer device context.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_PRINTCLIENT">
            <summary>
            The WM_PRINTCLIENT message is sent to a window to request that it draw its client area in the specified device context, most commonly in a printer device context.
            Unlike WM_PRINT, WM_PRINTCLIENT is not processed by DefWindowProc. A window should process the WM_PRINTCLIENT message through an application-defined WindowProc function for it to be used properly.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_APPCOMMAND">
            <summary>
            Notifies a window that the user generated an application command event, for example, by clicking an application command button using the mouse or typing an application command key on the keyboard.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_THEMECHANGED">
            <summary>
            Broadcast to every window following a theme change event. Examples of theme change events are the activation of a theme, the deactivation of a theme, or a transition from one theme to another.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_CLIPBOARDUPDATE">
            <summary>
            Sent when the contents of the clipboard have changed.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_DWMCOMPOSITIONCHANGED">
            <summary>
            Sent to all top-level windows when Desktop Window Manager (DWM) composition has been enabled or disabled.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_DWMNCRENDERINGCHANGED">
            <summary>
            Sent when the non-client area rendering policy has changed. DwmGetWindowAttribute and DwmSetWindowAttribute are used to get or set the non-client rendering policy specified by the DWMNCRENDERINGPOLICY enumeration.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_DWMCOLORIZATIONCOLORCHANGED">
            <summary>
            Sent to all top-level windows when the colorization color has changed.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_DWMWINDOWMAXIMIZEDCHANGE">
            <summary>
            Sent when a Desktop Window Manager (DWM) composed window is maximized.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowMessage.WM_GETTITLEBARINFOEX">
            <summary>
            Sent to request extended title bar information. 
            </summary>
        </member>
        <member name="T:CommonWin32.Windows.WINDOWPLACEMENT">
            <summary>
            Contains information about the placement of a window on the screen.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WINDOWPLACEMENT.length">
            <summary>
            The length of the structure, in bytes. Before calling the GetWindowPlacement or SetWindowPlacement functions, set this member to sizeof(WINDOWPLACEMENT).
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WINDOWPLACEMENT.flags">
            <summary>
            The flags that control the position of the minimized window and the method by which the window is restored.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WINDOWPLACEMENT.showCmd">
            <summary>
            The current show state of the window. This member can be one of the following values.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WINDOWPLACEMENT.ptMinPosition">
            <summary>
            The coordinates of the window's upper-left corner when the window is minimized.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WINDOWPLACEMENT.ptMaxPosition">
            <summary>
            The coordinates of the window's upper-left corner when the window is maximized.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WINDOWPLACEMENT.rcNormalPosition">
            <summary>
            The window's coordinates when the window is in the restored position.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowPlacementFlags.WPF_SETMINPOSITION">
            <summary>
            The coordinates of the minimized window may be specified.
            This flag must be specified if the coordinates are set in the ptMinPosition member.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowPlacementFlags.WPF_RESTORETOMAXIMIZED">
            <summary>
            The restored window will be maximized, regardless of whether it was maximized before it was minimized. This setting is only valid the next time the window is restored. It does not change the default restoration behavior.
            This flag is only valid when the SW_SHOWMINIMIZED value is specified for the showCmd member.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowPlacementFlags.WPF_ASYNCWINDOWPLACEMENT">
            <summary>
            If the calling thread and the thread that owns the window are attached to different input queues, the system posts the request to the thread that owns the window. This prevents the calling thread from blocking its execution while other threads process the request.
            </summary>
        </member>
        <member name="T:CommonWin32.Windows.WINDOWPOS">
            <summary>
            Contains information about the size and position of a window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WINDOWPOS.hwnd">
            <summary>
            Handle to the window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WINDOWPOS.hWndInsertAfter">
            <summary>
            Specifies the position of the window in Z order (front-to-back position). 
            This member can be a handle to the window behind which this window is placed, 
            or can be one of the special values listed with the SetWindowPos function.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WINDOWPOS.x">
            <summary>
            Specifies the position of the left edge of the window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WINDOWPOS.y">
            <summary>
            Specifies the position of the top edge of the window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WINDOWPOS.cx">
            <summary>
            Specifies the window width, in pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WINDOWPOS.cy">
            <summary>
            Specifies the window height, in pixels.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WINDOWPOS.flags">
            <summary>
            Specifies the window position.
            </summary>
        </member>
        <member name="M:CommonWin32.Windows.WINDOWPOS.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:CommonWin32.Windows.WindowStyles">
            <summary>
            Style flags for a window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStyles.WS_OVERLAPPED">
            <summary>
            Creates an overlapped window. An overlapped window usually has a caption and a border.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStyles.WS_POPUP">
            <summary>
            Creates a pop-up window. Cannot be used with the WS_CHILD style.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStyles.WS_CHILD">
            <summary>
            Creates a child window. Cannot be used with the WS_POPUP style.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStyles.WS_MINIMIZE">
            <summary>
            Creates a window that is initially minimized. For use with the WS_OVERLAPPED style only.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStyles.WS_VISIBLE">
            <summary>
            Creates a window that is initially visible.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStyles.WS_DISABLED">
            <summary>
            Creates a window that is initially disabled.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStyles.WS_CLIPSIBLINGS">
            <summary>
            Clips child windows relative to each other; that is, when a particular child window receives a paint message, the WS_CLIPSIBLINGS style clips all other overlapped child windows out of the region of the child window to be updated. (If WS_CLIPSIBLINGS is not given and child windows overlap, when you draw within the client area of a child window, it is possible to draw within the client area of a neighboring child window.) For use with the WS_CHILD style only.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStyles.WS_CLIPCHILDREN">
            <summary>
            Excludes the area occupied by child windows when you draw within the parent window. Used when you create the parent window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStyles.WS_MAXIMIZE">
            <summary>
            Creates a window of maximum size.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStyles.WS_CAPTION">
            <summary>
            Creates a window that has a title bar (implies the WS_BORDER style). Cannot be used with the WS_DLGFRAME style.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStyles.WS_BORDER">
            <summary>
            Creates a window that has a border.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStyles.WS_DLGFRAME">
            <summary>
            Creates a window with a double border but no title.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStyles.WS_VSCROLL">
            <summary>
            Creates a window that has a vertical scroll bar.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStyles.WS_HSCROLL">
            <summary>
            Creates a window that has a horizontal scroll bar.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStyles.WS_SYSMENU">
            <summary>
            Creates a window that has a Control-menu box in its title bar. Used only for windows with title bars.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStyles.WS_THICKFRAME">
            <summary>
            Creates a window with a thick frame that can be used to size the window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStyles.WS_GROUP">
            <summary>
            Specifies the first control of a group of controls in which the user can move from one control to the next with the arrow keys. All controls defined with the WS_GROUP style FALSE after the first control belong to the same group. The next control with the WS_GROUP style starts the next group (that is, one group ends where the next begins).
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStyles.WS_TABSTOP">
            <summary>
            Specifies one of any number of controls through which the user can move by using the TAB key. The TAB key moves the user to the next control specified by the WS_TABSTOP style.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStyles.WS_MINIMIZEBOX">
            <summary>
            Creates a window that has a Minimize button.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStyles.WS_MAXIMIZEBOX">
            <summary>
            Creates a window that has a Maximize button.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStyles.WS_TILED">
            <summary>
            Creates an overlapped window. An overlapped window has a title bar and a border. Same as the WS_OVERLAPPED style.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStyles.WS_ICONIC">
            <summary>
            Creates a window that is initially minimized. Same as the WS_MINIMIZE style.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStyles.WS_SIZEBOX">
            <summary>
            Creates a window that has a sizing border. Same as the WS_THICKFRAME style.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStyles.WS_TILEDWINDOW">
            <summary>
            Creates an overlapped window with the WS_OVERLAPPED, WS_CAPTION, WS_SYSMENU, WS_THICKFRAME, WS_MINIMIZEBOX, and WS_MAXIMIZEBOX styles. Same as the WS_OVERLAPPEDWINDOW style.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStyles.WS_OVERLAPPEDWINDOW">
            <summary>
            Creates an overlapped window with the WS_OVERLAPPED, WS_CAPTION, WS_SYSMENU, WS_THICKFRAME, WS_MINIMIZEBOX, and WS_MAXIMIZEBOX styles.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStyles.WS_POPUPWINDOW">
            <summary>
            Creates a pop-up window with the WS_BORDER, WS_POPUP, and WS_SYSMENU styles. The WS_CAPTION style must be combined with the WS_POPUPWINDOW style to make the Control menu visible.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStyles.WS_CHILDWINDOW">
            <summary>
            Same as the WS_CHILD style.
            </summary>
        </member>
        <member name="T:CommonWin32.Windows.WindowStylesEx">
            <summary>
            Extended style flags for a window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStylesEx.WS_EX_DLGMODALFRAME">
            <summary>
            Designates a window with a double border that may (optionally) be created with a title bar when you specify the WS_CAPTION style flag in the dwStyle parameter.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStylesEx.WS_EX_NOPARENTNOTIFY">
            <summary>
             Specifies that a child window created with this style will not send the WM_PARENTNOTIFY message to its parent window when the child window is created or destroyed.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStylesEx.WS_EX_TOPMOST">
            <summary>
            Specifies that a window created with this style should be placed above all nontopmost windows and stay above them even when the window is deactivated. An application can use the SetWindowPos member function to add or remove this attribute.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStylesEx.WS_EX_ACCEPTFILES">
            <summary>
            Specifies that a window created with this style accepts drag-and-drop files.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStylesEx.WS_EX_TRANSPARENT">
            <summary>
            Specifies that a window created with this style is to be transparent. That is, any windows that are beneath the window are not obscured by the window. A window created with this style receives WM_PAINT messages only after all sibling windows beneath it have been updated.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStylesEx.WS_EX_MDICHILD">
            <summary>
            Creates an MDI child window.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStylesEx.WS_EX_TOOLWINDOW">
            <summary>
            Creates a tool window, which is a window intended to be used as a floating toolbar. A tool window has a title bar that is shorter than a normal title bar, and the window title is drawn using a smaller font. A tool window does not appear in the task bar or in the window that appears when the user presses ALT+TAB.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStylesEx.WS_EX_WINDOWEDGE">
            <summary>
            Specifies that a window has a border with a raised edge.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStylesEx.WS_EX_CLIENTEDGE">
            <summary>
            Specifies that a window has a 3D look — that is, a border with a sunken edge.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStylesEx.WS_EX_CONTEXTHELP">
            <summary>
             Includes a question mark in the title bar of the window. When the user clicks the question mark, the cursor changes to a question mark with a pointer. If the user then clicks a child window, the child receives a WM_HELP message.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStylesEx.WS_EX_RIGHT">
            <summary>
            Gives a window generic right-aligned properties. This depends on the window class.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStylesEx.WS_EX_LEFT">
            <summary>
            Gives window generic left-aligned properties. This is the default.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStylesEx.WS_EX_RTLREADING">
            <summary>
            Displays the window text using right-to-left reading order properties.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStylesEx.WS_EX_LTRREADING">
            <summary>
            Displays the window text using left-to-right reading order properties. This is the default.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStylesEx.WS_EX_LEFTSCROLLBAR">
            <summary>
            Places a vertical scroll bar to the left of the client area.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStylesEx.WS_EX_RIGHTSCROLLBAR">
            <summary>
            Places a vertical scroll bar (if present) to the right of the client area. This is the default.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStylesEx.WS_EX_CONTROLPARENT">
            <summary>
            Allows the user to navigate among the child windows of the window by using the TAB key.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStylesEx.WS_EX_STATICEDGE">
            <summary>
            Creates a window with a three-dimensional border style intended to be used for items that do not accept user input.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStylesEx.WS_EX_APPWINDOW">
            <summary>
            Forces a top-level window onto the taskbar when the window is visible.
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStylesEx.WS_EX_OVERLAPPEDWINDOW">
            <summary>
            Combines the WS_EX_CLIENTEDGE and WS_EX_WINDOWEDGE styles
            </summary>
        </member>
        <member name="F:CommonWin32.Windows.WindowStylesEx.WS_EX_PALETTEWINDOW">
            <summary>
            Combines the WS_EX_WINDOWEDGE and WS_EX_TOPMOST styles.
            </summary>
        </member>
    </members>
</doc>
